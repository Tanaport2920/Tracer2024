
Tracer2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009758  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  080098e8  080098e8  000198e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cc4  08009cc4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009cc4  08009cc4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cc4  08009cc4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000418  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010b15  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000211f  00000000  00000000  00030d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e80  00000000  00000000  00032e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b6a  00000000  00000000  00033d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d044  00000000  00000000  0003486a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001247d  00000000  00000000  000518ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ae49a  00000000  00000000  00063d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e28  00000000  00000000  001121c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00116ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098d0 	.word	0x080098d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080098d0 	.word	0x080098d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <__io_putchar+0x20>)
 8000bfa:	f005 fcb1 	bl	8006560 <HAL_UART_Transmit>
	return ch;
 8000bfe:	687b      	ldr	r3, [r7, #4]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000040c 	.word	0x2000040c

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	b08f      	sub	sp, #60	; 0x3c
 8000c10:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f001 fadd 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f9f3 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 fdad 	bl	8001778 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c1e:	f000 fbe1 	bl	80013e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c22:	f000 fc55 	bl	80014d0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000c26:	f000 fcff 	bl	8001628 <MX_TIM16_Init>
  MX_TIM6_Init();
 8000c2a:	f000 fcc7 	bl	80015bc <MX_TIM6_Init>
  MX_TIM1_Init();
 8000c2e:	f000 fb87 	bl	8001340 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000c32:	f000 fa43 	bl	80010bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c36:	f000 faf9 	bl	800122c <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000c3a:	f000 fd6d 	bl	8001718 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8000c3e:	4bb0      	ldr	r3, [pc, #704]	; (8000f00 <main+0x2f4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f006 fdf6 	bl	8007838 <setbuf>
  setbuf(stdin, NULL );
 8000c4c:	4bac      	ldr	r3, [pc, #688]	; (8000f00 <main+0x2f4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f006 fdef 	bl	8007838 <setbuf>
  uint16_t value[10];
  uint16_t tp1;
  uint16_t tp2;
  uint8_t mode = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	76fb      	strb	r3, [r7, #27]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // モーターの電源を入れる
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	48a8      	ldr	r0, [pc, #672]	; (8000f04 <main+0x2f8>)
 8000c64:	f002 fe38 	bl	80038d8 <HAL_GPIO_WritePin>
  printf("Hello\n");
 8000c68:	48a7      	ldr	r0, [pc, #668]	; (8000f08 <main+0x2fc>)
 8000c6a:	f006 fddd 	bl	8007828 <puts>

  while (1)
  {

	  while(1){
		  if (mode == 0) {
 8000c6e:	7efb      	ldrb	r3, [r7, #27]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10c      	bne.n	8000c8e <main+0x82>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f002 fe2b 	bl	80038d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	489f      	ldr	r0, [pc, #636]	; (8000f04 <main+0x2f8>)
 8000c88:	f002 fe26 	bl	80038d8 <HAL_GPIO_WritePin>
 8000c8c:	e03c      	b.n	8000d08 <main+0xfc>
		  }else if (mode == 1) {
 8000c8e:	7efb      	ldrb	r3, [r7, #27]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d113      	bne.n	8000cbc <main+0xb0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f002 fe1b 	bl	80038d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f002 fe14 	bl	80038d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	4893      	ldr	r0, [pc, #588]	; (8000f04 <main+0x2f8>)
 8000cb6:	f002 fe0f 	bl	80038d8 <HAL_GPIO_WritePin>
 8000cba:	e025      	b.n	8000d08 <main+0xfc>
		  } else if (mode == 2) {
 8000cbc:	7efb      	ldrb	r3, [r7, #27]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d113      	bne.n	8000cea <main+0xde>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f002 fe04 	bl	80038d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f002 fdfd 	bl	80038d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	4888      	ldr	r0, [pc, #544]	; (8000f04 <main+0x2f8>)
 8000ce4:	f002 fdf8 	bl	80038d8 <HAL_GPIO_WritePin>
 8000ce8:	e00e      	b.n	8000d08 <main+0xfc>
		  } else if (mode == 3) {
 8000cea:	7efb      	ldrb	r3, [r7, #27]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d10b      	bne.n	8000d08 <main+0xfc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4883      	ldr	r0, [pc, #524]	; (8000f04 <main+0x2f8>)
 8000cf6:	f002 fdef 	bl	80038d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f002 fde8 	bl	80038d8 <HAL_GPIO_WritePin>
		  }

		  // SW1 が押されたら，mode の値を 1 増やす。mode == 3 なら次は 0
		  if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET ){
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f002 fdca 	bl	80038a8 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d114      	bne.n	8000d44 <main+0x138>
			HAL_Delay(100);
 8000d1a:	2064      	movs	r0, #100	; 0x64
 8000d1c:	f001 fabe 	bl	800229c <HAL_Delay>
			while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET );
 8000d20:	bf00      	nop
 8000d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f002 fdbd 	bl	80038a8 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f6      	beq.n	8000d22 <main+0x116>
			mode++;
 8000d34:	7efb      	ldrb	r3, [r7, #27]
 8000d36:	3301      	adds	r3, #1
 8000d38:	76fb      	strb	r3, [r7, #27]
			if(mode > 3){
 8000d3a:	7efb      	ldrb	r3, [r7, #27]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d901      	bls.n	8000d44 <main+0x138>
			  mode = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	76fb      	strb	r3, [r7, #27]
			}
		  }

		  // SW2 が押されたら，mode の値を 1 減らす。mode == 0 なら次は 3
		  if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET ){
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f002 fdac 	bl	80038a8 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10f      	bne.n	8000d76 <main+0x16a>
			HAL_Delay(100);
 8000d56:	2064      	movs	r0, #100	; 0x64
 8000d58:	f001 faa0 	bl	800229c <HAL_Delay>
			while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET );
 8000d5c:	bf00      	nop
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f002 fd9f 	bl	80038a8 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f6      	beq.n	8000d5e <main+0x152>
			mode--;
 8000d70:	7efb      	ldrb	r3, [r7, #27]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	76fb      	strb	r3, [r7, #27]
			  mode = 3;
			}
		  }

		  // SW3 が押されたら，mode の値に応じて処理を実行する
		  if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET ){
 8000d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f002 fd93 	bl	80038a8 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f47f af72 	bne.w	8000c6e <main+0x62>
			HAL_Delay(100);
 8000d8a:	2064      	movs	r0, #100	; 0x64
 8000d8c:	f001 fa86 	bl	800229c <HAL_Delay>
			while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET );
 8000d90:	bf00      	nop
 8000d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f002 fd85 	bl	80038a8 <HAL_GPIO_ReadPin>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f6      	beq.n	8000d92 <main+0x186>
			break;
		  }
	  }

	  if(mode==0){
 8000da4:	7efb      	ldrb	r3, [r7, #27]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 80f8 	bne.w	8000f9c <main+0x390>
		  switch(tp1){
 8000dac:	8bfb      	ldrh	r3, [r7, #30]
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d868      	bhi.n	8000e84 <main+0x278>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <main+0x1ac>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dd5 	.word	0x08000dd5
 8000dbc:	08000ddd 	.word	0x08000ddd
 8000dc0:	08000df9 	.word	0x08000df9
 8000dc4:	08000e15 	.word	0x08000e15
 8000dc8:	08000e31 	.word	0x08000e31
 8000dcc:	08000e4d 	.word	0x08000e4d
 8000dd0:	08000e69 	.word	0x08000e69
			case 0:
				HAL_ADC_Stop(&hadc1); // 全てのチャンネルのAD変換が終�?した
 8000dd4:	484d      	ldr	r0, [pc, #308]	; (8000f0c <main+0x300>)
 8000dd6:	f001 fccd 	bl	8002774 <HAL_ADC_Stop>
			break;
 8000dda:	e053      	b.n	8000e84 <main+0x278>
			case 1:
				// チャンネル1
				HAL_ADC_Start(&hadc1);  // AD変換を開始す??��?��?
 8000ddc:	484b      	ldr	r0, [pc, #300]	; (8000f0c <main+0x300>)
 8000dde:	f001 fc13 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 10); // チャンネル1のAD変換終�?まで??��?��?機す??��?��?
 8000de2:	210a      	movs	r1, #10
 8000de4:	4849      	ldr	r0, [pc, #292]	; (8000f0c <main+0x300>)
 8000de6:	f001 fcfb 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[9] = HAL_ADC_GetValue(&hadc1);  // チャンネル1のAD変換結果??��?��? value9 に格納する�???��?��value9はA10のセンサ値を示す�??
 8000dea:	4848      	ldr	r0, [pc, #288]	; (8000f0c <main+0x300>)
 8000dec:	f001 fdc6 	bl	800297c <HAL_ADC_GetValue>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	82fb      	strh	r3, [r7, #22]
			break;
 8000df6:	e045      	b.n	8000e84 <main+0x278>

			case 2:
				// チャンネル2
				HAL_ADC_Start(&hadc1);  // AD変換を開始す??��?��?
 8000df8:	4844      	ldr	r0, [pc, #272]	; (8000f0c <main+0x300>)
 8000dfa:	f001 fc05 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 10); // チャンネル2のAD変換終�?まで??��?��?機す??��?��?
 8000dfe:	210a      	movs	r1, #10
 8000e00:	4842      	ldr	r0, [pc, #264]	; (8000f0c <main+0x300>)
 8000e02:	f001 fced 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[8] = HAL_ADC_GetValue(&hadc1);  // チャンネル2のAD変換結果??��?��? value8に格納する�???��?��value8はA9のセンサ値を示す�??
 8000e06:	4841      	ldr	r0, [pc, #260]	; (8000f0c <main+0x300>)
 8000e08:	f001 fdb8 	bl	800297c <HAL_ADC_GetValue>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	82bb      	strh	r3, [r7, #20]
			break;
 8000e12:	e037      	b.n	8000e84 <main+0x278>

			case 3:
				// チャンネル3
				HAL_ADC_Start(&hadc1);  // AD変換を開始す??��?��?
 8000e14:	483d      	ldr	r0, [pc, #244]	; (8000f0c <main+0x300>)
 8000e16:	f001 fbf7 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 10); // チャンネル3のAD変換終�?まで??��?��?機す??��?��?
 8000e1a:	210a      	movs	r1, #10
 8000e1c:	483b      	ldr	r0, [pc, #236]	; (8000f0c <main+0x300>)
 8000e1e:	f001 fcdf 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[6] = HAL_ADC_GetValue(&hadc1);  // チャンネル3のAD変換結果??��?��? value6 に格納する�???��?��value6はA7のセンサ値を示す�??
 8000e22:	483a      	ldr	r0, [pc, #232]	; (8000f0c <main+0x300>)
 8000e24:	f001 fdaa 	bl	800297c <HAL_ADC_GetValue>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	823b      	strh	r3, [r7, #16]
			break;
 8000e2e:	e029      	b.n	8000e84 <main+0x278>

			case 4:
				// チャンネル4
				HAL_ADC_Start(&hadc1);  // AD変換を開始す??��?��?
 8000e30:	4836      	ldr	r0, [pc, #216]	; (8000f0c <main+0x300>)
 8000e32:	f001 fbe9 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 100); // チャンネル4のAD変換終�?まで??��?��?機す??��?��?
 8000e36:	2164      	movs	r1, #100	; 0x64
 8000e38:	4834      	ldr	r0, [pc, #208]	; (8000f0c <main+0x300>)
 8000e3a:	f001 fcd1 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[5] = HAL_ADC_GetValue(&hadc1);  // チャンネル4のAD変換結果??��?��? value5 に格納する�???��?��value5はA6のセンサ値を示す�??
 8000e3e:	4833      	ldr	r0, [pc, #204]	; (8000f0c <main+0x300>)
 8000e40:	f001 fd9c 	bl	800297c <HAL_ADC_GetValue>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	81fb      	strh	r3, [r7, #14]
			break;
 8000e4a:	e01b      	b.n	8000e84 <main+0x278>

			case 5:
				// チャンネル5
				HAL_ADC_Start(&hadc1);  // AD変換を開始す??��?��?
 8000e4c:	482f      	ldr	r0, [pc, #188]	; (8000f0c <main+0x300>)
 8000e4e:	f001 fbdb 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 10); // チャンネル4のAD変換終�?まで??��?��?機す??��?��?
 8000e52:	210a      	movs	r1, #10
 8000e54:	482d      	ldr	r0, [pc, #180]	; (8000f0c <main+0x300>)
 8000e56:	f001 fcc3 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[1] = HAL_ADC_GetValue(&hadc1);  // チャンネル4のAD変換結果??��?��? value1 に格納する�???��?��value1はA2のセンサ値を示す�??
 8000e5a:	482c      	ldr	r0, [pc, #176]	; (8000f0c <main+0x300>)
 8000e5c:	f001 fd8e 	bl	800297c <HAL_ADC_GetValue>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	80fb      	strh	r3, [r7, #6]
			break;
 8000e66:	e00d      	b.n	8000e84 <main+0x278>

			case 6:
				// チャンネル6
				HAL_ADC_Start(&hadc1);  // AD変換を開始す??��?��?
 8000e68:	4828      	ldr	r0, [pc, #160]	; (8000f0c <main+0x300>)
 8000e6a:	f001 fbcd 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 10); // チャンネル4のAD変換終�?まで??��?��?機す??��?��?
 8000e6e:	210a      	movs	r1, #10
 8000e70:	4826      	ldr	r0, [pc, #152]	; (8000f0c <main+0x300>)
 8000e72:	f001 fcb5 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[0] = HAL_ADC_GetValue(&hadc1);  // チャンネル4のAD変換結果??��?��? value0 に格納する�???��?��value0はA1のセンサ値を示す�??
 8000e76:	4825      	ldr	r0, [pc, #148]	; (8000f0c <main+0x300>)
 8000e78:	f001 fd80 	bl	800297c <HAL_ADC_GetValue>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	80bb      	strh	r3, [r7, #4]
			break;
 8000e82:	bf00      	nop
		 }

		 //ADC2
		 switch(tp2){
 8000e84:	8bbb      	ldrh	r3, [r7, #28]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d852      	bhi.n	8000f30 <main+0x324>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <main+0x284>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea5 	.word	0x08000ea5
 8000e94:	08000ead 	.word	0x08000ead
 8000e98:	08000ec9 	.word	0x08000ec9
 8000e9c:	08000ee5 	.word	0x08000ee5
 8000ea0:	08000f15 	.word	0x08000f15
			case 0:
				HAL_ADC_Stop(&hadc2); // 全てのチャンネルのAD変換が終�?した
 8000ea4:	481a      	ldr	r0, [pc, #104]	; (8000f10 <main+0x304>)
 8000ea6:	f001 fc65 	bl	8002774 <HAL_ADC_Stop>
			break;
 8000eaa:	e041      	b.n	8000f30 <main+0x324>
			case 1:
				// チャンネル1
				HAL_ADC_Start(&hadc2);  // AD変換を開始す??��?��?
 8000eac:	4818      	ldr	r0, [pc, #96]	; (8000f10 <main+0x304>)
 8000eae:	f001 fbab 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 10); // チャンネル1のAD変換終�?まで??��?��?機す??��?��?
 8000eb2:	210a      	movs	r1, #10
 8000eb4:	4816      	ldr	r0, [pc, #88]	; (8000f10 <main+0x304>)
 8000eb6:	f001 fc93 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[7] = HAL_ADC_GetValue(&hadc2);  // チャンネル1のAD変換結果??��?��? value7 に格納する�???��?��value7はA8のセンサ値を示す�??
 8000eba:	4815      	ldr	r0, [pc, #84]	; (8000f10 <main+0x304>)
 8000ebc:	f001 fd5e 	bl	800297c <HAL_ADC_GetValue>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	827b      	strh	r3, [r7, #18]
			break;
 8000ec6:	e033      	b.n	8000f30 <main+0x324>

			case 2:
				// チャンネル2
				HAL_ADC_Start(&hadc2);  // AD変換を開始す??��?��?
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <main+0x304>)
 8000eca:	f001 fb9d 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 10); // チャンネル2のAD変換終�?まで??��?��?機す??��?��?
 8000ece:	210a      	movs	r1, #10
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <main+0x304>)
 8000ed2:	f001 fc85 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[4] = HAL_ADC_GetValue(&hadc2);  // チャンネル2のAD変換結果??��?��? value4 に格納する�???��?��value4はA5のセンサ値を示す�??
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <main+0x304>)
 8000ed8:	f001 fd50 	bl	800297c <HAL_ADC_GetValue>
 8000edc:	4603      	mov	r3, r0
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	81bb      	strh	r3, [r7, #12]
			break;
 8000ee2:	e025      	b.n	8000f30 <main+0x324>

			case 3:
				// チャンネル3
				HAL_ADC_Start(&hadc2);  // AD変換を開始す??��?��?
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <main+0x304>)
 8000ee6:	f001 fb8f 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 10); // チャンネル3のAD変換終�?まで??��?��?機す??��?��?
 8000eea:	210a      	movs	r1, #10
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <main+0x304>)
 8000eee:	f001 fc77 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[3] = HAL_ADC_GetValue(&hadc2);  // チャンネル3のAD変換結果??��?��? value3 に格納する�???��?��value3はA4のセンサ値を示す�??
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <main+0x304>)
 8000ef4:	f001 fd42 	bl	800297c <HAL_ADC_GetValue>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	817b      	strh	r3, [r7, #10]
			break;
 8000efe:	e017      	b.n	8000f30 <main+0x324>
 8000f00:	20000064 	.word	0x20000064
 8000f04:	48000400 	.word	0x48000400
 8000f08:	080098e8 	.word	0x080098e8
 8000f0c:	200001f0 	.word	0x200001f0
 8000f10:	20000240 	.word	0x20000240

			case 4:
				// チャンネル4
				HAL_ADC_Start(&hadc2);  // AD変換を開始
 8000f14:	4834      	ldr	r0, [pc, #208]	; (8000fe8 <main+0x3dc>)
 8000f16:	f001 fb77 	bl	8002608 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 10); // チャンネル4のAD変換終�?まで??��?��?機す??��?��?
 8000f1a:	210a      	movs	r1, #10
 8000f1c:	4832      	ldr	r0, [pc, #200]	; (8000fe8 <main+0x3dc>)
 8000f1e:	f001 fc5f 	bl	80027e0 <HAL_ADC_PollForConversion>
				value[2] = HAL_ADC_GetValue(&hadc2);  // チャンネル4のAD変換結果??��?��? value2 に格納する�???��?��value2はA3のセンサ値を示す�??
 8000f22:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <main+0x3dc>)
 8000f24:	f001 fd2a 	bl	800297c <HAL_ADC_GetValue>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	813b      	strh	r3, [r7, #8]
			break;
 8000f2e:	bf00      	nop
		 }
		 tp1 = (tp1+1)%7;	//tp1を7で割った余りを出力tp1=0~6
 8000f30:	8bfb      	ldrh	r3, [r7, #30]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <main+0x3e0>)
 8000f36:	fb83 1302 	smull	r1, r3, r3, r2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	1099      	asrs	r1, r3, #2
 8000f3e:	17d3      	asrs	r3, r2, #31
 8000f40:	1ac9      	subs	r1, r1, r3
 8000f42:	460b      	mov	r3, r1
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	1ad1      	subs	r1, r2, r3
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	83fb      	strh	r3, [r7, #30]
		 tp2 = (tp2+1)%5;	//tp2を5で割った余りを出力tp1=0~4
 8000f4e:	8bbb      	ldrh	r3, [r7, #28]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <main+0x3e4>)
 8000f54:	fb83 1302 	smull	r1, r3, r3, r2
 8000f58:	1059      	asrs	r1, r3, #1
 8000f5a:	17d3      	asrs	r3, r2, #31
 8000f5c:	1ac9      	subs	r1, r1, r3
 8000f5e:	460b      	mov	r3, r1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	1ad1      	subs	r1, r2, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	83bb      	strh	r3, [r7, #28]

		 if(value[1] < 1000){  // 閾値は自分で調整
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f70:	d204      	bcs.n	8000f7c <main+0x370>
		   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // 左（右）モーターの回転を止める
 8000f72:	2104      	movs	r1, #4
 8000f74:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <main+0x3e8>)
 8000f76:	f004 fa05 	bl	8005384 <HAL_TIM_PWM_Stop>
 8000f7a:	e002      	b.n	8000f82 <main+0x376>
		 }else{
		   // 右（左）モーターを回転
			 MotorForward_R(100);
 8000f7c:	2064      	movs	r0, #100	; 0x64
 8000f7e:	f000 fd81 	bl	8001a84 <MotorForward_R>
		 }

		 if(value[8] < 1000){  // 閾値は自分で調整
 8000f82:	8abb      	ldrh	r3, [r7, #20]
 8000f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f88:	d204      	bcs.n	8000f94 <main+0x388>
		   HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); // 右（左）モーターの回転を止める
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	481a      	ldr	r0, [pc, #104]	; (8000ff8 <main+0x3ec>)
 8000f8e:	f004 f9f9 	bl	8005384 <HAL_TIM_PWM_Stop>
 8000f92:	e66c      	b.n	8000c6e <main+0x62>
		 }else{
		   // 左（右）モーターを回転
			 MotorForward_L(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f000 fd8f 	bl	8001ab8 <MotorForward_L>
 8000f9a:	e668      	b.n	8000c6e <main+0x62>
		 }
	  }
	  else if(mode==1){
 8000f9c:	7efb      	ldrb	r3, [r7, #27]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <main+0x39c>
		  waseda();
 8000fa2:	f000 fcdf 	bl	8001964 <waseda>
 8000fa6:	e662      	b.n	8000c6e <main+0x62>
	  }
	  else if(mode==2){
 8000fa8:	7efb      	ldrb	r3, [r7, #27]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	f43f ae5f 	beq.w	8000c6e <main+0x62>

	  }
	  else if(mode==3){
 8000fb0:	7efb      	ldrb	r3, [r7, #27]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	f47f ae5b 	bne.w	8000c6e <main+0x62>
		  // 結果をUARTシリアル通信で送信
		  printf("%4d  %4d  %4d  %4d  %4d  %4d  %4d  %4d\n",value[1],value[2],value[3],value[4],value[5],value[6],value[7],value[8]);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	461d      	mov	r5, r3
 8000fbc:	893b      	ldrh	r3, [r7, #8]
 8000fbe:	461e      	mov	r6, r3
 8000fc0:	897b      	ldrh	r3, [r7, #10]
 8000fc2:	469c      	mov	ip, r3
 8000fc4:	89bb      	ldrh	r3, [r7, #12]
 8000fc6:	89fa      	ldrh	r2, [r7, #14]
 8000fc8:	8a39      	ldrh	r1, [r7, #16]
 8000fca:	8a78      	ldrh	r0, [r7, #18]
 8000fcc:	8abc      	ldrh	r4, [r7, #20]
 8000fce:	9404      	str	r4, [sp, #16]
 8000fd0:	9003      	str	r0, [sp, #12]
 8000fd2:	9102      	str	r1, [sp, #8]
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4663      	mov	r3, ip
 8000fda:	4632      	mov	r2, r6
 8000fdc:	4629      	mov	r1, r5
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <main+0x3f0>)
 8000fe0:	f006 fbbc 	bl	800775c <iprintf>
  while (1)
 8000fe4:	e643      	b.n	8000c6e <main+0x62>
 8000fe6:	bf00      	nop
 8000fe8:	20000240 	.word	0x20000240
 8000fec:	92492493 	.word	0x92492493
 8000ff0:	66666667 	.word	0x66666667
 8000ff4:	200002dc 	.word	0x200002dc
 8000ff8:	20000328 	.word	0x20000328
 8000ffc:	080098f0 	.word	0x080098f0

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b096      	sub	sp, #88	; 0x58
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100a:	2228      	movs	r2, #40	; 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f006 fda0 	bl	8007b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001044:	2300      	movs	r3, #0
 8001046:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001048:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800104c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fc58 	bl	8003908 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800105e:	f000 fd45 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fc80 	bl	8004984 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800108a:	f000 fd2f 	bl	8001aec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800108e:	f241 0381 	movw	r3, #4225	; 0x1081
 8001092:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 fea3 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010b0:	f000 fd1c 	bl	8001aec <Error_Handler>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3758      	adds	r7, #88	; 0x58
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010de:	4b52      	ldr	r3, [pc, #328]	; (8001228 <MX_ADC1_Init+0x16c>)
 80010e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010e6:	4b50      	ldr	r3, [pc, #320]	; (8001228 <MX_ADC1_Init+0x16c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <MX_ADC1_Init+0x16c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010f2:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <MX_ADC1_Init+0x16c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <MX_ADC1_Init+0x16c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001108:	2201      	movs	r2, #1
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110c:	4b46      	ldr	r3, [pc, #280]	; (8001228 <MX_ADC1_Init+0x16c>)
 800110e:	2200      	movs	r2, #0
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b45      	ldr	r3, [pc, #276]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001114:	2201      	movs	r2, #1
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b43      	ldr	r3, [pc, #268]	; (8001228 <MX_ADC1_Init+0x16c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001120:	2206      	movs	r2, #6
 8001122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001124:	4b40      	ldr	r3, [pc, #256]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <MX_ADC1_Init+0x16c>)
 800112e:	2204      	movs	r2, #4
 8001130:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001134:	2200      	movs	r2, #0
 8001136:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <MX_ADC1_Init+0x16c>)
 800113a:	2200      	movs	r2, #0
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800113e:	483a      	ldr	r0, [pc, #232]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001140:	f001 f8d0 	bl	80022e4 <HAL_ADC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800114a:	f000 fccf 	bl	8001aec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4833      	ldr	r0, [pc, #204]	; (8001228 <MX_ADC1_Init+0x16c>)
 800115a:	f001 fedb 	bl	8002f14 <HAL_ADCEx_MultiModeConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001164:	f000 fcc2 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4828      	ldr	r0, [pc, #160]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001186:	f001 fc07 	bl	8002998 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001190:	f000 fcac 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001194:	2302      	movs	r3, #2
 8001196:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001198:	2302      	movs	r3, #2
 800119a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4821      	ldr	r0, [pc, #132]	; (8001228 <MX_ADC1_Init+0x16c>)
 80011a2:	f001 fbf9 	bl	8002998 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80011ac:	f000 fc9e 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011b0:	2303      	movs	r3, #3
 80011b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	481a      	ldr	r0, [pc, #104]	; (8001228 <MX_ADC1_Init+0x16c>)
 80011be:	f001 fbeb 	bl	8002998 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80011c8:	f000 fc90 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <MX_ADC1_Init+0x16c>)
 80011da:	f001 fbdd 	bl	8002998 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80011e4:	f000 fc82 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011e8:	230b      	movs	r3, #11
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011ec:	2305      	movs	r3, #5
 80011ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_ADC1_Init+0x16c>)
 80011f6:	f001 fbcf 	bl	8002998 <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8001200:	f000 fc74 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001204:	230c      	movs	r3, #12
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001208:	2306      	movs	r3, #6
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_ADC1_Init+0x16c>)
 8001212:	f001 fbc1 	bl	8002998 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x164>
  {
    Error_Handler();
 800121c:	f000 fc66 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001f0 	.word	0x200001f0

0800122c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001244:	4a3d      	ldr	r2, [pc, #244]	; (800133c <MX_ADC2_Init+0x110>)
 8001246:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_ADC2_Init+0x10c>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800124e:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001256:	2201      	movs	r2, #1
 8001258:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <MX_ADC2_Init+0x10c>)
 800125c:	2200      	movs	r2, #0
 800125e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001268:	4b33      	ldr	r3, [pc, #204]	; (8001338 <MX_ADC2_Init+0x10c>)
 800126a:	2201      	movs	r2, #1
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001270:	2200      	movs	r2, #0
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001276:	2201      	movs	r2, #1
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <MX_ADC2_Init+0x10c>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001282:	2204      	movs	r2, #4
 8001284:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001290:	2204      	movs	r2, #4
 8001292:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001296:	2200      	movs	r2, #0
 8001298:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <MX_ADC2_Init+0x10c>)
 800129c:	2200      	movs	r2, #0
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012a0:	4825      	ldr	r0, [pc, #148]	; (8001338 <MX_ADC2_Init+0x10c>)
 80012a2:	f001 f81f 	bl	80022e4 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80012ac:	f000 fc1e 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	481a      	ldr	r0, [pc, #104]	; (8001338 <MX_ADC2_Init+0x10c>)
 80012ce:	f001 fb63 	bl	8002998 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80012d8:	f000 fc08 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012dc:	2302      	movs	r3, #2
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4813      	ldr	r0, [pc, #76]	; (8001338 <MX_ADC2_Init+0x10c>)
 80012ea:	f001 fb55 	bl	8002998 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80012f4:	f000 fbfa 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012fc:	2303      	movs	r3, #3
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001306:	f001 fb47 	bl	8002998 <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8001310:	f000 fbec 	bl	8001aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001314:	2304      	movs	r3, #4
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001318:	2304      	movs	r3, #4
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_ADC2_Init+0x10c>)
 8001322:	f001 fb39 	bl	8002998 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 800132c:	f000 fbde 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000240 	.word	0x20000240
 800133c:	50000100 	.word	0x50000100

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001360:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <MX_TIM1_Init+0xa0>)
 8001362:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001366:	223f      	movs	r2, #63	; 0x3f
 8001368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_TIM1_Init+0x9c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_TIM1_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_TIM1_Init+0x9c>)
 800138a:	f003 fe57 	bl	800503c <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fbaa 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_TIM1_Init+0x9c>)
 80013a6:	f004 faaf 	bl	8005908 <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b0:	f000 fb9c 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_TIM1_Init+0x9c>)
 80013c6:	f004 ff79 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013d0:	f000 fb8c 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000290 	.word	0x20000290
 80013e0:	40012c00 	.word	0x40012c00

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800141c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256-1;
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_TIM2_Init+0xe8>)
 800142c:	22ff      	movs	r2, #255	; 0xff
 800142e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143c:	4823      	ldr	r0, [pc, #140]	; (80014cc <MX_TIM2_Init+0xe8>)
 800143e:	f003 fdfd 	bl	800503c <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001448:	f000 fb50 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	4619      	mov	r1, r3
 8001458:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_TIM2_Init+0xe8>)
 800145a:	f004 fa55 	bl	8005908 <HAL_TIM_ConfigClockSource>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001464:	f000 fb42 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <MX_TIM2_Init+0xe8>)
 800146a:	f003 fe3e 	bl	80050ea <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001474:	f000 fb3a 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4811      	ldr	r0, [pc, #68]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001488:	f004 ff18 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001492:	f000 fb2b 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	; 0x60
 8001498:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2204      	movs	r2, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM2_Init+0xe8>)
 80014ae:	f004 f917 	bl	80056e0 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014b8:	f000 fb18 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM2_Init+0xe8>)
 80014be:	f000 fc6b 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3738      	adds	r7, #56	; 0x38
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200002dc 	.word	0x200002dc

080014d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001504:	4a2c      	ldr	r2, [pc, #176]	; (80015b8 <MX_TIM3_Init+0xe8>)
 8001506:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_TIM3_Init+0xe4>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001516:	22ff      	movs	r2, #255	; 0xff
 8001518:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_TIM3_Init+0xe4>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001526:	4823      	ldr	r0, [pc, #140]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001528:	f003 fd88 	bl	800503c <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001532:	f000 fadb 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001540:	4619      	mov	r1, r3
 8001542:	481c      	ldr	r0, [pc, #112]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001544:	f004 f9e0 	bl	8005908 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800154e:	f000 facd 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001554:	f003 fdc9 	bl	80050ea <HAL_TIM_PWM_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800155e:	f000 fac5 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001572:	f004 fea3 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800157c:	f000 fab6 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001580:	2360      	movs	r3, #96	; 0x60
 8001582:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	2204      	movs	r2, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM3_Init+0xe4>)
 8001598:	f004 f8a2 	bl	80056e0 <HAL_TIM_PWM_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015a2:	f000 faa3 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM3_Init+0xe4>)
 80015a8:	f000 fbf6 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 80015ac:	bf00      	nop
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000328 	.word	0x20000328
 80015b8:	40000400 	.word	0x40000400

080015bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_TIM6_Init+0x64>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <MX_TIM6_Init+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_TIM6_Init+0x64>)
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_TIM6_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_TIM6_Init+0x64>)
 80015e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_TIM6_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <MX_TIM6_Init+0x64>)
 80015ee:	f003 fd25 	bl	800503c <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015f8:	f000 fa78 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM6_Init+0x64>)
 800160a:	f004 fe57 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001614:	f000 fa6a 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000374 	.word	0x20000374
 8001624:	40001000 	.word	0x40001000

08001628 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b092      	sub	sp, #72	; 0x48
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001642:	463b      	mov	r3, r7
 8001644:	222c      	movs	r2, #44	; 0x2c
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f006 fa83 	bl	8007b54 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <MX_TIM16_Init+0xe8>)
 8001650:	4a30      	ldr	r2, [pc, #192]	; (8001714 <MX_TIM16_Init+0xec>)
 8001652:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64-1;
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <MX_TIM16_Init+0xe8>)
 8001656:	223f      	movs	r2, #63	; 0x3f
 8001658:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <MX_TIM16_Init+0xe8>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <MX_TIM16_Init+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <MX_TIM16_Init+0xe8>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <MX_TIM16_Init+0xe8>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <MX_TIM16_Init+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001678:	4825      	ldr	r0, [pc, #148]	; (8001710 <MX_TIM16_Init+0xe8>)
 800167a:	f003 fcdf 	bl	800503c <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001684:	f000 fa32 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001688:	4821      	ldr	r0, [pc, #132]	; (8001710 <MX_TIM16_Init+0xe8>)
 800168a:	f003 fd2e 	bl	80050ea <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001694:	f000 fa2a 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4814      	ldr	r0, [pc, #80]	; (8001710 <MX_TIM16_Init+0xe8>)
 80016be:	f004 f80f 	bl	80056e0 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80016c8:	f000 fa10 	bl	8001aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	4807      	ldr	r0, [pc, #28]	; (8001710 <MX_TIM16_Init+0xe8>)
 80016f4:	f004 fe50 	bl	8006398 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80016fe:	f000 f9f5 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <MX_TIM16_Init+0xe8>)
 8001704:	f000 fb48 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001708:	bf00      	nop
 800170a:	3748      	adds	r7, #72	; 0x48
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200003c0 	.word	0x200003c0
 8001714:	40014400 	.word	0x40014400

08001718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_USART1_UART_Init+0x58>)
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_USART1_UART_Init+0x58>)
 8001724:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART1_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_USART1_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART1_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART1_UART_Init+0x58>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART1_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART1_UART_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART1_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART1_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART1_UART_Init+0x58>)
 800175c:	f004 feb2 	bl	80064c4 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001766:	f000 f9c1 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000040c 	.word	0x2000040c
 8001774:	40013800 	.word	0x40013800

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800178e:	4b48      	ldr	r3, [pc, #288]	; (80018b0 <MX_GPIO_Init+0x138>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a47      	ldr	r2, [pc, #284]	; (80018b0 <MX_GPIO_Init+0x138>)
 8001794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <MX_GPIO_Init+0x138>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <MX_GPIO_Init+0x138>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a41      	ldr	r2, [pc, #260]	; (80018b0 <MX_GPIO_Init+0x138>)
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <MX_GPIO_Init+0x138>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <MX_GPIO_Init+0x138>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <MX_GPIO_Init+0x138>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <MX_GPIO_Init+0x138>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2103      	movs	r1, #3
 80017da:	4836      	ldr	r0, [pc, #216]	; (80018b4 <MX_GPIO_Init+0x13c>)
 80017dc:	f002 f87c 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f002 f875 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	21d0      	movs	r1, #208	; 0xd0
 80017f2:	4831      	ldr	r0, [pc, #196]	; (80018b8 <MX_GPIO_Init+0x140>)
 80017f4:	f002 f870 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017f8:	2303      	movs	r3, #3
 80017fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4829      	ldr	r0, [pc, #164]	; (80018b4 <MX_GPIO_Init+0x13c>)
 8001810:	f001 fed8 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f001 feca 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8001830:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f001 febc 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800184c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f001 feac 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800186c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f001 fe9c 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800188c:	23d0      	movs	r3, #208	; 0xd0
 800188e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_GPIO_Init+0x140>)
 80018a4:	f001 fe8e 	bl	80035c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48001400 	.word	0x48001400
 80018b8:	48000400 	.word	0x48000400
 80018bc:	00000000 	.word	0x00000000

080018c0 <tone>:

/* USER CODE BEGIN 4 */
void tone(uint16_t Hz, uint16_t wait, uint16_t postwait){
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	460b      	mov	r3, r1
 80018cc:	80bb      	strh	r3, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	807b      	strh	r3, [r7, #2]
	uint32_t count;
	count = (uint32_t)(1000000.0/Hz)-1;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe25 	bl	8000524 <__aeabi_i2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	a11f      	add	r1, pc, #124	; (adr r1, 800195c <tone+0x9c>)
 80018e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018e4:	f7fe ffb2 	bl	800084c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f95a 	bl	8000ba8 <__aeabi_d2uiz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3b01      	subs	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
	htim16.Instance->ARR=count - 1;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <tone+0x98>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	3a01      	subs	r2, #1
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
	htim16.Instance->CCR1=count*0.2;
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7fe fdfd 	bl	8000504 <__aeabi_ui2d>
 800190a:	a311      	add	r3, pc, #68	; (adr r3, 8001950 <tone+0x90>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe72 	bl	80005f8 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	490f      	ldr	r1, [pc, #60]	; (8001958 <tone+0x98>)
 800191a:	680c      	ldr	r4, [r1, #0]
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f942 	bl	8000ba8 <__aeabi_d2uiz>
 8001924:	4603      	mov	r3, r0
 8001926:	6363      	str	r3, [r4, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001928:	2100      	movs	r1, #0
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <tone+0x98>)
 800192c:	f003 fc3e 	bl	80051ac <HAL_TIM_PWM_Start>
	HAL_Delay(wait);
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fcb2 	bl	800229c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001938:	2100      	movs	r1, #0
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <tone+0x98>)
 800193c:	f003 fd22 	bl	8005384 <HAL_TIM_PWM_Stop>
	HAL_Delay(postwait);
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fcaa 	bl	800229c <HAL_Delay>
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	9999999a 	.word	0x9999999a
 8001954:	3fc99999 	.word	0x3fc99999
 8001958:	200003c0 	.word	0x200003c0
 800195c:	00000000 	.word	0x00000000
 8001960:	412e8480 	.word	0x412e8480

08001964 <waseda>:

void waseda(void){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	tone(FA_sharp,375,0);
 8001968:	2200      	movs	r2, #0
 800196a:	f240 1177 	movw	r1, #375	; 0x177
 800196e:	f44f 6039 	mov.w	r0, #2960	; 0xb90
 8001972:	f7ff ffa5 	bl	80018c0 <tone>
	tone(SO,125,0);
 8001976:	2200      	movs	r2, #0
 8001978:	217d      	movs	r1, #125	; 0x7d
 800197a:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 800197e:	f7ff ff9f 	bl	80018c0 <tone>
	tone(LA,500,0);
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001988:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
 800198c:	f7ff ff98 	bl	80018c0 <tone>
	tone(SI,375,0);
 8001990:	2200      	movs	r2, #0
 8001992:	f240 1177 	movw	r1, #375	; 0x177
 8001996:	f640 706f 	movw	r0, #3951	; 0xf6f
 800199a:	f7ff ff91 	bl	80018c0 <tone>
	tone(DO_sharp_2,125,0);
 800199e:	2200      	movs	r2, #0
 80019a0:	217d      	movs	r1, #125	; 0x7d
 80019a2:	f241 1053 	movw	r0, #4435	; 0x1153
 80019a6:	f7ff ff8b 	bl	80018c0 <tone>
	tone(RE_2,500,0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019b0:	f241 205b 	movw	r0, #4699	; 0x125b
 80019b4:	f7ff ff84 	bl	80018c0 <tone>
	tone(FA_sharp,375,0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f240 1177 	movw	r1, #375	; 0x177
 80019be:	f44f 6039 	mov.w	r0, #2960	; 0xb90
 80019c2:	f7ff ff7d 	bl	80018c0 <tone>
	tone(SO,125,0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	217d      	movs	r1, #125	; 0x7d
 80019ca:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 80019ce:	f7ff ff77 	bl	80018c0 <tone>
	tone(LA,500,0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019d8:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
 80019dc:	f7ff ff70 	bl	80018c0 <tone>
	tone(SI,375,0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f240 1177 	movw	r1, #375	; 0x177
 80019e6:	f640 706f 	movw	r0, #3951	; 0xf6f
 80019ea:	f7ff ff69 	bl	80018c0 <tone>
	tone(DO_sharp*2,125,0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	217d      	movs	r1, #125	; 0x7d
 80019f2:	f241 1052 	movw	r0, #4434	; 0x1152
 80019f6:	f7ff ff63 	bl	80018c0 <tone>
	tone(RE_2,500,0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a00:	f241 205b 	movw	r0, #4699	; 0x125b
 8001a04:	f7ff ff5c 	bl	80018c0 <tone>
	tone(DO_sharp_2,375,0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f240 1177 	movw	r1, #375	; 0x177
 8001a0e:	f241 1053 	movw	r0, #4435	; 0x1153
 8001a12:	f7ff ff55 	bl	80018c0 <tone>
	tone(SI,125,0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	217d      	movs	r1, #125	; 0x7d
 8001a1a:	f640 706f 	movw	r0, #3951	; 0xf6f
 8001a1e:	f7ff ff4f 	bl	80018c0 <tone>
	tone(LA_2,500,0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a28:	f44f 50dc 	mov.w	r0, #7040	; 0x1b80
 8001a2c:	f7ff ff48 	bl	80018c0 <tone>
	tone(FA_sharp,375,0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	f240 1177 	movw	r1, #375	; 0x177
 8001a36:	f44f 6039 	mov.w	r0, #2960	; 0xb90
 8001a3a:	f7ff ff41 	bl	80018c0 <tone>
	tone(SO,125,0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	217d      	movs	r1, #125	; 0x7d
 8001a42:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8001a46:	f7ff ff3b 	bl	80018c0 <tone>
	tone(LA,500,0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a50:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
 8001a54:	f7ff ff34 	bl	80018c0 <tone>
	tone(FA_sharp,375,0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f240 1177 	movw	r1, #375	; 0x177
 8001a5e:	f44f 6039 	mov.w	r0, #2960	; 0xb90
 8001a62:	f7ff ff2d 	bl	80018c0 <tone>
	tone(MI,125,0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	217d      	movs	r1, #125	; 0x7d
 8001a6a:	f640 204d 	movw	r0, #2637	; 0xa4d
 8001a6e:	f7ff ff27 	bl	80018c0 <tone>
	tone(RE,1000,0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a78:	f640 102d 	movw	r0, #2349	; 0x92d
 8001a7c:	f7ff ff20 	bl	80018c0 <tone>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <MotorForward_R>:

void MotorForward_R(uint8_t duty){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);//AIN1 1
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2140      	movs	r1, #64	; 0x40
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <MotorForward_R+0x2c>)
 8001a94:	f001 ff20 	bl	80038d8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty);
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MotorForward_R+0x30>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	79fa      	ldrb	r2, [r7, #7]
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MotorForward_R+0x30>)
 8001aa4:	f003 fb82 	bl	80051ac <HAL_TIM_PWM_Start>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	20000328 	.word	0x20000328

08001ab8 <MotorForward_L>:

void MotorForward_L(uint8_t duty){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);//BIN1 1
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MotorForward_L+0x2c>)
 8001ac8:	f001 ff06 	bl	80038d8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MotorForward_L+0x30>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	79fa      	ldrb	r2, [r7, #7]
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MotorForward_L+0x30>)
 8001ad8:	f003 fb68 	bl	80051ac <HAL_TIM_PWM_Start>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	48001400 	.word	0x48001400
 8001ae8:	200002dc 	.word	0x200002dc

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <Error_Handler+0x8>
	...

08001af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_MspInit+0x44>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_MspInit+0x44>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_MspInit+0x44>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_MspInit+0x44>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_MspInit+0x44>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_MspInit+0x44>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b60:	d146      	bne.n	8001bf0 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_ADC_MspInit+0x120>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a3d      	ldr	r2, [pc, #244]	; (8001c60 <HAL_ADC_MspInit+0x120>)
 8001b6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b6c:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <HAL_ADC_MspInit+0x120>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10b      	bne.n	8001b8c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6153      	str	r3, [r2, #20]
 8001b80:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b96:	6153      	str	r3, [r2, #20]
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bae:	6153      	str	r3, [r2, #20]
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f001 fcf7 	bl	80035c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	481f      	ldr	r0, [pc, #124]	; (8001c68 <HAL_ADC_MspInit+0x128>)
 8001bea:	f001 fceb 	bl	80035c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001bee:	e032      	b.n	8001c56 <HAL_ADC_MspInit+0x116>
  else if(hadc->Instance==ADC2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_ADC_MspInit+0x12c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12d      	bne.n	8001c56 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_ADC_MspInit+0x120>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_ADC_MspInit+0x120>)
 8001c02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_ADC_MspInit+0x120>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10b      	bne.n	8001c24 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6153      	str	r3, [r2, #20]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2e:	6153      	str	r3, [r2, #20]
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_ADC_MspInit+0x124>)
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c3c:	23f0      	movs	r3, #240	; 0xf0
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c40:	2303      	movs	r3, #3
 8001c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f001 fcb7 	bl	80035c4 <HAL_GPIO_Init>
}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	; 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000494 	.word	0x20000494
 8001c64:	40021000 	.word	0x40021000
 8001c68:	48000400 	.word	0x48000400
 8001c6c:	50000100 	.word	0x50000100

08001c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a41      	ldr	r2, [pc, #260]	; (8001d84 <HAL_TIM_Base_MspInit+0x114>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d114      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a40      	ldr	r2, [pc, #256]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001c88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2019      	movs	r0, #25
 8001ca0:	f001 fc59 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ca4:	2019      	movs	r0, #25
 8001ca6:	f001 fc72 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001caa:	e066      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb4:	d114      	bne.n	8001ce0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	201c      	movs	r0, #28
 8001cd4:	f001 fc3f 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cd8:	201c      	movs	r0, #28
 8001cda:	f001 fc58 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8001cde:	e04c      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_TIM_Base_MspInit+0x11c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d114      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	61d3      	str	r3, [r2, #28]
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	201d      	movs	r0, #29
 8001d08:	f001 fc25 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d0c:	201d      	movs	r0, #29
 8001d0e:	f001 fc3e 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8001d12:	e032      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_TIM_Base_MspInit+0x120>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d114      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2036      	movs	r0, #54	; 0x36
 8001d3c:	f001 fc0b 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001d40:	2036      	movs	r0, #54	; 0x36
 8001d42:	f001 fc24 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8001d46:	e018      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM16)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_TIM_Base_MspInit+0x124>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d113      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	6193      	str	r3, [r2, #24]
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_TIM_Base_MspInit+0x118>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2019      	movs	r0, #25
 8001d70:	f001 fbf1 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d74:	2019      	movs	r0, #25
 8001d76:	f001 fc0a 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40001000 	.word	0x40001000
 8001d94:	40014400 	.word	0x40014400

08001d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db8:	d11c      	bne.n	8001df4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de2:	2301      	movs	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4827      	ldr	r0, [pc, #156]	; (8001e8c <HAL_TIM_MspPostInit+0xf4>)
 8001dee:	f001 fbe9 	bl	80035c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001df2:	e044      	b.n	8001e7e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_TIM_MspPostInit+0xf8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11c      	bne.n	8001e38 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e08:	6153      	str	r3, [r2, #20]
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e16:	2320      	movs	r3, #32
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e26:	2302      	movs	r3, #2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4816      	ldr	r0, [pc, #88]	; (8001e8c <HAL_TIM_MspPostInit+0xf4>)
 8001e32:	f001 fbc7 	bl	80035c4 <HAL_GPIO_Init>
}
 8001e36:	e022      	b.n	8001e7e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM16)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_TIM_MspPostInit+0xfc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11d      	bne.n	8001e7e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	6153      	str	r3, [r2, #20]
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_TIM_MspPostInit+0xf0>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f001 fba3 	bl	80035c4 <HAL_GPIO_Init>
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40014400 	.word	0x40014400

08001e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d129      	bne.n	8001f0e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_UART_MspInit+0x84>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_UART_MspInit+0x84>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_UART_MspInit+0x84>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_UART_MspInit+0x84>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_UART_MspInit+0x84>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	6153      	str	r3, [r2, #20]
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_UART_MspInit+0x84>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001eea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001efc:	2307      	movs	r3, #7
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0a:	f001 fb5b 	bl	80035c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40021000 	.word	0x40021000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 f976 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001f7a:	f003 fa91 	bl	80054a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001f80:	f003 fa8e 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000290 	.word	0x20000290
 8001f8c:	200003c0 	.word	0x200003c0

08001f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM2_IRQHandler+0x10>)
 8001f96:	f003 fa83 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200002dc 	.word	0x200002dc

08001fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM3_IRQHandler+0x10>)
 8001faa:	f003 fa79 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000328 	.word	0x20000328

08001fb8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIM6_DAC1_IRQHandler+0x10>)
 8001fbe:	f003 fa6f 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000374 	.word	0x20000374

08001fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_kill>:

int _kill(int pid, int sig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fe6:	f005 fe07 	bl	8007bf8 <__errno>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2216      	movs	r2, #22
 8001fee:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_exit>:

void _exit (int status)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffe7 	bl	8001fdc <_kill>
  while (1) {}    /* Make sure we hang here */
 800200e:	e7fe      	b.n	800200e <_exit+0x12>

08002010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
  }

  return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fdbf 	bl	8000be8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
  }
  return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
  return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f005 fd6c 	bl	8007bf8 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20003000 	.word	0x20003000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000498 	.word	0x20000498
 8002154:	200005f0 	.word	0x200005f0

08002158 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002180:	f7ff ffea 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	; (80021bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <LoopForever+0xe>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	; (80021c8 <LoopForever+0x16>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f005 fd2b 	bl	8007c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ae:	f7fe fd2d 	bl	8000c0c <main>

080021b2 <LoopForever>:

LoopForever:
    b LoopForever
 80021b2:	e7fe      	b.n	80021b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021c0:	08009ccc 	.word	0x08009ccc
  ldr r2, =_sbss
 80021c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021c8:	200005ec 	.word	0x200005ec

080021cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC1_2_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_Init+0x28>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_Init+0x28>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f001 f9ad 	bl	8003540 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f000 f808 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fc84 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f001 f9c5 	bl	80035aa <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f001 f98d 	bl	8003556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000000 	.word	0x20000000
 8002254:	20000008 	.word	0x20000008
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008
 8002280:	2000049c 	.word	0x2000049c

08002284 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;  
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	2000049c 	.word	0x2000049c

0800229c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008

080022e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b09a      	sub	sp, #104	; 0x68
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e172      	b.n	80025ea <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d176      	bne.n	8002404 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d152      	bne.n	80023c4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fc01 	bl	8001b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d13b      	bne.n	80023c4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 ff0b 	bl	8003168 <ADC_Disable>
 8002352:	4603      	mov	r3, r0
 8002354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d12f      	bne.n	80023c4 <HAL_ADC_Init+0xe0>
 8002364:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002368:	2b00      	cmp	r3, #0
 800236a:	d12b      	bne.n	80023c4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	f043 0202 	orr.w	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800238e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800239e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023a0:	4b94      	ldr	r3, [pc, #592]	; (80025f4 <HAL_ADC_Init+0x310>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a94      	ldr	r2, [pc, #592]	; (80025f8 <HAL_ADC_Init+0x314>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9a      	lsrs	r2, r3, #18
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023b6:	e002      	b.n	80023be <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e0:	d110      	bne.n	8002404 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f023 0312 	bic.w	r3, r3, #18
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 80df 	bne.w	80025d0 <HAL_ADC_Init+0x2ec>
 8002412:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 80da 	bne.w	80025d0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 80d2 	bne.w	80025d0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002434:	f043 0202 	orr.w	r2, r3, #2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800243c:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <HAL_ADC_Init+0x318>)
 800243e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002448:	d102      	bne.n	8002450 <HAL_ADC_Init+0x16c>
 800244a:	4b6d      	ldr	r3, [pc, #436]	; (8002600 <HAL_ADC_Init+0x31c>)
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e002      	b.n	8002456 <HAL_ADC_Init+0x172>
 8002450:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002454:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d108      	bne.n	8002476 <HAL_ADC_Init+0x192>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_ADC_Init+0x192>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_ADC_Init+0x194>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11c      	bne.n	80024b6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800247c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d010      	beq.n	80024a4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_ADC_Init+0x1ba>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADC_Init+0x1ba>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_ADC_Init+0x1bc>
 800249e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d108      	bne.n	80024b6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80024a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7e5b      	ldrb	r3, [r3, #25]
 80024ba:	035b      	lsls	r3, r3, #13
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c0:	2a01      	cmp	r2, #1
 80024c2:	d002      	beq.n	80024ca <HAL_ADC_Init+0x1e6>
 80024c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024c8:	e000      	b.n	80024cc <HAL_ADC_Init+0x1e8>
 80024ca:	2200      	movs	r2, #0
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4313      	orrs	r3, r2
 80024da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024dc:	4313      	orrs	r3, r2
 80024de:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d11b      	bne.n	8002522 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7e5b      	ldrb	r3, [r3, #25]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	3b01      	subs	r3, #1
 80024f8:	045a      	lsls	r2, r3, #17
 80024fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	663b      	str	r3, [r7, #96]	; 0x60
 8002504:	e00d      	b.n	8002522 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	2b01      	cmp	r3, #1
 8002528:	d007      	beq.n	800253a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	4313      	orrs	r3, r2
 8002534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002536:	4313      	orrs	r3, r2
 8002538:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	d114      	bne.n	8002572 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002556:	f023 0302 	bic.w	r3, r3, #2
 800255a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7e1b      	ldrb	r3, [r3, #24]
 8002560:	039a      	lsls	r2, r3, #14
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4313      	orrs	r3, r2
 800256c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800256e:	4313      	orrs	r3, r2
 8002570:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_ADC_Init+0x320>)
 800257a:	4013      	ands	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002582:	430b      	orrs	r3, r1
 8002584:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10c      	bne.n	80025a8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f023 010f 	bic.w	r1, r3, #15
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
 80025a6:	e007      	b.n	80025b8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 020f 	bic.w	r2, r2, #15
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
 80025ce:	e00a      	b.n	80025e6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f023 0312 	bic.w	r3, r3, #18
 80025d8:	f043 0210 	orr.w	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80025e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3768      	adds	r7, #104	; 0x68
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	50000300 	.word	0x50000300
 8002600:	50000100 	.word	0x50000100
 8002604:	fff0c007 	.word	0xfff0c007

08002608 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 809c 	bne.w	800275c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_ADC_Start+0x2a>
 800262e:	2302      	movs	r3, #2
 8002630:	e097      	b.n	8002762 <HAL_ADC_Start+0x15a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fd30 	bl	80030a0 <ADC_Enable>
 8002640:	4603      	mov	r3, r0
 8002642:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 8083 	bne.w	8002752 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002660:	4b42      	ldr	r3, [pc, #264]	; (800276c <HAL_ADC_Start+0x164>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_ADC_Start+0x6e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002674:	d115      	bne.n	80026a2 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d027      	beq.n	80026e0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002698:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026a0:	e01e      	b.n	80026e0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b6:	d004      	beq.n	80026c2 <HAL_ADC_Start+0xba>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2c      	ldr	r2, [pc, #176]	; (8002770 <HAL_ADC_Start+0x168>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10e      	bne.n	80026e0 <HAL_ADC_Start+0xd8>
 80026c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f023 0206 	bic.w	r2, r3, #6
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
 80026fa:	e002      	b.n	8002702 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	221c      	movs	r2, #28
 8002710:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_ADC_Start+0x164>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2b00      	cmp	r3, #0
 800271c:	d010      	beq.n	8002740 <HAL_ADC_Start+0x138>
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_ADC_Start+0x164>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2b05      	cmp	r3, #5
 8002728:	d00a      	beq.n	8002740 <HAL_ADC_Start+0x138>
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_ADC_Start+0x164>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2b09      	cmp	r3, #9
 8002734:	d004      	beq.n	8002740 <HAL_ADC_Start+0x138>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273e:	d10f      	bne.n	8002760 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0204 	orr.w	r2, r2, #4
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	e006      	b.n	8002760 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800275a:	e001      	b.n	8002760 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	50000300 	.word	0x50000300
 8002770:	50000100 	.word	0x50000100

08002774 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADC_Stop+0x1a>
 800278a:	2302      	movs	r3, #2
 800278c:	e023      	b.n	80027d6 <HAL_ADC_Stop+0x62>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002796:	216c      	movs	r1, #108	; 0x6c
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fd4b 	bl	8003234 <ADC_ConversionStop>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d111      	bne.n	80027cc <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fcdd 	bl	8003168 <ADC_Disable>
 80027ae:	4603      	mov	r3, r0
 80027b0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d102      	bne.n	80027fc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80027f6:	2308      	movs	r3, #8
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e02e      	b.n	800285a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fc:	4b5e      	ldr	r3, [pc, #376]	; (8002978 <HAL_ADC_PollForConversion+0x198>)
 80027fe:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2b00      	cmp	r3, #0
 800280a:	d112      	bne.n	8002832 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d11d      	bne.n	8002856 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0220 	orr.w	r2, r3, #32
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e09d      	b.n	800296e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e08b      	b.n	800296e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002856:	230c      	movs	r3, #12
 8002858:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_ADC_PollForConversion+0x198>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_ADC_PollForConversion+0x90>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800286e:	d104      	bne.n	800287a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e003      	b.n	8002882 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800287a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002882:	f7ff fcff 	bl	8002284 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002888:	e021      	b.n	80028ce <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d01d      	beq.n	80028ce <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_ADC_PollForConversion+0xc8>
 8002898:	f7ff fcf4 	bl	8002284 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d212      	bcs.n	80028ce <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e04f      	b.n	800296e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0d6      	beq.n	800288a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d131      	bne.n	800295a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d12c      	bne.n	800295a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d125      	bne.n	800295a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d112      	bne.n	8002942 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d112      	bne.n	800295a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
 8002940:	e00b      	b.n	800295a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	50000300 	.word	0x50000300

0800297c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002998:	b480      	push	{r7}
 800299a:	b09b      	sub	sp, #108	; 0x6c
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x22>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e2a1      	b.n	8002efe <HAL_ADC_ConfigChannel+0x566>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 8285 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d81c      	bhi.n	8002a14 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	461a      	mov	r2, r3
 80029ee:	231f      	movs	r3, #31
 80029f0:	4093      	lsls	r3, r2
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4019      	ands	r1, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
 8002a12:	e063      	b.n	8002adc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d81e      	bhi.n	8002a5a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	221f      	movs	r2, #31
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4019      	ands	r1, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	3b1e      	subs	r3, #30
 8002a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34
 8002a58:	e040      	b.n	8002adc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b0e      	cmp	r3, #14
 8002a60:	d81e      	bhi.n	8002aa0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	3b3c      	subs	r3, #60	; 0x3c
 8002a76:	221f      	movs	r2, #31
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4019      	ands	r1, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	3b3c      	subs	r3, #60	; 0x3c
 8002a92:	fa00 f203 	lsl.w	r2, r0, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a9e:	e01d      	b.n	8002adc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	3b5a      	subs	r3, #90	; 0x5a
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4019      	ands	r1, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	3b5a      	subs	r3, #90	; 0x5a
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80e5 	bne.w	8002cb6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	d91c      	bls.n	8002b2e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6999      	ldr	r1, [r3, #24]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	3b1e      	subs	r3, #30
 8002b06:	2207      	movs	r2, #7
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	4019      	ands	r1, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6898      	ldr	r0, [r3, #8]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b1e      	subs	r3, #30
 8002b20:	fa00 f203 	lsl.w	r2, r0, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	619a      	str	r2, [r3, #24]
 8002b2c:	e019      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6959      	ldr	r1, [r3, #20]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	2207      	movs	r2, #7
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	4019      	ands	r1, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6898      	ldr	r0, [r3, #8]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d84f      	bhi.n	8002c24 <HAL_ADC_ConfigChannel+0x28c>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <HAL_ADC_ConfigChannel+0x1f4>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002bbf 	.word	0x08002bbf
 8002b94:	08002be1 	.word	0x08002be1
 8002b98:	08002c03 	.word	0x08002c03
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <HAL_ADC_ConfigChannel+0x47c>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	0691      	lsls	r1, r2, #26
 8002bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bbc:	e07b      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bc4:	4b93      	ldr	r3, [pc, #588]	; (8002e14 <HAL_ADC_ConfigChannel+0x47c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	0691      	lsls	r1, r2, #26
 8002bce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bdc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bde:	e06a      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_ADC_ConfigChannel+0x47c>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	0691      	lsls	r1, r2, #26
 8002bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bfe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c00:	e059      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <HAL_ADC_ConfigChannel+0x47c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	0691      	lsls	r1, r2, #26
 8002c12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c14:	430a      	orrs	r2, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c20:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c22:	e048      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	069b      	lsls	r3, r3, #26
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c46:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	069b      	lsls	r3, r3, #26
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d107      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c6a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	069b      	lsls	r3, r3, #26
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d107      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c8e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	069b      	lsls	r3, r3, #26
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d107      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cb2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002cb4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x33e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x33e>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x340>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 810a 	bne.w	8002ef2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d00f      	beq.n	8002d06 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	400a      	ands	r2, r1
 8002d00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002d04:	e049      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2201      	movs	r2, #1
 8002d14:	409a      	lsls	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	d91c      	bls.n	8002d62 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1b      	subs	r3, #27
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4019      	ands	r1, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6898      	ldr	r0, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	3b1b      	subs	r3, #27
 8002d54:	fa00 f203 	lsl.w	r2, r0, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	619a      	str	r2, [r3, #24]
 8002d60:	e01b      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6959      	ldr	r1, [r3, #20]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	2207      	movs	r2, #7
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	4019      	ands	r1, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6898      	ldr	r0, [r3, #8]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_ADC_ConfigChannel+0x480>)
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d105      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d105      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	f040 8091 	bne.w	8002ef2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 808a 	bne.w	8002ef2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de6:	d102      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x456>
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_ADC_ConfigChannel+0x484>)
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e002      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x45c>
 8002dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002df2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10e      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x488>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x488>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e006      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x48a>
 8002e14:	83fff000 	.word	0x83fff000
 8002e18:	50000300 	.word	0x50000300
 8002e1c:	50000100 	.word	0x50000100
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d150      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d010      	beq.n	8002e4e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x4b0>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x4b0>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x4b2>
 8002e48:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d13c      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d11d      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x4fa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e5e:	d118      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_ADC_ConfigChannel+0x574>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <HAL_ADC_ConfigChannel+0x578>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	0c9a      	lsrs	r2, r3, #18
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e82:	e002      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f9      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e90:	e02e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b11      	cmp	r3, #17
 8002e98:	d10b      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x51a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b12      	cmp	r3, #18
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ec6:	e013      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002eda:	e00a      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002eee:	e000      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ef0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	376c      	adds	r7, #108	; 0x6c
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	431bde83 	.word	0x431bde83

08002f14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b099      	sub	sp, #100	; 0x64
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2c:	d102      	bne.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002f2e:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	e002      	b.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f38:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0a2      	b.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e09b      	b.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d17f      	bne.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d179      	bne.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f74:	4b49      	ldr	r3, [pc, #292]	; (800309c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002f76:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d040      	beq.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f92:	035b      	lsls	r3, r3, #13
 8002f94:	430b      	orrs	r3, r1
 8002f96:	431a      	orrs	r2, r3
 8002f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d15c      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002fde:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d14b      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fec:	f023 030f 	bic.w	r3, r3, #15
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	6811      	ldr	r1, [r2, #0]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003000:	e03c      	b.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d108      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d123      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003050:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003052:	2b00      	cmp	r3, #0
 8003054:	d112      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800305e:	f023 030f 	bic.w	r3, r3, #15
 8003062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003064:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003066:	e009      	b.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800307a:	e000      	b.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800307c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800308a:	4618      	mov	r0, r3
 800308c:	3764      	adds	r7, #100	; 0x64
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	50000100 	.word	0x50000100
 800309c:	50000300 	.word	0x50000300

080030a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <ADC_Enable+0x2c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <ADC_Enable+0x2c>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <ADC_Enable+0x2e>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d143      	bne.n	800315a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <ADC_Enable+0xc4>)
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0210 	orr.w	r2, r3, #16
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e02f      	b.n	800315c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800310c:	f7ff f8ba 	bl	8002284 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003112:	e01b      	b.n	800314c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003114:	f7ff f8b6 	bl	8002284 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d914      	bls.n	800314c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d00d      	beq.n	800314c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1dc      	bne.n	8003114 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	8000003f 	.word	0x8000003f

08003168 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <ADC_Disable+0x2c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <ADC_Disable+0x2c>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <ADC_Disable+0x2e>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d047      	beq.n	800322a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030d 	and.w	r3, r3, #13
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d10f      	bne.n	80031c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0202 	orr.w	r2, r2, #2
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2203      	movs	r2, #3
 80031be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80031c0:	f7ff f860 	bl	8002284 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031c6:	e029      	b.n	800321c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0210 	orr.w	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e023      	b.n	800322c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031e4:	f7ff f84e 	bl	8002284 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d914      	bls.n	800321c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10d      	bne.n	800321c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e007      	b.n	800322c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d0dc      	beq.n	80031e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 809b 	beq.w	8003390 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003268:	d12a      	bne.n	80032c0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800326e:	2b01      	cmp	r3, #1
 8003270:	d126      	bne.n	80032c0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003276:	2b01      	cmp	r3, #1
 8003278:	d122      	bne.n	80032c0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800327a:	230c      	movs	r3, #12
 800327c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800327e:	e014      	b.n	80032aa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4a46      	ldr	r2, [pc, #280]	; (800339c <ADC_ConversionStop+0x168>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d90d      	bls.n	80032a4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f043 0210 	orr.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e076      	b.n	8003392 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	3301      	adds	r3, #1
 80032a8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d1e3      	bne.n	8003280 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2240      	movs	r2, #64	; 0x40
 80032be:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b60      	cmp	r3, #96	; 0x60
 80032c4:	d015      	beq.n	80032f2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d10e      	bne.n	80032f2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0210 	orr.w	r2, r2, #16
 80032f0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d015      	beq.n	8003324 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b08      	cmp	r3, #8
 8003304:	d10e      	bne.n	8003324 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003310:	2b00      	cmp	r3, #0
 8003312:	d107      	bne.n	8003324 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b60      	cmp	r3, #96	; 0x60
 8003328:	d005      	beq.n	8003336 <ADC_ConversionStop+0x102>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b6c      	cmp	r3, #108	; 0x6c
 800332e:	d105      	bne.n	800333c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003330:	230c      	movs	r3, #12
 8003332:	617b      	str	r3, [r7, #20]
        break;
 8003334:	e005      	b.n	8003342 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003336:	2308      	movs	r3, #8
 8003338:	617b      	str	r3, [r7, #20]
        break;
 800333a:	e002      	b.n	8003342 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800333c:	2304      	movs	r3, #4
 800333e:	617b      	str	r3, [r7, #20]
        break;
 8003340:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003342:	f7fe ff9f 	bl	8002284 <HAL_GetTick>
 8003346:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003348:	e01b      	b.n	8003382 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800334a:	f7fe ff9b 	bl	8002284 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b0b      	cmp	r3, #11
 8003356:	d914      	bls.n	8003382 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f043 0210 	orr.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e007      	b.n	8003392 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1dc      	bne.n	800334a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	000993ff 	.word	0x000993ff

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <__NVIC_EnableIRQ+0x38>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d301      	bcc.n	8003512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350e:	2301      	movs	r3, #1
 8003510:	e00f      	b.n	8003532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <SysTick_Config+0x40>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351a:	210f      	movs	r1, #15
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f7ff ff8e 	bl	8003440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <SysTick_Config+0x40>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SysTick_Config+0x40>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff29 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003568:	f7ff ff3e 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 800356c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	6978      	ldr	r0, [r7, #20]
 8003574:	f7ff ff8e 	bl	8003494 <NVIC_EncodePriority>
 8003578:	4602      	mov	r2, r0
 800357a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff5d 	bl	8003440 <__NVIC_SetPriority>
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff31 	bl	8003404 <__NVIC_EnableIRQ>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ffa2 	bl	80034fc <SysTick_Config>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d2:	e14e      	b.n	8003872 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8140 	beq.w	800386c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d005      	beq.n	8003604 <HAL_GPIO_Init+0x40>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d130      	bne.n	8003666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800363a:	2201      	movs	r2, #1
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 0201 	and.w	r2, r3, #1
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b03      	cmp	r3, #3
 8003670:	d017      	beq.n	80036a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d123      	bne.n	80036f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	08da      	lsrs	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3208      	adds	r2, #8
 80036b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	220f      	movs	r2, #15
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4013      	ands	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	08da      	lsrs	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3208      	adds	r2, #8
 80036f0:	6939      	ldr	r1, [r7, #16]
 80036f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	2203      	movs	r2, #3
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4013      	ands	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0203 	and.w	r2, r3, #3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 809a 	beq.w	800386c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003738:	4b55      	ldr	r3, [pc, #340]	; (8003890 <HAL_GPIO_Init+0x2cc>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a54      	ldr	r2, [pc, #336]	; (8003890 <HAL_GPIO_Init+0x2cc>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6193      	str	r3, [r2, #24]
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_GPIO_Init+0x2cc>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003750:	4a50      	ldr	r2, [pc, #320]	; (8003894 <HAL_GPIO_Init+0x2d0>)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	220f      	movs	r2, #15
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800377a:	d013      	beq.n	80037a4 <HAL_GPIO_Init+0x1e0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a46      	ldr	r2, [pc, #280]	; (8003898 <HAL_GPIO_Init+0x2d4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00d      	beq.n	80037a0 <HAL_GPIO_Init+0x1dc>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a45      	ldr	r2, [pc, #276]	; (800389c <HAL_GPIO_Init+0x2d8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <HAL_GPIO_Init+0x1d8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a44      	ldr	r2, [pc, #272]	; (80038a0 <HAL_GPIO_Init+0x2dc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_GPIO_Init+0x1d4>
 8003794:	2303      	movs	r3, #3
 8003796:	e006      	b.n	80037a6 <HAL_GPIO_Init+0x1e2>
 8003798:	2305      	movs	r3, #5
 800379a:	e004      	b.n	80037a6 <HAL_GPIO_Init+0x1e2>
 800379c:	2302      	movs	r3, #2
 800379e:	e002      	b.n	80037a6 <HAL_GPIO_Init+0x1e2>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_GPIO_Init+0x1e2>
 80037a4:	2300      	movs	r3, #0
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	f002 0203 	and.w	r2, r2, #3
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	4093      	lsls	r3, r2
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037b6:	4937      	ldr	r1, [pc, #220]	; (8003894 <HAL_GPIO_Init+0x2d0>)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	089b      	lsrs	r3, r3, #2
 80037bc:	3302      	adds	r3, #2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c4:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037e8:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ee:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	43db      	mvns	r3, r3
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003842:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	43db      	mvns	r3, r3
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <HAL_GPIO_Init+0x2e0>)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3301      	adds	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	f47f aea9 	bne.w	80035d4 <HAL_GPIO_Init+0x10>
  }
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40021000 	.word	0x40021000
 8003894:	40010000 	.word	0x40010000
 8003898:	48000400 	.word	0x48000400
 800389c:	48000800 	.word	0x48000800
 80038a0:	48000c00 	.word	0x48000c00
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e001      	b.n	80038ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800390e:	af00      	add	r7, sp, #0
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003918:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f001 b823 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 817d 	beq.w	8003c3e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003944:	4bbc      	ldr	r3, [pc, #752]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	2b04      	cmp	r3, #4
 800394e:	d00c      	beq.n	800396a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003950:	4bb9      	ldr	r3, [pc, #740]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b08      	cmp	r3, #8
 800395a:	d15c      	bne.n	8003a16 <HAL_RCC_OscConfig+0x10e>
 800395c:	4bb6      	ldr	r3, [pc, #728]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	d155      	bne.n	8003a16 <HAL_RCC_OscConfig+0x10e>
 800396a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800396e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800397e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_RCC_OscConfig+0x94>
 8003996:	4ba8      	ldr	r3, [pc, #672]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	e015      	b.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 800399c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80039b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80039b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80039c4:	4b9c      	ldr	r3, [pc, #624]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80039d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80039d4:	fa92 f2a2 	rbit	r2, r2
 80039d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80039dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0220 	orr.w	r2, r2, #32
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 811f 	beq.w	8003c3c <HAL_RCC_OscConfig+0x334>
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 8116 	bne.w	8003c3c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f000 bfaf 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x12e>
 8003a28:	4b83      	ldr	r3, [pc, #524]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a82      	ldr	r2, [pc, #520]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	e036      	b.n	8003aa4 <HAL_RCC_OscConfig+0x19c>
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x158>
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7b      	ldr	r2, [pc, #492]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a78      	ldr	r2, [pc, #480]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e021      	b.n	8003aa4 <HAL_RCC_OscConfig+0x19c>
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x184>
 8003a72:	4b71      	ldr	r3, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a70      	ldr	r2, [pc, #448]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6d      	ldr	r2, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x19c>
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a69      	ldr	r2, [pc, #420]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a66      	ldr	r2, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aa4:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	f023 020f 	bic.w	r2, r3, #15
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	495f      	ldr	r1, [pc, #380]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d059      	beq.n	8003b82 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fbd9 	bl	8002284 <HAL_GetTick>
 8003ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fbd4 	bl	8002284 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b64      	cmp	r3, #100	; 0x64
 8003ae6:	d902      	bls.n	8003aee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	f000 bf43 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
 8003aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003b02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_OscConfig+0x218>
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	e015      	b.n	8003b4c <HAL_RCC_OscConfig+0x244>
 8003b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b24:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b38:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b3c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003b48:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b50:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003b54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b58:	fa92 f2a2 	rbit	r2, r2
 8003b5c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003b60:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003b64:	fab2 f282 	clz	r2, r2
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f042 0220 	orr.w	r2, r2, #32
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	f002 021f 	and.w	r2, r2, #31
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ab      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x1d0>
 8003b80:	e05d      	b.n	8003c3e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe fb7f 	bl	8002284 <HAL_GetTick>
 8003b86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe fb7a 	bl	8002284 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	; 0x64
 8003b9a:	d902      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	f000 bee9 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
 8003ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003bb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2cc>
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	e015      	b.n	8003c00 <HAL_RCC_OscConfig+0x2f8>
 8003bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003bf0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_RCC_OscConfig+0x330>)
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c04:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003c08:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c0c:	fa92 f2a2 	rbit	r2, r2
 8003c10:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003c14:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003c18:	fab2 f282 	clz	r2, r2
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	f042 0220 	orr.w	r2, r2, #32
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	f002 021f 	and.w	r2, r2, #31
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ab      	bne.n	8003b8c <HAL_RCC_OscConfig+0x284>
 8003c34:	e003      	b.n	8003c3e <HAL_RCC_OscConfig+0x336>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 817d 	beq.w	8003f4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c54:	4ba6      	ldr	r3, [pc, #664]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c60:	4ba3      	ldr	r3, [pc, #652]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d172      	bne.n	8003d52 <HAL_RCC_OscConfig+0x44a>
 8003c6c:	4ba0      	ldr	r3, [pc, #640]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d16c      	bne.n	8003d52 <HAL_RCC_OscConfig+0x44a>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x3a0>
 8003ca2:	4b93      	ldr	r3, [pc, #588]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	e013      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c8>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003cba:	2302      	movs	r3, #2
 8003cbc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003cc0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ccc:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003cd6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cda:	fa92 f2a2 	rbit	r2, r2
 8003cde:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003ce2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f042 0220 	orr.w	r2, r2, #32
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	f002 021f 	and.w	r2, r2, #31
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCC_OscConfig+0x410>
 8003d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f000 be2e 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b75      	ldr	r3, [pc, #468]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	21f8      	movs	r1, #248	; 0xf8
 8003d2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d36:	fa91 f1a1 	rbit	r1, r1
 8003d3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003d3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003d42:	fab1 f181 	clz	r1, r1
 8003d46:	b2c9      	uxtb	r1, r1
 8003d48:	408b      	lsls	r3, r1
 8003d4a:	4969      	ldr	r1, [pc, #420]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d50:	e0fd      	b.n	8003f4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8088 	beq.w	8003e74 <HAL_RCC_OscConfig+0x56c>
 8003d64:	2301      	movs	r3, #1
 8003d66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fa78 	bl	8002284 <HAL_GetTick>
 8003d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7fe fa73 	bl	8002284 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d902      	bls.n	8003db0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	f000 bde2 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
 8003db0:	2302      	movs	r3, #2
 8003db2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003dc2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4d8>
 8003dda:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	e013      	b.n	8003e08 <HAL_RCC_OscConfig+0x500>
 8003de0:	2302      	movs	r3, #2
 8003de2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003df2:	2302      	movs	r3, #2
 8003df4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003df8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003e04:	4b3a      	ldr	r3, [pc, #232]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003e0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e12:	fa92 f2a2 	rbit	r2, r2
 8003e16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003e1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e1e:	fab2 f282 	clz	r2, r2
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f042 0220 	orr.w	r2, r2, #32
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	f002 021f 	and.w	r2, r2, #31
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f202 	lsl.w	r2, r1, r2
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0af      	beq.n	8003d9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	21f8      	movs	r1, #248	; 0xf8
 8003e50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e58:	fa91 f1a1 	rbit	r1, r1
 8003e5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003e60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003e64:	fab1 f181 	clz	r1, r1
 8003e68:	b2c9      	uxtb	r1, r1
 8003e6a:	408b      	lsls	r3, r1
 8003e6c:	4920      	ldr	r1, [pc, #128]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
 8003e72:	e06c      	b.n	8003f4e <HAL_RCC_OscConfig+0x646>
 8003e74:	2301      	movs	r3, #1
 8003e76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f9f0 	bl	8002284 <HAL_GetTick>
 8003ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eaa:	f7fe f9eb 	bl	8002284 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	f000 bd5a 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d104      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5ec>
 8003eea:	4b01      	ldr	r3, [pc, #4]	; (8003ef0 <HAL_RCC_OscConfig+0x5e8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	e015      	b.n	8003f1c <HAL_RCC_OscConfig+0x614>
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f06:	2302      	movs	r3, #2
 8003f08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f18:	4bc8      	ldr	r3, [pc, #800]	; (800423c <HAL_RCC_OscConfig+0x934>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003f22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f26:	fa92 f2a2 	rbit	r2, r2
 8003f2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003f2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f32:	fab2 f282 	clz	r2, r2
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	f042 0220 	orr.w	r2, r2, #32
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	f002 021f 	and.w	r2, r2, #31
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f202 	lsl.w	r2, r1, r2
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ad      	bne.n	8003eaa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8110 	beq.w	8004184 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d079      	beq.n	8004068 <HAL_RCC_OscConfig+0x760>
 8003f74:	2301      	movs	r3, #1
 8003f76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	4bab      	ldr	r3, [pc, #684]	; (8004240 <HAL_RCC_OscConfig+0x938>)
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe f971 	bl	8002284 <HAL_GetTick>
 8003fa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa8:	f7fe f96c 	bl	8002284 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d902      	bls.n	8003fbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	f000 bcdb 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003fd8:	2202      	movs	r2, #2
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	fa93 f2a3 	rbit	r2, r3
 8003fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	fa93 f2a3 	rbit	r2, r3
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004016:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004018:	4b88      	ldr	r3, [pc, #544]	; (800423c <HAL_RCC_OscConfig+0x934>)
 800401a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004024:	2102      	movs	r1, #2
 8004026:	6019      	str	r1, [r3, #0]
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	fa93 f1a3 	rbit	r1, r3
 8004036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800403e:	6019      	str	r1, [r3, #0]
  return result;
 8004040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004044:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2101      	movs	r1, #1
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0a0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x6a0>
 8004066:	e08d      	b.n	8004184 <HAL_RCC_OscConfig+0x87c>
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	fa93 f2a3 	rbit	r2, r3
 8004082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004086:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800408a:	601a      	str	r2, [r3, #0]
  return result;
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004094:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	4b68      	ldr	r3, [pc, #416]	; (8004240 <HAL_RCC_OscConfig+0x938>)
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	461a      	mov	r2, r3
 80040a6:	2300      	movs	r3, #0
 80040a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040aa:	f7fe f8eb 	bl	8002284 <HAL_GetTick>
 80040ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b4:	f7fe f8e6 	bl	8002284 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d902      	bls.n	80040ca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	f000 bc55 	b.w	8004974 <HAL_RCC_OscConfig+0x106c>
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040d2:	2202      	movs	r2, #2
 80040d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040f6:	2202      	movs	r2, #2
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	fa93 f2a3 	rbit	r2, r3
 8004108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800411a:	2202      	movs	r2, #2
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004130:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004134:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004136:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_RCC_OscConfig+0x934>)
 8004138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800413a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004142:	2102      	movs	r1, #2
 8004144:	6019      	str	r1, [r3, #0]
 8004146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	fa93 f1a3 	rbit	r1, r3
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800415c:	6019      	str	r1, [r3, #0]
  return result;
 800415e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004162:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	fab3 f383 	clz	r3, r3
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2101      	movs	r1, #1
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d197      	bne.n	80040b4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 81a1 	beq.w	80044dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a0:	4b26      	ldr	r3, [pc, #152]	; (800423c <HAL_RCC_OscConfig+0x934>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCC_OscConfig+0x934>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4a22      	ldr	r2, [pc, #136]	; (800423c <HAL_RCC_OscConfig+0x934>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	61d3      	str	r3, [r2, #28]
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_OscConfig+0x934>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80041c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80041d2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCC_OscConfig+0x93c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11a      	bne.n	800421c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_RCC_OscConfig+0x93c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_RCC_OscConfig+0x93c>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f2:	f7fe f847 	bl	8002284 <HAL_GetTick>
 80041f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	e009      	b.n	8004210 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fc:	f7fe f842 	bl	8002284 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b64      	cmp	r3, #100	; 0x64
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e3b1      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCC_OscConfig+0x93c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10d      	bne.n	8004248 <HAL_RCC_OscConfig+0x940>
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCC_OscConfig+0x934>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4a02      	ldr	r2, [pc, #8]	; (800423c <HAL_RCC_OscConfig+0x934>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6213      	str	r3, [r2, #32]
 8004238:	e03c      	b.n	80042b4 <HAL_RCC_OscConfig+0x9ac>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	10908120 	.word	0x10908120
 8004244:	40007000 	.word	0x40007000
 8004248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x96a>
 8004258:	4bc1      	ldr	r3, [pc, #772]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4ac0      	ldr	r2, [pc, #768]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6213      	str	r3, [r2, #32]
 8004264:	4bbe      	ldr	r3, [pc, #760]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4abd      	ldr	r2, [pc, #756]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	e020      	b.n	80042b4 <HAL_RCC_OscConfig+0x9ac>
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b05      	cmp	r3, #5
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x994>
 8004282:	4bb7      	ldr	r3, [pc, #732]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4ab6      	ldr	r2, [pc, #728]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	6213      	str	r3, [r2, #32]
 800428e:	4bb4      	ldr	r3, [pc, #720]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4ab3      	ldr	r2, [pc, #716]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6213      	str	r3, [r2, #32]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0x9ac>
 800429c:	4bb0      	ldr	r3, [pc, #704]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4aaf      	ldr	r2, [pc, #700]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	6213      	str	r3, [r2, #32]
 80042a8:	4bad      	ldr	r3, [pc, #692]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4aac      	ldr	r2, [pc, #688]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 80042ae:	f023 0304 	bic.w	r3, r3, #4
 80042b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8081 	beq.w	80043c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fd ffdd 	bl	8002284 <HAL_GetTick>
 80042ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fd ffd8 	bl	8002284 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e345      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
 80042e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042f0:	2202      	movs	r2, #2
 80042f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fa93 f2a3 	rbit	r2, r3
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004314:	2202      	movs	r2, #2
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	fa93 f2a3 	rbit	r2, r3
 8004326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800432e:	601a      	str	r2, [r3, #0]
  return result;
 8004330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004334:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004338:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0xa4c>
 800434e:	4b84      	ldr	r3, [pc, #528]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	e013      	b.n	800437c <HAL_RCC_OscConfig+0xa74>
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800435c:	2202      	movs	r2, #2
 800435e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	4b79      	ldr	r3, [pc, #484]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004380:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004384:	2102      	movs	r1, #2
 8004386:	6011      	str	r1, [r2, #0]
 8004388:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800438c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	fa92 f1a2 	rbit	r1, r2
 8004396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800439a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800439e:	6011      	str	r1, [r2, #0]
  return result;
 80043a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	fab2 f282 	clz	r2, r2
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	f002 021f 	and.w	r2, r2, #31
 80043ba:	2101      	movs	r1, #1
 80043bc:	fa01 f202 	lsl.w	r2, r1, r2
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d084      	beq.n	80042d0 <HAL_RCC_OscConfig+0x9c8>
 80043c6:	e07f      	b.n	80044c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c8:	f7fd ff5c 	bl	8002284 <HAL_GetTick>
 80043cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d0:	e00b      	b.n	80043ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fd ff57 	bl	8002284 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e2c4      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
 80043ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80043f2:	2202      	movs	r2, #2
 80043f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fa93 f2a3 	rbit	r2, r3
 8004404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004408:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004412:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004416:	2202      	movs	r2, #2
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	fa93 f2a3 	rbit	r2, r3
 8004428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004430:	601a      	str	r2, [r3, #0]
  return result;
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800443a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f043 0302 	orr.w	r3, r3, #2
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d102      	bne.n	8004456 <HAL_RCC_OscConfig+0xb4e>
 8004450:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	e013      	b.n	800447e <HAL_RCC_OscConfig+0xb76>
 8004456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800445e:	2202      	movs	r2, #2
 8004460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004466:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	fa93 f2a3 	rbit	r2, r3
 8004470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004474:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	4b39      	ldr	r3, [pc, #228]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004482:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004486:	2102      	movs	r1, #2
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800448e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	fa92 f1a2 	rbit	r1, r2
 8004498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800449c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80044a0:	6011      	str	r1, [r2, #0]
  return result;
 80044a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	fab2 f282 	clz	r2, r2
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	f002 021f 	and.w	r2, r2, #31
 80044bc:	2101      	movs	r1, #1
 80044be:	fa01 f202 	lsl.w	r2, r1, r2
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d184      	bne.n	80043d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8242 	beq.w	8004972 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_RCC_OscConfig+0xc58>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	f000 8213 	beq.w	8004922 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2b02      	cmp	r3, #2
 800450a:	f040 8162 	bne.w	80047d2 <HAL_RCC_OscConfig+0xeca>
 800450e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004512:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004516:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800451a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004520:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	fa93 f2a3 	rbit	r2, r3
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004532:	601a      	str	r2, [r3, #0]
  return result;
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800453c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004548:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fd fe96 	bl	8002284 <HAL_GetTick>
 8004558:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455c:	e00c      	b.n	8004578 <HAL_RCC_OscConfig+0xc70>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fe8e 	bl	8002284 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1fd      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
 8004578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800457c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	fa93 f2a3 	rbit	r2, r3
 8004594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004598:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800459c:	601a      	str	r2, [r3, #0]
  return result;
 800459e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_OscConfig+0xcba>
 80045bc:	4bb0      	ldr	r3, [pc, #704]	; (8004880 <HAL_RCC_OscConfig+0xf78>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e027      	b.n	8004612 <HAL_RCC_OscConfig+0xd0a>
 80045c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	fa93 f2a3 	rbit	r2, r3
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	fa93 f2a3 	rbit	r2, r3
 8004604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004608:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	4b9c      	ldr	r3, [pc, #624]	; (8004880 <HAL_RCC_OscConfig+0xf78>)
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004616:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800461a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800461e:	6011      	str	r1, [r2, #0]
 8004620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004624:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	fa92 f1a2 	rbit	r1, r2
 800462e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004632:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004636:	6011      	str	r1, [r2, #0]
  return result;
 8004638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800463c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	fab2 f282 	clz	r2, r2
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f042 0220 	orr.w	r2, r2, #32
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f002 021f 	and.w	r2, r2, #31
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d182      	bne.n	8004564 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800465e:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0xf78>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	430b      	orrs	r3, r1
 8004680:	497f      	ldr	r1, [pc, #508]	; (8004880 <HAL_RCC_OscConfig+0xf78>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800468e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004698:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	fa93 f2a3 	rbit	r2, r3
 80046a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80046aa:	601a      	str	r2, [r3, #0]
  return result;
 80046ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80046b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	461a      	mov	r2, r3
 80046c8:	2301      	movs	r3, #1
 80046ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd fdda 	bl	8002284 <HAL_GetTick>
 80046d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d4:	e009      	b.n	80046ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fd fdd5 	bl	8002284 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e144      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80046f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	fa93 f2a3 	rbit	r2, r3
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800470e:	601a      	str	r2, [r3, #0]
  return result;
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004718:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d102      	bne.n	8004734 <HAL_RCC_OscConfig+0xe2c>
 800472e:	4b54      	ldr	r3, [pc, #336]	; (8004880 <HAL_RCC_OscConfig+0xf78>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	e027      	b.n	8004784 <HAL_RCC_OscConfig+0xe7c>
 8004734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004738:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800473c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	fa93 f2a3 	rbit	r2, r3
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	fa93 f2a3 	rbit	r2, r3
 8004776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	4b3f      	ldr	r3, [pc, #252]	; (8004880 <HAL_RCC_OscConfig+0xf78>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004788:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800478c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004796:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	fa92 f1a2 	rbit	r1, r2
 80047a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80047a8:	6011      	str	r1, [r2, #0]
  return result;
 80047aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	fab2 f282 	clz	r2, r2
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	f042 0220 	orr.w	r2, r2, #32
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	f002 021f 	and.w	r2, r2, #31
 80047c4:	2101      	movs	r1, #1
 80047c6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d082      	beq.n	80046d6 <HAL_RCC_OscConfig+0xdce>
 80047d0:	e0cf      	b.n	8004972 <HAL_RCC_OscConfig+0x106a>
 80047d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80047da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	fa93 f2a3 	rbit	r2, r3
 80047ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80047f6:	601a      	str	r2, [r3, #0]
  return result;
 80047f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004800:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800480c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	461a      	mov	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fd fd34 	bl	8002284 <HAL_GetTick>
 800481c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004820:	e009      	b.n	8004836 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004822:	f7fd fd2f 	bl	8002284 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e09e      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800483e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004848:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	fa93 f2a3 	rbit	r2, r3
 8004852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004856:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800485a:	601a      	str	r2, [r3, #0]
  return result;
 800485c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004860:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004864:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d104      	bne.n	8004884 <HAL_RCC_OscConfig+0xf7c>
 800487a:	4b01      	ldr	r3, [pc, #4]	; (8004880 <HAL_RCC_OscConfig+0xf78>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	e029      	b.n	80048d4 <HAL_RCC_OscConfig+0xfcc>
 8004880:	40021000 	.word	0x40021000
 8004884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004888:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800488c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	fa93 f2a3 	rbit	r2, r3
 80048a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80048b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	fa93 f2a3 	rbit	r2, r3
 80048c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCC_OscConfig+0x1078>)
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80048dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048e0:	6011      	str	r1, [r2, #0]
 80048e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	fa92 f1a2 	rbit	r1, r2
 80048f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048f8:	6011      	str	r1, [r2, #0]
  return result;
 80048fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	fab2 f282 	clz	r2, r2
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	f042 0220 	orr.w	r2, r2, #32
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	f002 021f 	and.w	r2, r2, #31
 8004914:	2101      	movs	r1, #1
 8004916:	fa01 f202 	lsl.w	r2, r1, r2
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d180      	bne.n	8004822 <HAL_RCC_OscConfig+0xf1a>
 8004920:	e027      	b.n	8004972 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01e      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_RCC_OscConfig+0x1078>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800493e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004942:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10b      	bne.n	800496e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004956:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800495a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b09e      	sub	sp, #120	; 0x78
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e162      	b.n	8004c62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b90      	ldr	r3, [pc, #576]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d910      	bls.n	80049cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 0207 	bic.w	r2, r3, #7
 80049b2:	498b      	ldr	r1, [pc, #556]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b89      	ldr	r3, [pc, #548]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e14a      	b.n	8004c62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d8:	4b82      	ldr	r3, [pc, #520]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	497f      	ldr	r1, [pc, #508]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80dc 	beq.w	8004bb0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d13c      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xf6>
 8004a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a10:	fab3 f383 	clz	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xa6>
 8004a24:	4b6f      	ldr	r3, [pc, #444]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e00f      	b.n	8004a4a <HAL_RCC_ClockConfig+0xc6>
 8004a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	667b      	str	r3, [r7, #100]	; 0x64
 8004a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a46:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a52:	fa92 f2a2 	rbit	r2, r2
 8004a56:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a5a:	fab2 f282 	clz	r2, r2
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	f042 0220 	orr.w	r2, r2, #32
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	f002 021f 	and.w	r2, r2, #31
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d17b      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0f3      	b.n	8004c62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d13c      	bne.n	8004afc <HAL_RCC_ClockConfig+0x178>
 8004a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8a:	fa93 f3a3 	rbit	r3, r3
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a92:	fab3 f383 	clz	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d102      	bne.n	8004aac <HAL_RCC_ClockConfig+0x128>
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	e00f      	b.n	8004acc <HAL_RCC_ClockConfig+0x148>
 8004aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004abe:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac8:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ad0:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad4:	fa92 f2a2 	rbit	r2, r2
 8004ad8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004adc:	fab2 f282 	clz	r2, r2
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	f042 0220 	orr.w	r2, r2, #32
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	f002 021f 	and.w	r2, r2, #31
 8004aec:	2101      	movs	r1, #1
 8004aee:	fa01 f202 	lsl.w	r2, r1, r2
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d13a      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b2      	b.n	8004c62 <HAL_RCC_ClockConfig+0x2de>
 8004afc:	2302      	movs	r3, #2
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	fa93 f3a3 	rbit	r3, r3
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0a:	fab3 f383 	clz	r3, r3
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x1a0>
 8004b1e:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	e00d      	b.n	8004b40 <HAL_RCC_ClockConfig+0x1bc>
 8004b24:	2302      	movs	r3, #2
 8004b26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b30:	2302      	movs	r3, #2
 8004b32:	623b      	str	r3, [r7, #32]
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2202      	movs	r2, #2
 8004b42:	61ba      	str	r2, [r7, #24]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	fa92 f2a2 	rbit	r2, r2
 8004b4a:	617a      	str	r2, [r7, #20]
  return result;
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	fab2 f282 	clz	r2, r2
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	f042 0220 	orr.w	r2, r2, #32
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	f002 021f 	and.w	r2, r2, #31
 8004b5e:	2101      	movs	r1, #1
 8004b60:	fa01 f202 	lsl.w	r2, r1, r2
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e079      	b.n	8004c62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	491a      	ldr	r1, [pc, #104]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b80:	f7fd fb80 	bl	8002284 <HAL_GetTick>
 8004b84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fd fb7c 	bl	8002284 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e061      	b.n	8004c62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_RCC_ClockConfig+0x260>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 020c 	and.w	r2, r3, #12
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d1eb      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d214      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 0207 	bic.w	r2, r3, #7
 8004bc6:	4906      	ldr	r1, [pc, #24]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <HAL_RCC_ClockConfig+0x25c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e040      	b.n	8004c62 <HAL_RCC_ClockConfig+0x2de>
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCC_ClockConfig+0x2e8>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	491a      	ldr	r1, [pc, #104]	; (8004c6c <HAL_RCC_ClockConfig+0x2e8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <HAL_RCC_ClockConfig+0x2e8>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4912      	ldr	r1, [pc, #72]	; (8004c6c <HAL_RCC_ClockConfig+0x2e8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c26:	f000 f829 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <HAL_RCC_ClockConfig+0x2e8>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c34:	22f0      	movs	r2, #240	; 0xf0
 8004c36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	fa92 f2a2 	rbit	r2, r2
 8004c3e:	60fa      	str	r2, [r7, #12]
  return result;
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	fab2 f282 	clz	r2, r2
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	40d3      	lsrs	r3, r2
 8004c4a:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <HAL_RCC_ClockConfig+0x2ec>)
 8004c4c:	5cd3      	ldrb	r3, [r2, r3]
 8004c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <HAL_RCC_ClockConfig+0x2f0>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_RCC_ClockConfig+0x2f4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd face 	bl	80021fc <HAL_InitTick>
  
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3778      	adds	r7, #120	; 0x78
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	08009918 	.word	0x08009918
 8004c74:	20000000 	.word	0x20000000
 8004c78:	20000004 	.word	0x20000004

08004c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b08b      	sub	sp, #44	; 0x2c
 8004c80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c96:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d002      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x30>
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x36>
 8004caa:	e03c      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cac:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004cae:	623b      	str	r3, [r7, #32]
      break;
 8004cb0:	e03c      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004cb8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004cbc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	fa92 f2a2 	rbit	r2, r2
 8004cc4:	607a      	str	r2, [r7, #4]
  return result;
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	fab2 f282 	clz	r2, r2
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	40d3      	lsrs	r3, r2
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004cd2:	5cd3      	ldrb	r3, [r2, r3]
 8004cd4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004cd6:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	220f      	movs	r2, #15
 8004ce0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	fa92 f2a2 	rbit	r2, r2
 8004ce8:	60fa      	str	r2, [r7, #12]
  return result;
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	fab2 f282 	clz	r2, r2
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	40d3      	lsrs	r3, r2
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d04:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
 8004d14:	e004      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	623b      	str	r3, [r7, #32]
      break;
 8004d24:	e002      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d28:	623b      	str	r3, [r7, #32]
      break;
 8004d2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	372c      	adds	r7, #44	; 0x2c
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	007a1200 	.word	0x007a1200
 8004d44:	08009930 	.word	0x08009930
 8004d48:	08009940 	.word	0x08009940
 8004d4c:	003d0900 	.word	0x003d0900

08004d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d6e:	f7ff ffef 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d72:	4601      	mov	r1, r0
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	fa92 f2a2 	rbit	r2, r2
 8004d88:	603a      	str	r2, [r7, #0]
  return result;
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	fab2 f282 	clz	r2, r2
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	40d3      	lsrs	r3, r2
 8004d94:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d96:	5cd3      	ldrb	r3, [r2, r3]
 8004d98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40021000 	.word	0x40021000
 8004da8:	08009928 	.word	0x08009928

08004dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004db2:	f7ff ffcd 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004db6:	4601      	mov	r1, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004dc0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004dc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	fa92 f2a2 	rbit	r2, r2
 8004dcc:	603a      	str	r2, [r7, #0]
  return result;
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	fab2 f282 	clz	r2, r2
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	40d3      	lsrs	r3, r2
 8004dd8:	4a04      	ldr	r2, [pc, #16]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x40>)
 8004dda:	5cd3      	ldrb	r3, [r2, r3]
 8004ddc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	08009928 	.word	0x08009928

08004df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b092      	sub	sp, #72	; 0x48
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80cd 	beq.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e14:	4b86      	ldr	r3, [pc, #536]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10e      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e20:	4b83      	ldr	r3, [pc, #524]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	4a82      	ldr	r2, [pc, #520]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	61d3      	str	r3, [r2, #28]
 8004e2c:	4b80      	ldr	r3, [pc, #512]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b7d      	ldr	r3, [pc, #500]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d118      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4a:	4b7a      	ldr	r3, [pc, #488]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a79      	ldr	r2, [pc, #484]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e56:	f7fd fa15 	bl	8002284 <HAL_GetTick>
 8004e5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	e008      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5e:	f7fd fa11 	bl	8002284 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b64      	cmp	r3, #100	; 0x64
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0db      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	4b70      	ldr	r3, [pc, #448]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e7c:	4b6c      	ldr	r3, [pc, #432]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d07d      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d076      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e9a:	4b65      	ldr	r3, [pc, #404]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4b5e      	ldr	r3, [pc, #376]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	fa93 f3a3 	rbit	r3, r3
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed8:	fab3 f383 	clz	r3, r3
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4b55      	ldr	r3, [pc, #340]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	2300      	movs	r3, #0
 8004eea:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eec:	4a50      	ldr	r2, [pc, #320]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d045      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fd f9c2 	bl	8002284 <HAL_GetTick>
 8004f00:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f02:	e00a      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f04:	f7fd f9be 	bl	8002284 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e086      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	fa93 f3a3 	rbit	r3, r3
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
 8004f26:	2302      	movs	r3, #2
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	fa93 f3a3 	rbit	r3, r3
 8004f30:	61fb      	str	r3, [r7, #28]
  return result;
 8004f32:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f043 0302 	orr.w	r3, r3, #2
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d102      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f48:	4b39      	ldr	r3, [pc, #228]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	e007      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	4b35      	ldr	r3, [pc, #212]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2202      	movs	r2, #2
 8004f60:	613a      	str	r2, [r7, #16]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	fa92 f2a2 	rbit	r2, r2
 8004f68:	60fa      	str	r2, [r7, #12]
  return result;
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	fab2 f282 	clz	r2, r2
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	f002 021f 	and.w	r2, r2, #31
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0bd      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f88:	4b29      	ldr	r3, [pc, #164]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4926      	ldr	r1, [pc, #152]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa2:	4b23      	ldr	r3, [pc, #140]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	4a22      	ldr	r2, [pc, #136]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	491a      	ldr	r1, [pc, #104]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fd8:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	f023 0210 	bic.w	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4912      	ldr	r1, [pc, #72]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ff6:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	490b      	ldr	r1, [pc, #44]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005004:	4313      	orrs	r3, r2
 8005006:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	4903      	ldr	r1, [pc, #12]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005022:	4313      	orrs	r3, r2
 8005024:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3748      	adds	r7, #72	; 0x48
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	40007000 	.word	0x40007000
 8005038:	10908100 	.word	0x10908100

0800503c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e049      	b.n	80050e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc fe04 	bl	8001c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 fd40 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e049      	b.n	8005190 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f841 	bl	8005198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f000 fce9 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_TIM_PWM_Start+0x24>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e03c      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d109      	bne.n	80051ea <HAL_TIM_PWM_Start+0x3e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e02f      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d109      	bne.n	8005204 <HAL_TIM_PWM_Start+0x58>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e022      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d109      	bne.n	800521e <HAL_TIM_PWM_Start+0x72>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e015      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b10      	cmp	r3, #16
 8005222:	d109      	bne.n	8005238 <HAL_TIM_PWM_Start+0x8c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e008      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e088      	b.n	8005364 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xb6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	e023      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0xc6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005270:	e01b      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xd6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	e013      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xe6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005290:	e00b      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b10      	cmp	r3, #16
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0xf6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a0:	e003      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 ffdc 	bl	8006270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <HAL_TIM_PWM_Start+0x1c0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x134>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <HAL_TIM_PWM_Start+0x1c4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x134>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <HAL_TIM_PWM_Start+0x1c8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x134>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a27      	ldr	r2, [pc, #156]	; (8005378 <HAL_TIM_PWM_Start+0x1cc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x138>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_TIM_PWM_Start+0x13a>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1b      	ldr	r2, [pc, #108]	; (800536c <HAL_TIM_PWM_Start+0x1c0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00e      	beq.n	8005322 <HAL_TIM_PWM_Start+0x176>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d009      	beq.n	8005322 <HAL_TIM_PWM_Start+0x176>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1a      	ldr	r2, [pc, #104]	; (800537c <HAL_TIM_PWM_Start+0x1d0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d004      	beq.n	8005322 <HAL_TIM_PWM_Start+0x176>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <HAL_TIM_PWM_Start+0x1c4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d115      	bne.n	800534e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <HAL_TIM_PWM_Start+0x1d4>)
 800532a:	4013      	ands	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d015      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1b4>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d011      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	e008      	b.n	8005360 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e000      	b.n	8005362 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
 800537c:	40000400 	.word	0x40000400
 8005380:	00010007 	.word	0x00010007

08005384 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 ff6a 	bl	8006270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <HAL_TIM_PWM_Stop+0x10c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIM_PWM_Stop+0x40>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a3a      	ldr	r2, [pc, #232]	; (8005494 <HAL_TIM_PWM_Stop+0x110>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIM_PWM_Stop+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a38      	ldr	r2, [pc, #224]	; (8005498 <HAL_TIM_PWM_Stop+0x114>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_PWM_Stop+0x40>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a37      	ldr	r2, [pc, #220]	; (800549c <HAL_TIM_PWM_Stop+0x118>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_PWM_Stop+0x44>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_TIM_PWM_Stop+0x46>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d017      	beq.n	80053fe <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10f      	bne.n	80053fe <HAL_TIM_PWM_Stop+0x7a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	f240 4344 	movw	r3, #1092	; 0x444
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_PWM_Stop+0x7a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	f241 1311 	movw	r3, #4369	; 0x1111
 8005408:	4013      	ands	r3, r2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10f      	bne.n	800542e <HAL_TIM_PWM_Stop+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	f240 4344 	movw	r3, #1092	; 0x444
 8005418:	4013      	ands	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <HAL_TIM_PWM_Stop+0xaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Stop+0xba>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	e023      	b.n	8005486 <HAL_TIM_PWM_Stop+0x102>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Stop+0xca>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544c:	e01b      	b.n	8005486 <HAL_TIM_PWM_Stop+0x102>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Stop+0xda>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545c:	e013      	b.n	8005486 <HAL_TIM_PWM_Stop+0x102>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d104      	bne.n	800546e <HAL_TIM_PWM_Stop+0xea>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800546c:	e00b      	b.n	8005486 <HAL_TIM_PWM_Stop+0x102>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b10      	cmp	r3, #16
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Stop+0xfa>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547c:	e003      	b.n	8005486 <HAL_TIM_PWM_Stop+0x102>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800

080054a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d122      	bne.n	80054fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0202 	mvn.w	r2, #2
 80054cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 faed 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fadf 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 faf0 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d122      	bne.n	8005550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b04      	cmp	r3, #4
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0204 	mvn.w	r2, #4
 8005520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fac3 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fab5 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fac6 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b08      	cmp	r3, #8
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0208 	mvn.w	r2, #8
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2204      	movs	r2, #4
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa99 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa8b 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fa9c 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa6f 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa61 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fa72 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10e      	bne.n	8005624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d107      	bne.n	8005624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0201 	mvn.w	r2, #1
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa3b 	bl	8005a9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 ff26 	bl	800649c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565e:	d10e      	bne.n	800567e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d107      	bne.n	800567e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 ff19 	bl	80064b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d10e      	bne.n	80056aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d107      	bne.n	80056aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fa20 	bl	8005aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d10e      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0220 	mvn.w	r2, #32
 80056ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fed9 	bl	8006488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e0ff      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b14      	cmp	r3, #20
 800570a:	f200 80f0 	bhi.w	80058ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005769 	.word	0x08005769
 8005718:	080058ef 	.word	0x080058ef
 800571c:	080058ef 	.word	0x080058ef
 8005720:	080058ef 	.word	0x080058ef
 8005724:	080057a9 	.word	0x080057a9
 8005728:	080058ef 	.word	0x080058ef
 800572c:	080058ef 	.word	0x080058ef
 8005730:	080058ef 	.word	0x080058ef
 8005734:	080057eb 	.word	0x080057eb
 8005738:	080058ef 	.word	0x080058ef
 800573c:	080058ef 	.word	0x080058ef
 8005740:	080058ef 	.word	0x080058ef
 8005744:	0800582b 	.word	0x0800582b
 8005748:	080058ef 	.word	0x080058ef
 800574c:	080058ef 	.word	0x080058ef
 8005750:	080058ef 	.word	0x080058ef
 8005754:	0800586d 	.word	0x0800586d
 8005758:	080058ef 	.word	0x080058ef
 800575c:	080058ef 	.word	0x080058ef
 8005760:	080058ef 	.word	0x080058ef
 8005764:	080058ad 	.word	0x080058ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fa3e 	bl	8005bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6999      	ldr	r1, [r3, #24]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	619a      	str	r2, [r3, #24]
      break;
 80057a6:	e0a5      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 faa4 	bl	8005cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6999      	ldr	r1, [r3, #24]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	619a      	str	r2, [r3, #24]
      break;
 80057e8:	e084      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fb03 	bl	8005dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0208 	orr.w	r2, r2, #8
 8005804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0204 	bic.w	r2, r2, #4
 8005814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69d9      	ldr	r1, [r3, #28]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	61da      	str	r2, [r3, #28]
      break;
 8005828:	e064      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fb61 	bl	8005ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69d9      	ldr	r1, [r3, #28]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	021a      	lsls	r2, r3, #8
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	61da      	str	r2, [r3, #28]
      break;
 800586a:	e043      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fba4 	bl	8005fc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0208 	orr.w	r2, r2, #8
 8005886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058aa:	e023      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fbe2 	bl	800607c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	021a      	lsls	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058ec:	e002      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
      break;
 80058f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop

08005908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIM_ConfigClockSource+0x1c>
 8005920:	2302      	movs	r3, #2
 8005922:	e0b6      	b.n	8005a92 <HAL_TIM_ConfigClockSource+0x18a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005960:	d03e      	beq.n	80059e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005966:	f200 8087 	bhi.w	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	f000 8086 	beq.w	8005a7e <HAL_TIM_ConfigClockSource+0x176>
 8005972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005976:	d87f      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 8005978:	2b70      	cmp	r3, #112	; 0x70
 800597a:	d01a      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0xaa>
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d87b      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 8005980:	2b60      	cmp	r3, #96	; 0x60
 8005982:	d050      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x11e>
 8005984:	2b60      	cmp	r3, #96	; 0x60
 8005986:	d877      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 8005988:	2b50      	cmp	r3, #80	; 0x50
 800598a:	d03c      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0xfe>
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	d873      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d058      	beq.n	8005a46 <HAL_TIM_ConfigClockSource+0x13e>
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d86f      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 8005998:	2b30      	cmp	r3, #48	; 0x30
 800599a:	d064      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15e>
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d86b      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d060      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15e>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d867      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d05c      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15e>
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d05a      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15e>
 80059b0:	e062      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059c2:	f000 fc35 	bl	8006230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	609a      	str	r2, [r3, #8]
      break;
 80059de:	e04f      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059f0:	f000 fc1e 	bl	8006230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a02:	609a      	str	r2, [r3, #8]
      break;
 8005a04:	e03c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	461a      	mov	r2, r3
 8005a14:	f000 fb92 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2150      	movs	r1, #80	; 0x50
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fbeb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a24:	e02c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a32:	461a      	mov	r2, r3
 8005a34:	f000 fbb1 	bl	800619a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2160      	movs	r1, #96	; 0x60
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fbdb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a44:	e01c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a52:	461a      	mov	r2, r3
 8005a54:	f000 fb72 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2140      	movs	r1, #64	; 0x40
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fbcb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a64:	e00c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 fbc2 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a76:	e003      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7c:	e000      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <TIM_Base_SetConfig+0xdc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d007      	beq.n	8005b28 <TIM_Base_SetConfig+0x28>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1e:	d003      	beq.n	8005b28 <TIM_Base_SetConfig+0x28>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a2f      	ldr	r2, [pc, #188]	; (8005be0 <TIM_Base_SetConfig+0xe0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d108      	bne.n	8005b3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <TIM_Base_SetConfig+0xdc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <TIM_Base_SetConfig+0x6a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b48:	d00f      	beq.n	8005b6a <TIM_Base_SetConfig+0x6a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a24      	ldr	r2, [pc, #144]	; (8005be0 <TIM_Base_SetConfig+0xe0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_Base_SetConfig+0x6a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a23      	ldr	r2, [pc, #140]	; (8005be4 <TIM_Base_SetConfig+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_Base_SetConfig+0x6a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a22      	ldr	r2, [pc, #136]	; (8005be8 <TIM_Base_SetConfig+0xe8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0x6a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a21      	ldr	r2, [pc, #132]	; (8005bec <TIM_Base_SetConfig+0xec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <TIM_Base_SetConfig+0xdc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <TIM_Base_SetConfig+0xc0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <TIM_Base_SetConfig+0xe4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d007      	beq.n	8005bc0 <TIM_Base_SetConfig+0xc0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0d      	ldr	r2, [pc, #52]	; (8005be8 <TIM_Base_SetConfig+0xe8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0xc0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a0c      	ldr	r2, [pc, #48]	; (8005bec <TIM_Base_SetConfig+0xec>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d103      	bne.n	8005bc8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	615a      	str	r2, [r3, #20]
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 0302 	bic.w	r3, r3, #2
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a28      	ldr	r2, [pc, #160]	; (8005cec <TIM_OC1_SetConfig+0xfc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <TIM_OC1_SetConfig+0x78>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <TIM_OC1_SetConfig+0x100>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d007      	beq.n	8005c68 <TIM_OC1_SetConfig+0x78>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <TIM_OC1_SetConfig+0x104>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_OC1_SetConfig+0x78>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <TIM_OC1_SetConfig+0x108>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d10c      	bne.n	8005c82 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0308 	bic.w	r3, r3, #8
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 0304 	bic.w	r3, r3, #4
 8005c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a19      	ldr	r2, [pc, #100]	; (8005cec <TIM_OC1_SetConfig+0xfc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <TIM_OC1_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <TIM_OC1_SetConfig+0x100>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_OC1_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <TIM_OC1_SetConfig+0x104>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_OC1_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <TIM_OC1_SetConfig+0x108>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d111      	bne.n	8005cc6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	621a      	str	r2, [r3, #32]
}
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40014400 	.word	0x40014400
 8005cf8:	40014800 	.word	0x40014800

08005cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0320 	bic.w	r3, r3, #32
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a24      	ldr	r2, [pc, #144]	; (8005dec <TIM_OC2_SetConfig+0xf0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10d      	bne.n	8005d7c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <TIM_OC2_SetConfig+0xf0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00b      	beq.n	8005d9c <TIM_OC2_SetConfig+0xa0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1a      	ldr	r2, [pc, #104]	; (8005df0 <TIM_OC2_SetConfig+0xf4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d007      	beq.n	8005d9c <TIM_OC2_SetConfig+0xa0>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a19      	ldr	r2, [pc, #100]	; (8005df4 <TIM_OC2_SetConfig+0xf8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC2_SetConfig+0xa0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <TIM_OC2_SetConfig+0xfc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d113      	bne.n	8005dc4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005da2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005daa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40014400 	.word	0x40014400
 8005df8:	40014800 	.word	0x40014800

08005dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a23      	ldr	r2, [pc, #140]	; (8005ee8 <TIM_OC3_SetConfig+0xec>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10d      	bne.n	8005e7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <TIM_OC3_SetConfig+0xec>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_OC3_SetConfig+0x9e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a19      	ldr	r2, [pc, #100]	; (8005eec <TIM_OC3_SetConfig+0xf0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_OC3_SetConfig+0x9e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <TIM_OC3_SetConfig+0xf4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC3_SetConfig+0x9e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <TIM_OC3_SetConfig+0xf8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d113      	bne.n	8005ec2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800

08005ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	031b      	lsls	r3, r3, #12
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <TIM_OC4_SetConfig+0xb8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_OC4_SetConfig+0x7c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <TIM_OC4_SetConfig+0xbc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_OC4_SetConfig+0x7c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <TIM_OC4_SetConfig+0xc0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC4_SetConfig+0x7c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <TIM_OC4_SetConfig+0xc4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d109      	bne.n	8005f88 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	019b      	lsls	r3, r3, #6
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40014400 	.word	0x40014400
 8005fbc:	40014800 	.word	0x40014800

08005fc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006004:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a15      	ldr	r2, [pc, #84]	; (800606c <TIM_OC5_SetConfig+0xac>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00b      	beq.n	8006032 <TIM_OC5_SetConfig+0x72>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a14      	ldr	r2, [pc, #80]	; (8006070 <TIM_OC5_SetConfig+0xb0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <TIM_OC5_SetConfig+0x72>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <TIM_OC5_SetConfig+0xb4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_OC5_SetConfig+0x72>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a12      	ldr	r2, [pc, #72]	; (8006078 <TIM_OC5_SetConfig+0xb8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d109      	bne.n	8006046 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	021b      	lsls	r3, r3, #8
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	621a      	str	r2, [r3, #32]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800

0800607c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	051b      	lsls	r3, r3, #20
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <TIM_OC6_SetConfig+0xb0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00b      	beq.n	80060f0 <TIM_OC6_SetConfig+0x74>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a15      	ldr	r2, [pc, #84]	; (8006130 <TIM_OC6_SetConfig+0xb4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <TIM_OC6_SetConfig+0x74>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a14      	ldr	r2, [pc, #80]	; (8006134 <TIM_OC6_SetConfig+0xb8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_OC6_SetConfig+0x74>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <TIM_OC6_SetConfig+0xbc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d109      	bne.n	8006104 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800

0800613c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 030a 	bic.w	r3, r3, #10
 8006178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0210 	bic.w	r2, r3, #16
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	f043 0307 	orr.w	r3, r3, #7
 800621c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	431a      	orrs	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2201      	movs	r2, #1
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	43db      	mvns	r3, r3
 8006292:	401a      	ands	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e054      	b.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a24      	ldr	r2, [pc, #144]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006304:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a17      	ldr	r2, [pc, #92]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00e      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d009      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a13      	ldr	r2, [pc, #76]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a11      	ldr	r2, [pc, #68]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d10c      	bne.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4313      	orrs	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40000400 	.word	0x40000400
 8006394:	40014000 	.word	0x40014000

08006398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e060      	b.n	8006476 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	041b      	lsls	r3, r3, #16
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a14      	ldr	r2, [pc, #80]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d115      	bne.n	8006464 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	051b      	lsls	r3, r3, #20
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00

08006488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e040      	b.n	8006558 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb fcd6 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	; 0x24
 80064f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0201 	bic.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8b6 	bl	8006674 <UART_SetConfig>
 8006508:	4603      	mov	r3, r0
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e022      	b.n	8006558 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9e0 	bl	80068e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800652e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800653e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa67 	bl	8006a24 <UART_CheckIdleState>
 8006556:	4603      	mov	r3, r0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af02      	add	r7, sp, #8
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006574:	2b20      	cmp	r3, #32
 8006576:	d178      	bne.n	800666a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_UART_Transmit+0x24>
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e071      	b.n	800666c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2221      	movs	r2, #33	; 0x21
 8006594:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006596:	f7fb fe75 	bl	8002284 <HAL_GetTick>
 800659a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d108      	bne.n	80065c8 <HAL_UART_Transmit+0x68>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	e003      	b.n	80065d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065d0:	e030      	b.n	8006634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fac9 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e03c      	b.n	800666c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	881a      	ldrh	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006604:	b292      	uxth	r2, r2
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	3302      	adds	r3, #2
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	e008      	b.n	8006622 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	b292      	uxth	r2, r2
 800661a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	3301      	adds	r3, #1
 8006620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1c8      	bne.n	80065d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2200      	movs	r2, #0
 8006648:	2140      	movs	r1, #64	; 0x40
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fa92 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e005      	b.n	800666c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e000      	b.n	800666c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800666a:	2302      	movs	r3, #2
  }
}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b8a      	ldr	r3, [pc, #552]	; (80068c8 <UART_SetConfig+0x254>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	6979      	ldr	r1, [r7, #20]
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a78      	ldr	r2, [pc, #480]	; (80068cc <UART_SetConfig+0x258>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d120      	bne.n	8006732 <UART_SetConfig+0xbe>
 80066f0:	4b77      	ldr	r3, [pc, #476]	; (80068d0 <UART_SetConfig+0x25c>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d817      	bhi.n	800672c <UART_SetConfig+0xb8>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x90>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006715 	.word	0x08006715
 8006708:	08006721 	.word	0x08006721
 800670c:	08006727 	.word	0x08006727
 8006710:	0800671b 	.word	0x0800671b
 8006714:	2300      	movs	r3, #0
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e01d      	b.n	8006756 <UART_SetConfig+0xe2>
 800671a:	2302      	movs	r3, #2
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e01a      	b.n	8006756 <UART_SetConfig+0xe2>
 8006720:	2304      	movs	r3, #4
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e017      	b.n	8006756 <UART_SetConfig+0xe2>
 8006726:	2308      	movs	r3, #8
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e014      	b.n	8006756 <UART_SetConfig+0xe2>
 800672c:	2310      	movs	r3, #16
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e011      	b.n	8006756 <UART_SetConfig+0xe2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a67      	ldr	r2, [pc, #412]	; (80068d4 <UART_SetConfig+0x260>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d102      	bne.n	8006742 <UART_SetConfig+0xce>
 800673c:	2300      	movs	r3, #0
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e009      	b.n	8006756 <UART_SetConfig+0xe2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a64      	ldr	r2, [pc, #400]	; (80068d8 <UART_SetConfig+0x264>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d102      	bne.n	8006752 <UART_SetConfig+0xde>
 800674c:	2300      	movs	r3, #0
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e001      	b.n	8006756 <UART_SetConfig+0xe2>
 8006752:	2310      	movs	r3, #16
 8006754:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675e:	d15a      	bne.n	8006816 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006760:	7ffb      	ldrb	r3, [r7, #31]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d827      	bhi.n	80067b6 <UART_SetConfig+0x142>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <UART_SetConfig+0xf8>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006791 	.word	0x08006791
 8006770:	08006799 	.word	0x08006799
 8006774:	080067a1 	.word	0x080067a1
 8006778:	080067b7 	.word	0x080067b7
 800677c:	080067a7 	.word	0x080067a7
 8006780:	080067b7 	.word	0x080067b7
 8006784:	080067b7 	.word	0x080067b7
 8006788:	080067b7 	.word	0x080067b7
 800678c:	080067af 	.word	0x080067af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006790:	f7fe faea 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006794:	61b8      	str	r0, [r7, #24]
        break;
 8006796:	e013      	b.n	80067c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006798:	f7fe fb08 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 800679c:	61b8      	str	r0, [r7, #24]
        break;
 800679e:	e00f      	b.n	80067c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a0:	4b4e      	ldr	r3, [pc, #312]	; (80068dc <UART_SetConfig+0x268>)
 80067a2:	61bb      	str	r3, [r7, #24]
        break;
 80067a4:	e00c      	b.n	80067c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a6:	f7fe fa69 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 80067aa:	61b8      	str	r0, [r7, #24]
        break;
 80067ac:	e008      	b.n	80067c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b2:	61bb      	str	r3, [r7, #24]
        break;
 80067b4:	e004      	b.n	80067c0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	77bb      	strb	r3, [r7, #30]
        break;
 80067be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d074      	beq.n	80068b0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	005a      	lsls	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	441a      	add	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	d916      	bls.n	8006810 <UART_SetConfig+0x19c>
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e8:	d212      	bcs.n	8006810 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f023 030f 	bic.w	r3, r3, #15
 80067f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	b29a      	uxth	r2, r3
 8006800:	89fb      	ldrh	r3, [r7, #14]
 8006802:	4313      	orrs	r3, r2
 8006804:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	89fa      	ldrh	r2, [r7, #14]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e04f      	b.n	80068b0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	77bb      	strb	r3, [r7, #30]
 8006814:	e04c      	b.n	80068b0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006816:	7ffb      	ldrb	r3, [r7, #31]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d828      	bhi.n	800686e <UART_SetConfig+0x1fa>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0x1b0>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fe fa8e 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 800684c:	61b8      	str	r0, [r7, #24]
        break;
 800684e:	e013      	b.n	8006878 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fe faac 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 8006854:	61b8      	str	r0, [r7, #24]
        break;
 8006856:	e00f      	b.n	8006878 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b20      	ldr	r3, [pc, #128]	; (80068dc <UART_SetConfig+0x268>)
 800685a:	61bb      	str	r3, [r7, #24]
        break;
 800685c:	e00c      	b.n	8006878 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fe fa0d 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8006862:	61b8      	str	r0, [r7, #24]
        break;
 8006864:	e008      	b.n	8006878 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686a:	61bb      	str	r3, [r7, #24]
        break;
 800686c:	e004      	b.n	8006878 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	77bb      	strb	r3, [r7, #30]
        break;
 8006876:	bf00      	nop
    }

    if (pclk != 0U)
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	085a      	lsrs	r2, r3, #1
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	441a      	add	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b0f      	cmp	r3, #15
 8006896:	d909      	bls.n	80068ac <UART_SetConfig+0x238>
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689e:	d205      	bcs.n	80068ac <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	e001      	b.n	80068b0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	efff69f3 	.word	0xefff69f3
 80068cc:	40013800 	.word	0x40013800
 80068d0:	40021000 	.word	0x40021000
 80068d4:	40004400 	.word	0x40004400
 80068d8:	40004800 	.word	0x40004800
 80068dc:	007a1200 	.word	0x007a1200

080068e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01a      	beq.n	80069f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069de:	d10a      	bne.n	80069f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b098      	sub	sp, #96	; 0x60
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a34:	f7fb fc26 	bl	8002284 <HAL_GetTick>
 8006a38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d12e      	bne.n	8006aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f88c 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d021      	beq.n	8006aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a76:	653b      	str	r3, [r7, #80]	; 0x50
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a80:	647b      	str	r3, [r7, #68]	; 0x44
 8006a82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e6      	bne.n	8006a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e062      	b.n	8006b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d149      	bne.n	8006b48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006abc:	2200      	movs	r2, #0
 8006abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f856 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d03c      	beq.n	8006b48 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	623b      	str	r3, [r7, #32]
   return(result);
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aec:	633b      	str	r3, [r7, #48]	; 0x30
 8006aee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b20:	61fa      	str	r2, [r7, #28]
 8006b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	69b9      	ldr	r1, [r7, #24]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e5      	bne.n	8006b00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e011      	b.n	8006b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3758      	adds	r7, #88	; 0x58
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b84:	e049      	b.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d045      	beq.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8e:	f7fb fb79 	bl	8002284 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d302      	bcc.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e048      	b.n	8006c3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d031      	beq.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d110      	bne.n	8006be6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f838 	bl	8006c42 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e029      	b.n	8006c3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf4:	d111      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f81e 	bl	8006c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e00f      	b.n	8006c3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4013      	ands	r3, r2
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d0a6      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b095      	sub	sp, #84	; 0x54
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
 8006c6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e6      	bne.n	8006c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d118      	bne.n	8006cea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 0310 	bic.w	r3, r3, #16
 8006ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e6      	bne.n	8006cb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006cfe:	bf00      	nop
 8006d00:	3754      	adds	r7, #84	; 0x54
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <__cvt>:
 8006d0a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0e:	ec55 4b10 	vmov	r4, r5, d0
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	460e      	mov	r6, r1
 8006d16:	4619      	mov	r1, r3
 8006d18:	462b      	mov	r3, r5
 8006d1a:	bfbb      	ittet	lt
 8006d1c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d20:	461d      	movlt	r5, r3
 8006d22:	2300      	movge	r3, #0
 8006d24:	232d      	movlt	r3, #45	; 0x2d
 8006d26:	700b      	strb	r3, [r1, #0]
 8006d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d2a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d2e:	4691      	mov	r9, r2
 8006d30:	f023 0820 	bic.w	r8, r3, #32
 8006d34:	bfbc      	itt	lt
 8006d36:	4622      	movlt	r2, r4
 8006d38:	4614      	movlt	r4, r2
 8006d3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d3e:	d005      	beq.n	8006d4c <__cvt+0x42>
 8006d40:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d44:	d100      	bne.n	8006d48 <__cvt+0x3e>
 8006d46:	3601      	adds	r6, #1
 8006d48:	2102      	movs	r1, #2
 8006d4a:	e000      	b.n	8006d4e <__cvt+0x44>
 8006d4c:	2103      	movs	r1, #3
 8006d4e:	ab03      	add	r3, sp, #12
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	ab02      	add	r3, sp, #8
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	ec45 4b10 	vmov	d0, r4, r5
 8006d5a:	4653      	mov	r3, sl
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	f001 f803 	bl	8007d68 <_dtoa_r>
 8006d62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d66:	4607      	mov	r7, r0
 8006d68:	d102      	bne.n	8006d70 <__cvt+0x66>
 8006d6a:	f019 0f01 	tst.w	r9, #1
 8006d6e:	d022      	beq.n	8006db6 <__cvt+0xac>
 8006d70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d74:	eb07 0906 	add.w	r9, r7, r6
 8006d78:	d110      	bne.n	8006d9c <__cvt+0x92>
 8006d7a:	783b      	ldrb	r3, [r7, #0]
 8006d7c:	2b30      	cmp	r3, #48	; 0x30
 8006d7e:	d10a      	bne.n	8006d96 <__cvt+0x8c>
 8006d80:	2200      	movs	r2, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	4620      	mov	r0, r4
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7f9 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d8c:	b918      	cbnz	r0, 8006d96 <__cvt+0x8c>
 8006d8e:	f1c6 0601 	rsb	r6, r6, #1
 8006d92:	f8ca 6000 	str.w	r6, [sl]
 8006d96:	f8da 3000 	ldr.w	r3, [sl]
 8006d9a:	4499      	add	r9, r3
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da8:	b108      	cbz	r0, 8006dae <__cvt+0xa4>
 8006daa:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dae:	2230      	movs	r2, #48	; 0x30
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	454b      	cmp	r3, r9
 8006db4:	d307      	bcc.n	8006dc6 <__cvt+0xbc>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dba:	1bdb      	subs	r3, r3, r7
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	b004      	add	sp, #16
 8006dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc6:	1c59      	adds	r1, r3, #1
 8006dc8:	9103      	str	r1, [sp, #12]
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e7f0      	b.n	8006db0 <__cvt+0xa6>

08006dce <__exponent>:
 8006dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	bfb8      	it	lt
 8006dd6:	4249      	neglt	r1, r1
 8006dd8:	f803 2b02 	strb.w	r2, [r3], #2
 8006ddc:	bfb4      	ite	lt
 8006dde:	222d      	movlt	r2, #45	; 0x2d
 8006de0:	222b      	movge	r2, #43	; 0x2b
 8006de2:	2909      	cmp	r1, #9
 8006de4:	7042      	strb	r2, [r0, #1]
 8006de6:	dd2a      	ble.n	8006e3e <__exponent+0x70>
 8006de8:	f10d 0207 	add.w	r2, sp, #7
 8006dec:	4617      	mov	r7, r2
 8006dee:	260a      	movs	r6, #10
 8006df0:	4694      	mov	ip, r2
 8006df2:	fb91 f5f6 	sdiv	r5, r1, r6
 8006df6:	fb06 1415 	mls	r4, r6, r5, r1
 8006dfa:	3430      	adds	r4, #48	; 0x30
 8006dfc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e00:	460c      	mov	r4, r1
 8006e02:	2c63      	cmp	r4, #99	; 0x63
 8006e04:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e08:	4629      	mov	r1, r5
 8006e0a:	dcf1      	bgt.n	8006df0 <__exponent+0x22>
 8006e0c:	3130      	adds	r1, #48	; 0x30
 8006e0e:	f1ac 0402 	sub.w	r4, ip, #2
 8006e12:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e16:	1c41      	adds	r1, r0, #1
 8006e18:	4622      	mov	r2, r4
 8006e1a:	42ba      	cmp	r2, r7
 8006e1c:	d30a      	bcc.n	8006e34 <__exponent+0x66>
 8006e1e:	f10d 0209 	add.w	r2, sp, #9
 8006e22:	eba2 020c 	sub.w	r2, r2, ip
 8006e26:	42bc      	cmp	r4, r7
 8006e28:	bf88      	it	hi
 8006e2a:	2200      	movhi	r2, #0
 8006e2c:	4413      	add	r3, r2
 8006e2e:	1a18      	subs	r0, r3, r0
 8006e30:	b003      	add	sp, #12
 8006e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e34:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e38:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e3c:	e7ed      	b.n	8006e1a <__exponent+0x4c>
 8006e3e:	2330      	movs	r3, #48	; 0x30
 8006e40:	3130      	adds	r1, #48	; 0x30
 8006e42:	7083      	strb	r3, [r0, #2]
 8006e44:	70c1      	strb	r1, [r0, #3]
 8006e46:	1d03      	adds	r3, r0, #4
 8006e48:	e7f1      	b.n	8006e2e <__exponent+0x60>
	...

08006e4c <_printf_float>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	ed2d 8b02 	vpush	{d8}
 8006e54:	b08d      	sub	sp, #52	; 0x34
 8006e56:	460c      	mov	r4, r1
 8006e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	461f      	mov	r7, r3
 8006e60:	4605      	mov	r5, r0
 8006e62:	f000 fe7f 	bl	8007b64 <_localeconv_r>
 8006e66:	f8d0 a000 	ldr.w	sl, [r0]
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	f7f9 fa00 	bl	8000270 <strlen>
 8006e70:	2300      	movs	r3, #0
 8006e72:	930a      	str	r3, [sp, #40]	; 0x28
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	9305      	str	r3, [sp, #20]
 8006e78:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e80:	3307      	adds	r3, #7
 8006e82:	f023 0307 	bic.w	r3, r3, #7
 8006e86:	f103 0208 	add.w	r2, r3, #8
 8006e8a:	f8c8 2000 	str.w	r2, [r8]
 8006e8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e96:	9307      	str	r3, [sp, #28]
 8006e98:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e9c:	ee08 0a10 	vmov	s16, r0
 8006ea0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea8:	4b9e      	ldr	r3, [pc, #632]	; (8007124 <_printf_float+0x2d8>)
 8006eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006eae:	f7f9 fe3d 	bl	8000b2c <__aeabi_dcmpun>
 8006eb2:	bb88      	cbnz	r0, 8006f18 <_printf_float+0xcc>
 8006eb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb8:	4b9a      	ldr	r3, [pc, #616]	; (8007124 <_printf_float+0x2d8>)
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebe:	f7f9 fe17 	bl	8000af0 <__aeabi_dcmple>
 8006ec2:	bb48      	cbnz	r0, 8006f18 <_printf_float+0xcc>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fe06 	bl	8000adc <__aeabi_dcmplt>
 8006ed0:	b110      	cbz	r0, 8006ed8 <_printf_float+0x8c>
 8006ed2:	232d      	movs	r3, #45	; 0x2d
 8006ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed8:	4a93      	ldr	r2, [pc, #588]	; (8007128 <_printf_float+0x2dc>)
 8006eda:	4b94      	ldr	r3, [pc, #592]	; (800712c <_printf_float+0x2e0>)
 8006edc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ee0:	bf94      	ite	ls
 8006ee2:	4690      	movls	r8, r2
 8006ee4:	4698      	movhi	r8, r3
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	6123      	str	r3, [r4, #16]
 8006eea:	9b05      	ldr	r3, [sp, #20]
 8006eec:	f023 0304 	bic.w	r3, r3, #4
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	f04f 0900 	mov.w	r9, #0
 8006ef6:	9700      	str	r7, [sp, #0]
 8006ef8:	4633      	mov	r3, r6
 8006efa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006efc:	4621      	mov	r1, r4
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 f9da 	bl	80072b8 <_printf_common>
 8006f04:	3001      	adds	r0, #1
 8006f06:	f040 8090 	bne.w	800702a <_printf_float+0x1de>
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0e:	b00d      	add	sp, #52	; 0x34
 8006f10:	ecbd 8b02 	vpop	{d8}
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fe04 	bl	8000b2c <__aeabi_dcmpun>
 8006f24:	b140      	cbz	r0, 8006f38 <_printf_float+0xec>
 8006f26:	464b      	mov	r3, r9
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bfbc      	itt	lt
 8006f2c:	232d      	movlt	r3, #45	; 0x2d
 8006f2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f32:	4a7f      	ldr	r2, [pc, #508]	; (8007130 <_printf_float+0x2e4>)
 8006f34:	4b7f      	ldr	r3, [pc, #508]	; (8007134 <_printf_float+0x2e8>)
 8006f36:	e7d1      	b.n	8006edc <_printf_float+0x90>
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f3e:	9206      	str	r2, [sp, #24]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	d13f      	bne.n	8006fc4 <_printf_float+0x178>
 8006f44:	2306      	movs	r3, #6
 8006f46:	6063      	str	r3, [r4, #4]
 8006f48:	9b05      	ldr	r3, [sp, #20]
 8006f4a:	6861      	ldr	r1, [r4, #4]
 8006f4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f50:	2300      	movs	r3, #0
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	ab0a      	add	r3, sp, #40	; 0x28
 8006f56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f5a:	ab09      	add	r3, sp, #36	; 0x24
 8006f5c:	ec49 8b10 	vmov	d0, r8, r9
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	6022      	str	r2, [r4, #0]
 8006f64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f7ff fece 	bl	8006d0a <__cvt>
 8006f6e:	9b06      	ldr	r3, [sp, #24]
 8006f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f72:	2b47      	cmp	r3, #71	; 0x47
 8006f74:	4680      	mov	r8, r0
 8006f76:	d108      	bne.n	8006f8a <_printf_float+0x13e>
 8006f78:	1cc8      	adds	r0, r1, #3
 8006f7a:	db02      	blt.n	8006f82 <_printf_float+0x136>
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	dd41      	ble.n	8007006 <_printf_float+0x1ba>
 8006f82:	f1ab 0302 	sub.w	r3, fp, #2
 8006f86:	fa5f fb83 	uxtb.w	fp, r3
 8006f8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f8e:	d820      	bhi.n	8006fd2 <_printf_float+0x186>
 8006f90:	3901      	subs	r1, #1
 8006f92:	465a      	mov	r2, fp
 8006f94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f98:	9109      	str	r1, [sp, #36]	; 0x24
 8006f9a:	f7ff ff18 	bl	8006dce <__exponent>
 8006f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa0:	1813      	adds	r3, r2, r0
 8006fa2:	2a01      	cmp	r2, #1
 8006fa4:	4681      	mov	r9, r0
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	dc02      	bgt.n	8006fb0 <_printf_float+0x164>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	07d2      	lsls	r2, r2, #31
 8006fae:	d501      	bpl.n	8006fb4 <_printf_float+0x168>
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d09c      	beq.n	8006ef6 <_printf_float+0xaa>
 8006fbc:	232d      	movs	r3, #45	; 0x2d
 8006fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc2:	e798      	b.n	8006ef6 <_printf_float+0xaa>
 8006fc4:	9a06      	ldr	r2, [sp, #24]
 8006fc6:	2a47      	cmp	r2, #71	; 0x47
 8006fc8:	d1be      	bne.n	8006f48 <_printf_float+0xfc>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1bc      	bne.n	8006f48 <_printf_float+0xfc>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e7b9      	b.n	8006f46 <_printf_float+0xfa>
 8006fd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fd6:	d118      	bne.n	800700a <_printf_float+0x1be>
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	6863      	ldr	r3, [r4, #4]
 8006fdc:	dd0b      	ble.n	8006ff6 <_printf_float+0x1aa>
 8006fde:	6121      	str	r1, [r4, #16]
 8006fe0:	b913      	cbnz	r3, 8006fe8 <_printf_float+0x19c>
 8006fe2:	6822      	ldr	r2, [r4, #0]
 8006fe4:	07d0      	lsls	r0, r2, #31
 8006fe6:	d502      	bpl.n	8006fee <_printf_float+0x1a2>
 8006fe8:	3301      	adds	r3, #1
 8006fea:	440b      	add	r3, r1
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ff0:	f04f 0900 	mov.w	r9, #0
 8006ff4:	e7de      	b.n	8006fb4 <_printf_float+0x168>
 8006ff6:	b913      	cbnz	r3, 8006ffe <_printf_float+0x1b2>
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	07d2      	lsls	r2, r2, #31
 8006ffc:	d501      	bpl.n	8007002 <_printf_float+0x1b6>
 8006ffe:	3302      	adds	r3, #2
 8007000:	e7f4      	b.n	8006fec <_printf_float+0x1a0>
 8007002:	2301      	movs	r3, #1
 8007004:	e7f2      	b.n	8006fec <_printf_float+0x1a0>
 8007006:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800700a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700c:	4299      	cmp	r1, r3
 800700e:	db05      	blt.n	800701c <_printf_float+0x1d0>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	6121      	str	r1, [r4, #16]
 8007014:	07d8      	lsls	r0, r3, #31
 8007016:	d5ea      	bpl.n	8006fee <_printf_float+0x1a2>
 8007018:	1c4b      	adds	r3, r1, #1
 800701a:	e7e7      	b.n	8006fec <_printf_float+0x1a0>
 800701c:	2900      	cmp	r1, #0
 800701e:	bfd4      	ite	le
 8007020:	f1c1 0202 	rsble	r2, r1, #2
 8007024:	2201      	movgt	r2, #1
 8007026:	4413      	add	r3, r2
 8007028:	e7e0      	b.n	8006fec <_printf_float+0x1a0>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	055a      	lsls	r2, r3, #21
 800702e:	d407      	bmi.n	8007040 <_printf_float+0x1f4>
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	4642      	mov	r2, r8
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	d12c      	bne.n	8007098 <_printf_float+0x24c>
 800703e:	e764      	b.n	8006f0a <_printf_float+0xbe>
 8007040:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007044:	f240 80e0 	bls.w	8007208 <_printf_float+0x3bc>
 8007048:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800704c:	2200      	movs	r2, #0
 800704e:	2300      	movs	r3, #0
 8007050:	f7f9 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007054:	2800      	cmp	r0, #0
 8007056:	d034      	beq.n	80070c2 <_printf_float+0x276>
 8007058:	4a37      	ldr	r2, [pc, #220]	; (8007138 <_printf_float+0x2ec>)
 800705a:	2301      	movs	r3, #1
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f af51 	beq.w	8006f0a <_printf_float+0xbe>
 8007068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800706c:	429a      	cmp	r2, r3
 800706e:	db02      	blt.n	8007076 <_printf_float+0x22a>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07d8      	lsls	r0, r3, #31
 8007074:	d510      	bpl.n	8007098 <_printf_float+0x24c>
 8007076:	ee18 3a10 	vmov	r3, s16
 800707a:	4652      	mov	r2, sl
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	f43f af41 	beq.w	8006f0a <_printf_float+0xbe>
 8007088:	f04f 0800 	mov.w	r8, #0
 800708c:	f104 091a 	add.w	r9, r4, #26
 8007090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007092:	3b01      	subs	r3, #1
 8007094:	4543      	cmp	r3, r8
 8007096:	dc09      	bgt.n	80070ac <_printf_float+0x260>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	079b      	lsls	r3, r3, #30
 800709c:	f100 8107 	bmi.w	80072ae <_printf_float+0x462>
 80070a0:	68e0      	ldr	r0, [r4, #12]
 80070a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a4:	4298      	cmp	r0, r3
 80070a6:	bfb8      	it	lt
 80070a8:	4618      	movlt	r0, r3
 80070aa:	e730      	b.n	8006f0e <_printf_float+0xc2>
 80070ac:	2301      	movs	r3, #1
 80070ae:	464a      	mov	r2, r9
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f af27 	beq.w	8006f0a <_printf_float+0xbe>
 80070bc:	f108 0801 	add.w	r8, r8, #1
 80070c0:	e7e6      	b.n	8007090 <_printf_float+0x244>
 80070c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dc39      	bgt.n	800713c <_printf_float+0x2f0>
 80070c8:	4a1b      	ldr	r2, [pc, #108]	; (8007138 <_printf_float+0x2ec>)
 80070ca:	2301      	movs	r3, #1
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	f43f af19 	beq.w	8006f0a <_printf_float+0xbe>
 80070d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070dc:	4313      	orrs	r3, r2
 80070de:	d102      	bne.n	80070e6 <_printf_float+0x29a>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	07d9      	lsls	r1, r3, #31
 80070e4:	d5d8      	bpl.n	8007098 <_printf_float+0x24c>
 80070e6:	ee18 3a10 	vmov	r3, s16
 80070ea:	4652      	mov	r2, sl
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f af09 	beq.w	8006f0a <_printf_float+0xbe>
 80070f8:	f04f 0900 	mov.w	r9, #0
 80070fc:	f104 0a1a 	add.w	sl, r4, #26
 8007100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007102:	425b      	negs	r3, r3
 8007104:	454b      	cmp	r3, r9
 8007106:	dc01      	bgt.n	800710c <_printf_float+0x2c0>
 8007108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710a:	e792      	b.n	8007032 <_printf_float+0x1e6>
 800710c:	2301      	movs	r3, #1
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f aef7 	beq.w	8006f0a <_printf_float+0xbe>
 800711c:	f109 0901 	add.w	r9, r9, #1
 8007120:	e7ee      	b.n	8007100 <_printf_float+0x2b4>
 8007122:	bf00      	nop
 8007124:	7fefffff 	.word	0x7fefffff
 8007128:	08009950 	.word	0x08009950
 800712c:	08009954 	.word	0x08009954
 8007130:	08009958 	.word	0x08009958
 8007134:	0800995c 	.word	0x0800995c
 8007138:	08009960 	.word	0x08009960
 800713c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800713e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007140:	429a      	cmp	r2, r3
 8007142:	bfa8      	it	ge
 8007144:	461a      	movge	r2, r3
 8007146:	2a00      	cmp	r2, #0
 8007148:	4691      	mov	r9, r2
 800714a:	dc37      	bgt.n	80071bc <_printf_float+0x370>
 800714c:	f04f 0b00 	mov.w	fp, #0
 8007150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007154:	f104 021a 	add.w	r2, r4, #26
 8007158:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	eba3 0309 	sub.w	r3, r3, r9
 8007160:	455b      	cmp	r3, fp
 8007162:	dc33      	bgt.n	80071cc <_printf_float+0x380>
 8007164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007168:	429a      	cmp	r2, r3
 800716a:	db3b      	blt.n	80071e4 <_printf_float+0x398>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	07da      	lsls	r2, r3, #31
 8007170:	d438      	bmi.n	80071e4 <_printf_float+0x398>
 8007172:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007176:	eba2 0903 	sub.w	r9, r2, r3
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	4591      	cmp	r9, r2
 8007180:	bfa8      	it	ge
 8007182:	4691      	movge	r9, r2
 8007184:	f1b9 0f00 	cmp.w	r9, #0
 8007188:	dc35      	bgt.n	80071f6 <_printf_float+0x3aa>
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007192:	f104 0a1a 	add.w	sl, r4, #26
 8007196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	eba3 0309 	sub.w	r3, r3, r9
 80071a0:	4543      	cmp	r3, r8
 80071a2:	f77f af79 	ble.w	8007098 <_printf_float+0x24c>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4652      	mov	r2, sl
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f aeaa 	beq.w	8006f0a <_printf_float+0xbe>
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	e7ec      	b.n	8007196 <_printf_float+0x34a>
 80071bc:	4613      	mov	r3, r2
 80071be:	4631      	mov	r1, r6
 80071c0:	4642      	mov	r2, r8
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	d1c0      	bne.n	800714c <_printf_float+0x300>
 80071ca:	e69e      	b.n	8006f0a <_printf_float+0xbe>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	9205      	str	r2, [sp, #20]
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f43f ae97 	beq.w	8006f0a <_printf_float+0xbe>
 80071dc:	9a05      	ldr	r2, [sp, #20]
 80071de:	f10b 0b01 	add.w	fp, fp, #1
 80071e2:	e7b9      	b.n	8007158 <_printf_float+0x30c>
 80071e4:	ee18 3a10 	vmov	r3, s16
 80071e8:	4652      	mov	r2, sl
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	d1be      	bne.n	8007172 <_printf_float+0x326>
 80071f4:	e689      	b.n	8006f0a <_printf_float+0xbe>
 80071f6:	9a05      	ldr	r2, [sp, #20]
 80071f8:	464b      	mov	r3, r9
 80071fa:	4442      	add	r2, r8
 80071fc:	4631      	mov	r1, r6
 80071fe:	4628      	mov	r0, r5
 8007200:	47b8      	blx	r7
 8007202:	3001      	adds	r0, #1
 8007204:	d1c1      	bne.n	800718a <_printf_float+0x33e>
 8007206:	e680      	b.n	8006f0a <_printf_float+0xbe>
 8007208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800720a:	2a01      	cmp	r2, #1
 800720c:	dc01      	bgt.n	8007212 <_printf_float+0x3c6>
 800720e:	07db      	lsls	r3, r3, #31
 8007210:	d53a      	bpl.n	8007288 <_printf_float+0x43c>
 8007212:	2301      	movs	r3, #1
 8007214:	4642      	mov	r2, r8
 8007216:	4631      	mov	r1, r6
 8007218:	4628      	mov	r0, r5
 800721a:	47b8      	blx	r7
 800721c:	3001      	adds	r0, #1
 800721e:	f43f ae74 	beq.w	8006f0a <_printf_float+0xbe>
 8007222:	ee18 3a10 	vmov	r3, s16
 8007226:	4652      	mov	r2, sl
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f ae6b 	beq.w	8006f0a <_printf_float+0xbe>
 8007234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007238:	2200      	movs	r2, #0
 800723a:	2300      	movs	r3, #0
 800723c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007240:	f7f9 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007244:	b9d8      	cbnz	r0, 800727e <_printf_float+0x432>
 8007246:	f10a 33ff 	add.w	r3, sl, #4294967295
 800724a:	f108 0201 	add.w	r2, r8, #1
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	47b8      	blx	r7
 8007254:	3001      	adds	r0, #1
 8007256:	d10e      	bne.n	8007276 <_printf_float+0x42a>
 8007258:	e657      	b.n	8006f0a <_printf_float+0xbe>
 800725a:	2301      	movs	r3, #1
 800725c:	4652      	mov	r2, sl
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	47b8      	blx	r7
 8007264:	3001      	adds	r0, #1
 8007266:	f43f ae50 	beq.w	8006f0a <_printf_float+0xbe>
 800726a:	f108 0801 	add.w	r8, r8, #1
 800726e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007270:	3b01      	subs	r3, #1
 8007272:	4543      	cmp	r3, r8
 8007274:	dcf1      	bgt.n	800725a <_printf_float+0x40e>
 8007276:	464b      	mov	r3, r9
 8007278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800727c:	e6da      	b.n	8007034 <_printf_float+0x1e8>
 800727e:	f04f 0800 	mov.w	r8, #0
 8007282:	f104 0a1a 	add.w	sl, r4, #26
 8007286:	e7f2      	b.n	800726e <_printf_float+0x422>
 8007288:	2301      	movs	r3, #1
 800728a:	4642      	mov	r2, r8
 800728c:	e7df      	b.n	800724e <_printf_float+0x402>
 800728e:	2301      	movs	r3, #1
 8007290:	464a      	mov	r2, r9
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	47b8      	blx	r7
 8007298:	3001      	adds	r0, #1
 800729a:	f43f ae36 	beq.w	8006f0a <_printf_float+0xbe>
 800729e:	f108 0801 	add.w	r8, r8, #1
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072a6:	1a5b      	subs	r3, r3, r1
 80072a8:	4543      	cmp	r3, r8
 80072aa:	dcf0      	bgt.n	800728e <_printf_float+0x442>
 80072ac:	e6f8      	b.n	80070a0 <_printf_float+0x254>
 80072ae:	f04f 0800 	mov.w	r8, #0
 80072b2:	f104 0919 	add.w	r9, r4, #25
 80072b6:	e7f4      	b.n	80072a2 <_printf_float+0x456>

080072b8 <_printf_common>:
 80072b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072bc:	4616      	mov	r6, r2
 80072be:	4699      	mov	r9, r3
 80072c0:	688a      	ldr	r2, [r1, #8]
 80072c2:	690b      	ldr	r3, [r1, #16]
 80072c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	bfb8      	it	lt
 80072cc:	4613      	movlt	r3, r2
 80072ce:	6033      	str	r3, [r6, #0]
 80072d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072d4:	4607      	mov	r7, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	b10a      	cbz	r2, 80072de <_printf_common+0x26>
 80072da:	3301      	adds	r3, #1
 80072dc:	6033      	str	r3, [r6, #0]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	0699      	lsls	r1, r3, #26
 80072e2:	bf42      	ittt	mi
 80072e4:	6833      	ldrmi	r3, [r6, #0]
 80072e6:	3302      	addmi	r3, #2
 80072e8:	6033      	strmi	r3, [r6, #0]
 80072ea:	6825      	ldr	r5, [r4, #0]
 80072ec:	f015 0506 	ands.w	r5, r5, #6
 80072f0:	d106      	bne.n	8007300 <_printf_common+0x48>
 80072f2:	f104 0a19 	add.w	sl, r4, #25
 80072f6:	68e3      	ldr	r3, [r4, #12]
 80072f8:	6832      	ldr	r2, [r6, #0]
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	42ab      	cmp	r3, r5
 80072fe:	dc26      	bgt.n	800734e <_printf_common+0x96>
 8007300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007304:	1e13      	subs	r3, r2, #0
 8007306:	6822      	ldr	r2, [r4, #0]
 8007308:	bf18      	it	ne
 800730a:	2301      	movne	r3, #1
 800730c:	0692      	lsls	r2, r2, #26
 800730e:	d42b      	bmi.n	8007368 <_printf_common+0xb0>
 8007310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007314:	4649      	mov	r1, r9
 8007316:	4638      	mov	r0, r7
 8007318:	47c0      	blx	r8
 800731a:	3001      	adds	r0, #1
 800731c:	d01e      	beq.n	800735c <_printf_common+0xa4>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	6922      	ldr	r2, [r4, #16]
 8007322:	f003 0306 	and.w	r3, r3, #6
 8007326:	2b04      	cmp	r3, #4
 8007328:	bf02      	ittt	eq
 800732a:	68e5      	ldreq	r5, [r4, #12]
 800732c:	6833      	ldreq	r3, [r6, #0]
 800732e:	1aed      	subeq	r5, r5, r3
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	bf0c      	ite	eq
 8007334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007338:	2500      	movne	r5, #0
 800733a:	4293      	cmp	r3, r2
 800733c:	bfc4      	itt	gt
 800733e:	1a9b      	subgt	r3, r3, r2
 8007340:	18ed      	addgt	r5, r5, r3
 8007342:	2600      	movs	r6, #0
 8007344:	341a      	adds	r4, #26
 8007346:	42b5      	cmp	r5, r6
 8007348:	d11a      	bne.n	8007380 <_printf_common+0xc8>
 800734a:	2000      	movs	r0, #0
 800734c:	e008      	b.n	8007360 <_printf_common+0xa8>
 800734e:	2301      	movs	r3, #1
 8007350:	4652      	mov	r2, sl
 8007352:	4649      	mov	r1, r9
 8007354:	4638      	mov	r0, r7
 8007356:	47c0      	blx	r8
 8007358:	3001      	adds	r0, #1
 800735a:	d103      	bne.n	8007364 <_printf_common+0xac>
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007364:	3501      	adds	r5, #1
 8007366:	e7c6      	b.n	80072f6 <_printf_common+0x3e>
 8007368:	18e1      	adds	r1, r4, r3
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	2030      	movs	r0, #48	; 0x30
 800736e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007372:	4422      	add	r2, r4
 8007374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800737c:	3302      	adds	r3, #2
 800737e:	e7c7      	b.n	8007310 <_printf_common+0x58>
 8007380:	2301      	movs	r3, #1
 8007382:	4622      	mov	r2, r4
 8007384:	4649      	mov	r1, r9
 8007386:	4638      	mov	r0, r7
 8007388:	47c0      	blx	r8
 800738a:	3001      	adds	r0, #1
 800738c:	d0e6      	beq.n	800735c <_printf_common+0xa4>
 800738e:	3601      	adds	r6, #1
 8007390:	e7d9      	b.n	8007346 <_printf_common+0x8e>
	...

08007394 <_printf_i>:
 8007394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	7e0f      	ldrb	r7, [r1, #24]
 800739a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800739c:	2f78      	cmp	r7, #120	; 0x78
 800739e:	4691      	mov	r9, r2
 80073a0:	4680      	mov	r8, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	469a      	mov	sl, r3
 80073a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073aa:	d807      	bhi.n	80073bc <_printf_i+0x28>
 80073ac:	2f62      	cmp	r7, #98	; 0x62
 80073ae:	d80a      	bhi.n	80073c6 <_printf_i+0x32>
 80073b0:	2f00      	cmp	r7, #0
 80073b2:	f000 80d4 	beq.w	800755e <_printf_i+0x1ca>
 80073b6:	2f58      	cmp	r7, #88	; 0x58
 80073b8:	f000 80c0 	beq.w	800753c <_printf_i+0x1a8>
 80073bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073c4:	e03a      	b.n	800743c <_printf_i+0xa8>
 80073c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ca:	2b15      	cmp	r3, #21
 80073cc:	d8f6      	bhi.n	80073bc <_printf_i+0x28>
 80073ce:	a101      	add	r1, pc, #4	; (adr r1, 80073d4 <_printf_i+0x40>)
 80073d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073d4:	0800742d 	.word	0x0800742d
 80073d8:	08007441 	.word	0x08007441
 80073dc:	080073bd 	.word	0x080073bd
 80073e0:	080073bd 	.word	0x080073bd
 80073e4:	080073bd 	.word	0x080073bd
 80073e8:	080073bd 	.word	0x080073bd
 80073ec:	08007441 	.word	0x08007441
 80073f0:	080073bd 	.word	0x080073bd
 80073f4:	080073bd 	.word	0x080073bd
 80073f8:	080073bd 	.word	0x080073bd
 80073fc:	080073bd 	.word	0x080073bd
 8007400:	08007545 	.word	0x08007545
 8007404:	0800746d 	.word	0x0800746d
 8007408:	080074ff 	.word	0x080074ff
 800740c:	080073bd 	.word	0x080073bd
 8007410:	080073bd 	.word	0x080073bd
 8007414:	08007567 	.word	0x08007567
 8007418:	080073bd 	.word	0x080073bd
 800741c:	0800746d 	.word	0x0800746d
 8007420:	080073bd 	.word	0x080073bd
 8007424:	080073bd 	.word	0x080073bd
 8007428:	08007507 	.word	0x08007507
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	1d1a      	adds	r2, r3, #4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	602a      	str	r2, [r5, #0]
 8007434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800743c:	2301      	movs	r3, #1
 800743e:	e09f      	b.n	8007580 <_printf_i+0x1ec>
 8007440:	6820      	ldr	r0, [r4, #0]
 8007442:	682b      	ldr	r3, [r5, #0]
 8007444:	0607      	lsls	r7, r0, #24
 8007446:	f103 0104 	add.w	r1, r3, #4
 800744a:	6029      	str	r1, [r5, #0]
 800744c:	d501      	bpl.n	8007452 <_printf_i+0xbe>
 800744e:	681e      	ldr	r6, [r3, #0]
 8007450:	e003      	b.n	800745a <_printf_i+0xc6>
 8007452:	0646      	lsls	r6, r0, #25
 8007454:	d5fb      	bpl.n	800744e <_printf_i+0xba>
 8007456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800745a:	2e00      	cmp	r6, #0
 800745c:	da03      	bge.n	8007466 <_printf_i+0xd2>
 800745e:	232d      	movs	r3, #45	; 0x2d
 8007460:	4276      	negs	r6, r6
 8007462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007466:	485a      	ldr	r0, [pc, #360]	; (80075d0 <_printf_i+0x23c>)
 8007468:	230a      	movs	r3, #10
 800746a:	e012      	b.n	8007492 <_printf_i+0xfe>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	1d19      	adds	r1, r3, #4
 8007472:	6029      	str	r1, [r5, #0]
 8007474:	0605      	lsls	r5, r0, #24
 8007476:	d501      	bpl.n	800747c <_printf_i+0xe8>
 8007478:	681e      	ldr	r6, [r3, #0]
 800747a:	e002      	b.n	8007482 <_printf_i+0xee>
 800747c:	0641      	lsls	r1, r0, #25
 800747e:	d5fb      	bpl.n	8007478 <_printf_i+0xe4>
 8007480:	881e      	ldrh	r6, [r3, #0]
 8007482:	4853      	ldr	r0, [pc, #332]	; (80075d0 <_printf_i+0x23c>)
 8007484:	2f6f      	cmp	r7, #111	; 0x6f
 8007486:	bf0c      	ite	eq
 8007488:	2308      	moveq	r3, #8
 800748a:	230a      	movne	r3, #10
 800748c:	2100      	movs	r1, #0
 800748e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007492:	6865      	ldr	r5, [r4, #4]
 8007494:	60a5      	str	r5, [r4, #8]
 8007496:	2d00      	cmp	r5, #0
 8007498:	bfa2      	ittt	ge
 800749a:	6821      	ldrge	r1, [r4, #0]
 800749c:	f021 0104 	bicge.w	r1, r1, #4
 80074a0:	6021      	strge	r1, [r4, #0]
 80074a2:	b90e      	cbnz	r6, 80074a8 <_printf_i+0x114>
 80074a4:	2d00      	cmp	r5, #0
 80074a6:	d04b      	beq.n	8007540 <_printf_i+0x1ac>
 80074a8:	4615      	mov	r5, r2
 80074aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80074ae:	fb03 6711 	mls	r7, r3, r1, r6
 80074b2:	5dc7      	ldrb	r7, [r0, r7]
 80074b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074b8:	4637      	mov	r7, r6
 80074ba:	42bb      	cmp	r3, r7
 80074bc:	460e      	mov	r6, r1
 80074be:	d9f4      	bls.n	80074aa <_printf_i+0x116>
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d10b      	bne.n	80074dc <_printf_i+0x148>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	07de      	lsls	r6, r3, #31
 80074c8:	d508      	bpl.n	80074dc <_printf_i+0x148>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	6861      	ldr	r1, [r4, #4]
 80074ce:	4299      	cmp	r1, r3
 80074d0:	bfde      	ittt	le
 80074d2:	2330      	movle	r3, #48	; 0x30
 80074d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074dc:	1b52      	subs	r2, r2, r5
 80074de:	6122      	str	r2, [r4, #16]
 80074e0:	f8cd a000 	str.w	sl, [sp]
 80074e4:	464b      	mov	r3, r9
 80074e6:	aa03      	add	r2, sp, #12
 80074e8:	4621      	mov	r1, r4
 80074ea:	4640      	mov	r0, r8
 80074ec:	f7ff fee4 	bl	80072b8 <_printf_common>
 80074f0:	3001      	adds	r0, #1
 80074f2:	d14a      	bne.n	800758a <_printf_i+0x1f6>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	b004      	add	sp, #16
 80074fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	f043 0320 	orr.w	r3, r3, #32
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	4833      	ldr	r0, [pc, #204]	; (80075d4 <_printf_i+0x240>)
 8007508:	2778      	movs	r7, #120	; 0x78
 800750a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	6829      	ldr	r1, [r5, #0]
 8007512:	061f      	lsls	r7, r3, #24
 8007514:	f851 6b04 	ldr.w	r6, [r1], #4
 8007518:	d402      	bmi.n	8007520 <_printf_i+0x18c>
 800751a:	065f      	lsls	r7, r3, #25
 800751c:	bf48      	it	mi
 800751e:	b2b6      	uxthmi	r6, r6
 8007520:	07df      	lsls	r7, r3, #31
 8007522:	bf48      	it	mi
 8007524:	f043 0320 	orrmi.w	r3, r3, #32
 8007528:	6029      	str	r1, [r5, #0]
 800752a:	bf48      	it	mi
 800752c:	6023      	strmi	r3, [r4, #0]
 800752e:	b91e      	cbnz	r6, 8007538 <_printf_i+0x1a4>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	f023 0320 	bic.w	r3, r3, #32
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	2310      	movs	r3, #16
 800753a:	e7a7      	b.n	800748c <_printf_i+0xf8>
 800753c:	4824      	ldr	r0, [pc, #144]	; (80075d0 <_printf_i+0x23c>)
 800753e:	e7e4      	b.n	800750a <_printf_i+0x176>
 8007540:	4615      	mov	r5, r2
 8007542:	e7bd      	b.n	80074c0 <_printf_i+0x12c>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	6826      	ldr	r6, [r4, #0]
 8007548:	6961      	ldr	r1, [r4, #20]
 800754a:	1d18      	adds	r0, r3, #4
 800754c:	6028      	str	r0, [r5, #0]
 800754e:	0635      	lsls	r5, r6, #24
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	d501      	bpl.n	8007558 <_printf_i+0x1c4>
 8007554:	6019      	str	r1, [r3, #0]
 8007556:	e002      	b.n	800755e <_printf_i+0x1ca>
 8007558:	0670      	lsls	r0, r6, #25
 800755a:	d5fb      	bpl.n	8007554 <_printf_i+0x1c0>
 800755c:	8019      	strh	r1, [r3, #0]
 800755e:	2300      	movs	r3, #0
 8007560:	6123      	str	r3, [r4, #16]
 8007562:	4615      	mov	r5, r2
 8007564:	e7bc      	b.n	80074e0 <_printf_i+0x14c>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	602a      	str	r2, [r5, #0]
 800756c:	681d      	ldr	r5, [r3, #0]
 800756e:	6862      	ldr	r2, [r4, #4]
 8007570:	2100      	movs	r1, #0
 8007572:	4628      	mov	r0, r5
 8007574:	f7f8 fe2c 	bl	80001d0 <memchr>
 8007578:	b108      	cbz	r0, 800757e <_printf_i+0x1ea>
 800757a:	1b40      	subs	r0, r0, r5
 800757c:	6060      	str	r0, [r4, #4]
 800757e:	6863      	ldr	r3, [r4, #4]
 8007580:	6123      	str	r3, [r4, #16]
 8007582:	2300      	movs	r3, #0
 8007584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007588:	e7aa      	b.n	80074e0 <_printf_i+0x14c>
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	462a      	mov	r2, r5
 800758e:	4649      	mov	r1, r9
 8007590:	4640      	mov	r0, r8
 8007592:	47d0      	blx	sl
 8007594:	3001      	adds	r0, #1
 8007596:	d0ad      	beq.n	80074f4 <_printf_i+0x160>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	079b      	lsls	r3, r3, #30
 800759c:	d413      	bmi.n	80075c6 <_printf_i+0x232>
 800759e:	68e0      	ldr	r0, [r4, #12]
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	4298      	cmp	r0, r3
 80075a4:	bfb8      	it	lt
 80075a6:	4618      	movlt	r0, r3
 80075a8:	e7a6      	b.n	80074f8 <_printf_i+0x164>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4632      	mov	r2, r6
 80075ae:	4649      	mov	r1, r9
 80075b0:	4640      	mov	r0, r8
 80075b2:	47d0      	blx	sl
 80075b4:	3001      	adds	r0, #1
 80075b6:	d09d      	beq.n	80074f4 <_printf_i+0x160>
 80075b8:	3501      	adds	r5, #1
 80075ba:	68e3      	ldr	r3, [r4, #12]
 80075bc:	9903      	ldr	r1, [sp, #12]
 80075be:	1a5b      	subs	r3, r3, r1
 80075c0:	42ab      	cmp	r3, r5
 80075c2:	dcf2      	bgt.n	80075aa <_printf_i+0x216>
 80075c4:	e7eb      	b.n	800759e <_printf_i+0x20a>
 80075c6:	2500      	movs	r5, #0
 80075c8:	f104 0619 	add.w	r6, r4, #25
 80075cc:	e7f5      	b.n	80075ba <_printf_i+0x226>
 80075ce:	bf00      	nop
 80075d0:	08009962 	.word	0x08009962
 80075d4:	08009973 	.word	0x08009973

080075d8 <std>:
 80075d8:	2300      	movs	r3, #0
 80075da:	b510      	push	{r4, lr}
 80075dc:	4604      	mov	r4, r0
 80075de:	e9c0 3300 	strd	r3, r3, [r0]
 80075e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075e6:	6083      	str	r3, [r0, #8]
 80075e8:	8181      	strh	r1, [r0, #12]
 80075ea:	6643      	str	r3, [r0, #100]	; 0x64
 80075ec:	81c2      	strh	r2, [r0, #14]
 80075ee:	6183      	str	r3, [r0, #24]
 80075f0:	4619      	mov	r1, r3
 80075f2:	2208      	movs	r2, #8
 80075f4:	305c      	adds	r0, #92	; 0x5c
 80075f6:	f000 faad 	bl	8007b54 <memset>
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <std+0x58>)
 80075fc:	6263      	str	r3, [r4, #36]	; 0x24
 80075fe:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <std+0x5c>)
 8007600:	62a3      	str	r3, [r4, #40]	; 0x28
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <std+0x60>)
 8007604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <std+0x64>)
 8007608:	6323      	str	r3, [r4, #48]	; 0x30
 800760a:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <std+0x68>)
 800760c:	6224      	str	r4, [r4, #32]
 800760e:	429c      	cmp	r4, r3
 8007610:	d006      	beq.n	8007620 <std+0x48>
 8007612:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007616:	4294      	cmp	r4, r2
 8007618:	d002      	beq.n	8007620 <std+0x48>
 800761a:	33d0      	adds	r3, #208	; 0xd0
 800761c:	429c      	cmp	r4, r3
 800761e:	d105      	bne.n	800762c <std+0x54>
 8007620:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007628:	f000 bb10 	b.w	8007c4c <__retarget_lock_init_recursive>
 800762c:	bd10      	pop	{r4, pc}
 800762e:	bf00      	nop
 8007630:	080079a5 	.word	0x080079a5
 8007634:	080079c7 	.word	0x080079c7
 8007638:	080079ff 	.word	0x080079ff
 800763c:	08007a23 	.word	0x08007a23
 8007640:	200004a0 	.word	0x200004a0

08007644 <stdio_exit_handler>:
 8007644:	4a02      	ldr	r2, [pc, #8]	; (8007650 <stdio_exit_handler+0xc>)
 8007646:	4903      	ldr	r1, [pc, #12]	; (8007654 <stdio_exit_handler+0x10>)
 8007648:	4803      	ldr	r0, [pc, #12]	; (8007658 <stdio_exit_handler+0x14>)
 800764a:	f000 b869 	b.w	8007720 <_fwalk_sglue>
 800764e:	bf00      	nop
 8007650:	2000000c 	.word	0x2000000c
 8007654:	080095d9 	.word	0x080095d9
 8007658:	20000018 	.word	0x20000018

0800765c <cleanup_stdio>:
 800765c:	6841      	ldr	r1, [r0, #4]
 800765e:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <cleanup_stdio+0x34>)
 8007660:	4299      	cmp	r1, r3
 8007662:	b510      	push	{r4, lr}
 8007664:	4604      	mov	r4, r0
 8007666:	d001      	beq.n	800766c <cleanup_stdio+0x10>
 8007668:	f001 ffb6 	bl	80095d8 <_fflush_r>
 800766c:	68a1      	ldr	r1, [r4, #8]
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <cleanup_stdio+0x38>)
 8007670:	4299      	cmp	r1, r3
 8007672:	d002      	beq.n	800767a <cleanup_stdio+0x1e>
 8007674:	4620      	mov	r0, r4
 8007676:	f001 ffaf 	bl	80095d8 <_fflush_r>
 800767a:	68e1      	ldr	r1, [r4, #12]
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <cleanup_stdio+0x3c>)
 800767e:	4299      	cmp	r1, r3
 8007680:	d004      	beq.n	800768c <cleanup_stdio+0x30>
 8007682:	4620      	mov	r0, r4
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	f001 bfa6 	b.w	80095d8 <_fflush_r>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	bf00      	nop
 8007690:	200004a0 	.word	0x200004a0
 8007694:	20000508 	.word	0x20000508
 8007698:	20000570 	.word	0x20000570

0800769c <global_stdio_init.part.0>:
 800769c:	b510      	push	{r4, lr}
 800769e:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <global_stdio_init.part.0+0x30>)
 80076a0:	4c0b      	ldr	r4, [pc, #44]	; (80076d0 <global_stdio_init.part.0+0x34>)
 80076a2:	4a0c      	ldr	r2, [pc, #48]	; (80076d4 <global_stdio_init.part.0+0x38>)
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	4620      	mov	r0, r4
 80076a8:	2200      	movs	r2, #0
 80076aa:	2104      	movs	r1, #4
 80076ac:	f7ff ff94 	bl	80075d8 <std>
 80076b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076b4:	2201      	movs	r2, #1
 80076b6:	2109      	movs	r1, #9
 80076b8:	f7ff ff8e 	bl	80075d8 <std>
 80076bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076c0:	2202      	movs	r2, #2
 80076c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c6:	2112      	movs	r1, #18
 80076c8:	f7ff bf86 	b.w	80075d8 <std>
 80076cc:	200005d8 	.word	0x200005d8
 80076d0:	200004a0 	.word	0x200004a0
 80076d4:	08007645 	.word	0x08007645

080076d8 <__sfp_lock_acquire>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__sfp_lock_acquire+0x8>)
 80076da:	f000 bab8 	b.w	8007c4e <__retarget_lock_acquire_recursive>
 80076de:	bf00      	nop
 80076e0:	200005e1 	.word	0x200005e1

080076e4 <__sfp_lock_release>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__sfp_lock_release+0x8>)
 80076e6:	f000 bab3 	b.w	8007c50 <__retarget_lock_release_recursive>
 80076ea:	bf00      	nop
 80076ec:	200005e1 	.word	0x200005e1

080076f0 <__sinit>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4604      	mov	r4, r0
 80076f4:	f7ff fff0 	bl	80076d8 <__sfp_lock_acquire>
 80076f8:	6a23      	ldr	r3, [r4, #32]
 80076fa:	b11b      	cbz	r3, 8007704 <__sinit+0x14>
 80076fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007700:	f7ff bff0 	b.w	80076e4 <__sfp_lock_release>
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <__sinit+0x28>)
 8007706:	6223      	str	r3, [r4, #32]
 8007708:	4b04      	ldr	r3, [pc, #16]	; (800771c <__sinit+0x2c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f5      	bne.n	80076fc <__sinit+0xc>
 8007710:	f7ff ffc4 	bl	800769c <global_stdio_init.part.0>
 8007714:	e7f2      	b.n	80076fc <__sinit+0xc>
 8007716:	bf00      	nop
 8007718:	0800765d 	.word	0x0800765d
 800771c:	200005d8 	.word	0x200005d8

08007720 <_fwalk_sglue>:
 8007720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007724:	4607      	mov	r7, r0
 8007726:	4688      	mov	r8, r1
 8007728:	4614      	mov	r4, r2
 800772a:	2600      	movs	r6, #0
 800772c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007730:	f1b9 0901 	subs.w	r9, r9, #1
 8007734:	d505      	bpl.n	8007742 <_fwalk_sglue+0x22>
 8007736:	6824      	ldr	r4, [r4, #0]
 8007738:	2c00      	cmp	r4, #0
 800773a:	d1f7      	bne.n	800772c <_fwalk_sglue+0xc>
 800773c:	4630      	mov	r0, r6
 800773e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d907      	bls.n	8007758 <_fwalk_sglue+0x38>
 8007748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800774c:	3301      	adds	r3, #1
 800774e:	d003      	beq.n	8007758 <_fwalk_sglue+0x38>
 8007750:	4629      	mov	r1, r5
 8007752:	4638      	mov	r0, r7
 8007754:	47c0      	blx	r8
 8007756:	4306      	orrs	r6, r0
 8007758:	3568      	adds	r5, #104	; 0x68
 800775a:	e7e9      	b.n	8007730 <_fwalk_sglue+0x10>

0800775c <iprintf>:
 800775c:	b40f      	push	{r0, r1, r2, r3}
 800775e:	b507      	push	{r0, r1, r2, lr}
 8007760:	4906      	ldr	r1, [pc, #24]	; (800777c <iprintf+0x20>)
 8007762:	ab04      	add	r3, sp, #16
 8007764:	6808      	ldr	r0, [r1, #0]
 8007766:	f853 2b04 	ldr.w	r2, [r3], #4
 800776a:	6881      	ldr	r1, [r0, #8]
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	f001 fd93 	bl	8009298 <_vfiprintf_r>
 8007772:	b003      	add	sp, #12
 8007774:	f85d eb04 	ldr.w	lr, [sp], #4
 8007778:	b004      	add	sp, #16
 800777a:	4770      	bx	lr
 800777c:	20000064 	.word	0x20000064

08007780 <_puts_r>:
 8007780:	6a03      	ldr	r3, [r0, #32]
 8007782:	b570      	push	{r4, r5, r6, lr}
 8007784:	6884      	ldr	r4, [r0, #8]
 8007786:	4605      	mov	r5, r0
 8007788:	460e      	mov	r6, r1
 800778a:	b90b      	cbnz	r3, 8007790 <_puts_r+0x10>
 800778c:	f7ff ffb0 	bl	80076f0 <__sinit>
 8007790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d405      	bmi.n	80077a2 <_puts_r+0x22>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	0598      	lsls	r0, r3, #22
 800779a:	d402      	bmi.n	80077a2 <_puts_r+0x22>
 800779c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779e:	f000 fa56 	bl	8007c4e <__retarget_lock_acquire_recursive>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	0719      	lsls	r1, r3, #28
 80077a6:	d513      	bpl.n	80077d0 <_puts_r+0x50>
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	b18b      	cbz	r3, 80077d0 <_puts_r+0x50>
 80077ac:	3e01      	subs	r6, #1
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077b4:	3b01      	subs	r3, #1
 80077b6:	60a3      	str	r3, [r4, #8]
 80077b8:	b9e9      	cbnz	r1, 80077f6 <_puts_r+0x76>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da2e      	bge.n	800781c <_puts_r+0x9c>
 80077be:	4622      	mov	r2, r4
 80077c0:	210a      	movs	r1, #10
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 f931 	bl	8007a2a <__swbuf_r>
 80077c8:	3001      	adds	r0, #1
 80077ca:	d007      	beq.n	80077dc <_puts_r+0x5c>
 80077cc:	250a      	movs	r5, #10
 80077ce:	e007      	b.n	80077e0 <_puts_r+0x60>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f966 	bl	8007aa4 <__swsetup_r>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d0e7      	beq.n	80077ac <_puts_r+0x2c>
 80077dc:	f04f 35ff 	mov.w	r5, #4294967295
 80077e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e2:	07da      	lsls	r2, r3, #31
 80077e4:	d405      	bmi.n	80077f2 <_puts_r+0x72>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	059b      	lsls	r3, r3, #22
 80077ea:	d402      	bmi.n	80077f2 <_puts_r+0x72>
 80077ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ee:	f000 fa2f 	bl	8007c50 <__retarget_lock_release_recursive>
 80077f2:	4628      	mov	r0, r5
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	da04      	bge.n	8007804 <_puts_r+0x84>
 80077fa:	69a2      	ldr	r2, [r4, #24]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	dc06      	bgt.n	800780e <_puts_r+0x8e>
 8007800:	290a      	cmp	r1, #10
 8007802:	d004      	beq.n	800780e <_puts_r+0x8e>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	6022      	str	r2, [r4, #0]
 800780a:	7019      	strb	r1, [r3, #0]
 800780c:	e7cf      	b.n	80077ae <_puts_r+0x2e>
 800780e:	4622      	mov	r2, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 f90a 	bl	8007a2a <__swbuf_r>
 8007816:	3001      	adds	r0, #1
 8007818:	d1c9      	bne.n	80077ae <_puts_r+0x2e>
 800781a:	e7df      	b.n	80077dc <_puts_r+0x5c>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	250a      	movs	r5, #10
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	701d      	strb	r5, [r3, #0]
 8007826:	e7db      	b.n	80077e0 <_puts_r+0x60>

08007828 <puts>:
 8007828:	4b02      	ldr	r3, [pc, #8]	; (8007834 <puts+0xc>)
 800782a:	4601      	mov	r1, r0
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f7ff bfa7 	b.w	8007780 <_puts_r>
 8007832:	bf00      	nop
 8007834:	20000064 	.word	0x20000064

08007838 <setbuf>:
 8007838:	fab1 f281 	clz	r2, r1
 800783c:	0952      	lsrs	r2, r2, #5
 800783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007842:	0052      	lsls	r2, r2, #1
 8007844:	f000 b800 	b.w	8007848 <setvbuf>

08007848 <setvbuf>:
 8007848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800784c:	461d      	mov	r5, r3
 800784e:	4b54      	ldr	r3, [pc, #336]	; (80079a0 <setvbuf+0x158>)
 8007850:	681f      	ldr	r7, [r3, #0]
 8007852:	4604      	mov	r4, r0
 8007854:	460e      	mov	r6, r1
 8007856:	4690      	mov	r8, r2
 8007858:	b127      	cbz	r7, 8007864 <setvbuf+0x1c>
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	b913      	cbnz	r3, 8007864 <setvbuf+0x1c>
 800785e:	4638      	mov	r0, r7
 8007860:	f7ff ff46 	bl	80076f0 <__sinit>
 8007864:	f1b8 0f02 	cmp.w	r8, #2
 8007868:	d006      	beq.n	8007878 <setvbuf+0x30>
 800786a:	f1b8 0f01 	cmp.w	r8, #1
 800786e:	f200 8094 	bhi.w	800799a <setvbuf+0x152>
 8007872:	2d00      	cmp	r5, #0
 8007874:	f2c0 8091 	blt.w	800799a <setvbuf+0x152>
 8007878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800787a:	07da      	lsls	r2, r3, #31
 800787c:	d405      	bmi.n	800788a <setvbuf+0x42>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d402      	bmi.n	800788a <setvbuf+0x42>
 8007884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007886:	f000 f9e2 	bl	8007c4e <__retarget_lock_acquire_recursive>
 800788a:	4621      	mov	r1, r4
 800788c:	4638      	mov	r0, r7
 800788e:	f001 fea3 	bl	80095d8 <_fflush_r>
 8007892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007894:	b141      	cbz	r1, 80078a8 <setvbuf+0x60>
 8007896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800789a:	4299      	cmp	r1, r3
 800789c:	d002      	beq.n	80078a4 <setvbuf+0x5c>
 800789e:	4638      	mov	r0, r7
 80078a0:	f001 f854 	bl	800894c <_free_r>
 80078a4:	2300      	movs	r3, #0
 80078a6:	6363      	str	r3, [r4, #52]	; 0x34
 80078a8:	2300      	movs	r3, #0
 80078aa:	61a3      	str	r3, [r4, #24]
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	0618      	lsls	r0, r3, #24
 80078b2:	d503      	bpl.n	80078bc <setvbuf+0x74>
 80078b4:	6921      	ldr	r1, [r4, #16]
 80078b6:	4638      	mov	r0, r7
 80078b8:	f001 f848 	bl	800894c <_free_r>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80078c2:	f023 0303 	bic.w	r3, r3, #3
 80078c6:	f1b8 0f02 	cmp.w	r8, #2
 80078ca:	81a3      	strh	r3, [r4, #12]
 80078cc:	d05f      	beq.n	800798e <setvbuf+0x146>
 80078ce:	ab01      	add	r3, sp, #4
 80078d0:	466a      	mov	r2, sp
 80078d2:	4621      	mov	r1, r4
 80078d4:	4638      	mov	r0, r7
 80078d6:	f001 fea7 	bl	8009628 <__swhatbuf_r>
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	4318      	orrs	r0, r3
 80078de:	81a0      	strh	r0, [r4, #12]
 80078e0:	bb2d      	cbnz	r5, 800792e <setvbuf+0xe6>
 80078e2:	9d00      	ldr	r5, [sp, #0]
 80078e4:	4628      	mov	r0, r5
 80078e6:	f001 f87d 	bl	80089e4 <malloc>
 80078ea:	4606      	mov	r6, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d150      	bne.n	8007992 <setvbuf+0x14a>
 80078f0:	f8dd 9000 	ldr.w	r9, [sp]
 80078f4:	45a9      	cmp	r9, r5
 80078f6:	d13e      	bne.n	8007976 <setvbuf+0x12e>
 80078f8:	f04f 35ff 	mov.w	r5, #4294967295
 80078fc:	2200      	movs	r2, #0
 80078fe:	60a2      	str	r2, [r4, #8]
 8007900:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007904:	6022      	str	r2, [r4, #0]
 8007906:	6122      	str	r2, [r4, #16]
 8007908:	2201      	movs	r2, #1
 800790a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790e:	6162      	str	r2, [r4, #20]
 8007910:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007912:	f043 0302 	orr.w	r3, r3, #2
 8007916:	07d1      	lsls	r1, r2, #31
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	d404      	bmi.n	8007926 <setvbuf+0xde>
 800791c:	059b      	lsls	r3, r3, #22
 800791e:	d402      	bmi.n	8007926 <setvbuf+0xde>
 8007920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007922:	f000 f995 	bl	8007c50 <__retarget_lock_release_recursive>
 8007926:	4628      	mov	r0, r5
 8007928:	b003      	add	sp, #12
 800792a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800792e:	2e00      	cmp	r6, #0
 8007930:	d0d8      	beq.n	80078e4 <setvbuf+0x9c>
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	b913      	cbnz	r3, 800793c <setvbuf+0xf4>
 8007936:	4638      	mov	r0, r7
 8007938:	f7ff feda 	bl	80076f0 <__sinit>
 800793c:	f1b8 0f01 	cmp.w	r8, #1
 8007940:	bf08      	it	eq
 8007942:	89a3      	ldrheq	r3, [r4, #12]
 8007944:	6026      	str	r6, [r4, #0]
 8007946:	bf04      	itt	eq
 8007948:	f043 0301 	orreq.w	r3, r3, #1
 800794c:	81a3      	strheq	r3, [r4, #12]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f013 0208 	ands.w	r2, r3, #8
 8007954:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007958:	d01d      	beq.n	8007996 <setvbuf+0x14e>
 800795a:	07da      	lsls	r2, r3, #31
 800795c:	bf41      	itttt	mi
 800795e:	2200      	movmi	r2, #0
 8007960:	426d      	negmi	r5, r5
 8007962:	60a2      	strmi	r2, [r4, #8]
 8007964:	61a5      	strmi	r5, [r4, #24]
 8007966:	bf58      	it	pl
 8007968:	60a5      	strpl	r5, [r4, #8]
 800796a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800796c:	f015 0501 	ands.w	r5, r5, #1
 8007970:	d0d4      	beq.n	800791c <setvbuf+0xd4>
 8007972:	2500      	movs	r5, #0
 8007974:	e7d7      	b.n	8007926 <setvbuf+0xde>
 8007976:	4648      	mov	r0, r9
 8007978:	f001 f834 	bl	80089e4 <malloc>
 800797c:	4606      	mov	r6, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	d0ba      	beq.n	80078f8 <setvbuf+0xb0>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	464d      	mov	r5, r9
 800798c:	e7d1      	b.n	8007932 <setvbuf+0xea>
 800798e:	2500      	movs	r5, #0
 8007990:	e7b4      	b.n	80078fc <setvbuf+0xb4>
 8007992:	46a9      	mov	r9, r5
 8007994:	e7f5      	b.n	8007982 <setvbuf+0x13a>
 8007996:	60a2      	str	r2, [r4, #8]
 8007998:	e7e7      	b.n	800796a <setvbuf+0x122>
 800799a:	f04f 35ff 	mov.w	r5, #4294967295
 800799e:	e7c2      	b.n	8007926 <setvbuf+0xde>
 80079a0:	20000064 	.word	0x20000064

080079a4 <__sread>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	460c      	mov	r4, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	f000 f900 	bl	8007bb0 <_read_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	bfab      	itete	ge
 80079b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079b6:	89a3      	ldrhlt	r3, [r4, #12]
 80079b8:	181b      	addge	r3, r3, r0
 80079ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079be:	bfac      	ite	ge
 80079c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079c2:	81a3      	strhlt	r3, [r4, #12]
 80079c4:	bd10      	pop	{r4, pc}

080079c6 <__swrite>:
 80079c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	461f      	mov	r7, r3
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	05db      	lsls	r3, r3, #23
 80079d0:	4605      	mov	r5, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	4616      	mov	r6, r2
 80079d6:	d505      	bpl.n	80079e4 <__swrite+0x1e>
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	2302      	movs	r3, #2
 80079de:	2200      	movs	r2, #0
 80079e0:	f000 f8d4 	bl	8007b8c <_lseek_r>
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	4632      	mov	r2, r6
 80079f2:	463b      	mov	r3, r7
 80079f4:	4628      	mov	r0, r5
 80079f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	f000 b8eb 	b.w	8007bd4 <_write_r>

080079fe <__sseek>:
 80079fe:	b510      	push	{r4, lr}
 8007a00:	460c      	mov	r4, r1
 8007a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a06:	f000 f8c1 	bl	8007b8c <_lseek_r>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	bf15      	itete	ne
 8007a10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a1a:	81a3      	strheq	r3, [r4, #12]
 8007a1c:	bf18      	it	ne
 8007a1e:	81a3      	strhne	r3, [r4, #12]
 8007a20:	bd10      	pop	{r4, pc}

08007a22 <__sclose>:
 8007a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a26:	f000 b8a1 	b.w	8007b6c <_close_r>

08007a2a <__swbuf_r>:
 8007a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2c:	460e      	mov	r6, r1
 8007a2e:	4614      	mov	r4, r2
 8007a30:	4605      	mov	r5, r0
 8007a32:	b118      	cbz	r0, 8007a3c <__swbuf_r+0x12>
 8007a34:	6a03      	ldr	r3, [r0, #32]
 8007a36:	b90b      	cbnz	r3, 8007a3c <__swbuf_r+0x12>
 8007a38:	f7ff fe5a 	bl	80076f0 <__sinit>
 8007a3c:	69a3      	ldr	r3, [r4, #24]
 8007a3e:	60a3      	str	r3, [r4, #8]
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	071a      	lsls	r2, r3, #28
 8007a44:	d525      	bpl.n	8007a92 <__swbuf_r+0x68>
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	b31b      	cbz	r3, 8007a92 <__swbuf_r+0x68>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	6922      	ldr	r2, [r4, #16]
 8007a4e:	1a98      	subs	r0, r3, r2
 8007a50:	6963      	ldr	r3, [r4, #20]
 8007a52:	b2f6      	uxtb	r6, r6
 8007a54:	4283      	cmp	r3, r0
 8007a56:	4637      	mov	r7, r6
 8007a58:	dc04      	bgt.n	8007a64 <__swbuf_r+0x3a>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f001 fdbb 	bl	80095d8 <_fflush_r>
 8007a62:	b9e0      	cbnz	r0, 8007a9e <__swbuf_r+0x74>
 8007a64:	68a3      	ldr	r3, [r4, #8]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	6022      	str	r2, [r4, #0]
 8007a70:	701e      	strb	r6, [r3, #0]
 8007a72:	6962      	ldr	r2, [r4, #20]
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d004      	beq.n	8007a84 <__swbuf_r+0x5a>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	07db      	lsls	r3, r3, #31
 8007a7e:	d506      	bpl.n	8007a8e <__swbuf_r+0x64>
 8007a80:	2e0a      	cmp	r6, #10
 8007a82:	d104      	bne.n	8007a8e <__swbuf_r+0x64>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f001 fda6 	bl	80095d8 <_fflush_r>
 8007a8c:	b938      	cbnz	r0, 8007a9e <__swbuf_r+0x74>
 8007a8e:	4638      	mov	r0, r7
 8007a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a92:	4621      	mov	r1, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 f805 	bl	8007aa4 <__swsetup_r>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d0d5      	beq.n	8007a4a <__swbuf_r+0x20>
 8007a9e:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa2:	e7f4      	b.n	8007a8e <__swbuf_r+0x64>

08007aa4 <__swsetup_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4b2a      	ldr	r3, [pc, #168]	; (8007b50 <__swsetup_r+0xac>)
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	460c      	mov	r4, r1
 8007aae:	b118      	cbz	r0, 8007ab8 <__swsetup_r+0x14>
 8007ab0:	6a03      	ldr	r3, [r0, #32]
 8007ab2:	b90b      	cbnz	r3, 8007ab8 <__swsetup_r+0x14>
 8007ab4:	f7ff fe1c 	bl	80076f0 <__sinit>
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007abe:	0718      	lsls	r0, r3, #28
 8007ac0:	d422      	bmi.n	8007b08 <__swsetup_r+0x64>
 8007ac2:	06d9      	lsls	r1, r3, #27
 8007ac4:	d407      	bmi.n	8007ad6 <__swsetup_r+0x32>
 8007ac6:	2309      	movs	r3, #9
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e034      	b.n	8007b40 <__swsetup_r+0x9c>
 8007ad6:	0758      	lsls	r0, r3, #29
 8007ad8:	d512      	bpl.n	8007b00 <__swsetup_r+0x5c>
 8007ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007adc:	b141      	cbz	r1, 8007af0 <__swsetup_r+0x4c>
 8007ade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	d002      	beq.n	8007aec <__swsetup_r+0x48>
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 ff30 	bl	800894c <_free_r>
 8007aec:	2300      	movs	r3, #0
 8007aee:	6363      	str	r3, [r4, #52]	; 0x34
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	2300      	movs	r3, #0
 8007afa:	6063      	str	r3, [r4, #4]
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	f043 0308 	orr.w	r3, r3, #8
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	b94b      	cbnz	r3, 8007b20 <__swsetup_r+0x7c>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b16:	d003      	beq.n	8007b20 <__swsetup_r+0x7c>
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f001 fdaa 	bl	8009674 <__smakebuf_r>
 8007b20:	89a0      	ldrh	r0, [r4, #12]
 8007b22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b26:	f010 0301 	ands.w	r3, r0, #1
 8007b2a:	d00a      	beq.n	8007b42 <__swsetup_r+0x9e>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60a3      	str	r3, [r4, #8]
 8007b30:	6963      	ldr	r3, [r4, #20]
 8007b32:	425b      	negs	r3, r3
 8007b34:	61a3      	str	r3, [r4, #24]
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	b943      	cbnz	r3, 8007b4c <__swsetup_r+0xa8>
 8007b3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b3e:	d1c4      	bne.n	8007aca <__swsetup_r+0x26>
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	0781      	lsls	r1, r0, #30
 8007b44:	bf58      	it	pl
 8007b46:	6963      	ldrpl	r3, [r4, #20]
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	e7f4      	b.n	8007b36 <__swsetup_r+0x92>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e7f7      	b.n	8007b40 <__swsetup_r+0x9c>
 8007b50:	20000064 	.word	0x20000064

08007b54 <memset>:
 8007b54:	4402      	add	r2, r0
 8007b56:	4603      	mov	r3, r0
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d100      	bne.n	8007b5e <memset+0xa>
 8007b5c:	4770      	bx	lr
 8007b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b62:	e7f9      	b.n	8007b58 <memset+0x4>

08007b64 <_localeconv_r>:
 8007b64:	4800      	ldr	r0, [pc, #0]	; (8007b68 <_localeconv_r+0x4>)
 8007b66:	4770      	bx	lr
 8007b68:	20000158 	.word	0x20000158

08007b6c <_close_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	; (8007b88 <_close_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7fa fa83 	bl	8002082 <_close>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_close_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_close_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	200005dc 	.word	0x200005dc

08007b8c <_lseek_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d07      	ldr	r5, [pc, #28]	; (8007bac <_lseek_r+0x20>)
 8007b90:	4604      	mov	r4, r0
 8007b92:	4608      	mov	r0, r1
 8007b94:	4611      	mov	r1, r2
 8007b96:	2200      	movs	r2, #0
 8007b98:	602a      	str	r2, [r5, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f7fa fa98 	bl	80020d0 <_lseek>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_lseek_r+0x1e>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_lseek_r+0x1e>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	200005dc 	.word	0x200005dc

08007bb0 <_read_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d07      	ldr	r5, [pc, #28]	; (8007bd0 <_read_r+0x20>)
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	4608      	mov	r0, r1
 8007bb8:	4611      	mov	r1, r2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	602a      	str	r2, [r5, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f7fa fa26 	bl	8002010 <_read>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_read_r+0x1e>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_read_r+0x1e>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	200005dc 	.word	0x200005dc

08007bd4 <_write_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_write_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7fa fa31 	bl	800204a <_write>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_write_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_write_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	200005dc 	.word	0x200005dc

08007bf8 <__errno>:
 8007bf8:	4b01      	ldr	r3, [pc, #4]	; (8007c00 <__errno+0x8>)
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20000064 	.word	0x20000064

08007c04 <__libc_init_array>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	4d0d      	ldr	r5, [pc, #52]	; (8007c3c <__libc_init_array+0x38>)
 8007c08:	4c0d      	ldr	r4, [pc, #52]	; (8007c40 <__libc_init_array+0x3c>)
 8007c0a:	1b64      	subs	r4, r4, r5
 8007c0c:	10a4      	asrs	r4, r4, #2
 8007c0e:	2600      	movs	r6, #0
 8007c10:	42a6      	cmp	r6, r4
 8007c12:	d109      	bne.n	8007c28 <__libc_init_array+0x24>
 8007c14:	4d0b      	ldr	r5, [pc, #44]	; (8007c44 <__libc_init_array+0x40>)
 8007c16:	4c0c      	ldr	r4, [pc, #48]	; (8007c48 <__libc_init_array+0x44>)
 8007c18:	f001 fe5a 	bl	80098d0 <_init>
 8007c1c:	1b64      	subs	r4, r4, r5
 8007c1e:	10a4      	asrs	r4, r4, #2
 8007c20:	2600      	movs	r6, #0
 8007c22:	42a6      	cmp	r6, r4
 8007c24:	d105      	bne.n	8007c32 <__libc_init_array+0x2e>
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2c:	4798      	blx	r3
 8007c2e:	3601      	adds	r6, #1
 8007c30:	e7ee      	b.n	8007c10 <__libc_init_array+0xc>
 8007c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c36:	4798      	blx	r3
 8007c38:	3601      	adds	r6, #1
 8007c3a:	e7f2      	b.n	8007c22 <__libc_init_array+0x1e>
 8007c3c:	08009cc4 	.word	0x08009cc4
 8007c40:	08009cc4 	.word	0x08009cc4
 8007c44:	08009cc4 	.word	0x08009cc4
 8007c48:	08009cc8 	.word	0x08009cc8

08007c4c <__retarget_lock_init_recursive>:
 8007c4c:	4770      	bx	lr

08007c4e <__retarget_lock_acquire_recursive>:
 8007c4e:	4770      	bx	lr

08007c50 <__retarget_lock_release_recursive>:
 8007c50:	4770      	bx	lr

08007c52 <quorem>:
 8007c52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c56:	6903      	ldr	r3, [r0, #16]
 8007c58:	690c      	ldr	r4, [r1, #16]
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	db7e      	blt.n	8007d5e <quorem+0x10c>
 8007c60:	3c01      	subs	r4, #1
 8007c62:	f101 0814 	add.w	r8, r1, #20
 8007c66:	f100 0514 	add.w	r5, r0, #20
 8007c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c88:	d331      	bcc.n	8007cee <quorem+0x9c>
 8007c8a:	f04f 0e00 	mov.w	lr, #0
 8007c8e:	4640      	mov	r0, r8
 8007c90:	46ac      	mov	ip, r5
 8007c92:	46f2      	mov	sl, lr
 8007c94:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c98:	b293      	uxth	r3, r2
 8007c9a:	fb06 e303 	mla	r3, r6, r3, lr
 8007c9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ca2:	0c1a      	lsrs	r2, r3, #16
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	ebaa 0303 	sub.w	r3, sl, r3
 8007caa:	f8dc a000 	ldr.w	sl, [ip]
 8007cae:	fa13 f38a 	uxtah	r3, r3, sl
 8007cb2:	fb06 220e 	mla	r2, r6, lr, r2
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	9b00      	ldr	r3, [sp, #0]
 8007cba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007cc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ccc:	4581      	cmp	r9, r0
 8007cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cd2:	f84c 3b04 	str.w	r3, [ip], #4
 8007cd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cda:	d2db      	bcs.n	8007c94 <quorem+0x42>
 8007cdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ce0:	b92b      	cbnz	r3, 8007cee <quorem+0x9c>
 8007ce2:	9b01      	ldr	r3, [sp, #4]
 8007ce4:	3b04      	subs	r3, #4
 8007ce6:	429d      	cmp	r5, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	d32c      	bcc.n	8007d46 <quorem+0xf4>
 8007cec:	613c      	str	r4, [r7, #16]
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f001 f9a8 	bl	8009044 <__mcmp>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	db22      	blt.n	8007d3e <quorem+0xec>
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d02:	f8d1 c000 	ldr.w	ip, [r1]
 8007d06:	b293      	uxth	r3, r2
 8007d08:	1ac3      	subs	r3, r0, r3
 8007d0a:	0c12      	lsrs	r2, r2, #16
 8007d0c:	fa13 f38c 	uxtah	r3, r3, ip
 8007d10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007d14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d1e:	45c1      	cmp	r9, r8
 8007d20:	f841 3b04 	str.w	r3, [r1], #4
 8007d24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d28:	d2e9      	bcs.n	8007cfe <quorem+0xac>
 8007d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d32:	b922      	cbnz	r2, 8007d3e <quorem+0xec>
 8007d34:	3b04      	subs	r3, #4
 8007d36:	429d      	cmp	r5, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	d30a      	bcc.n	8007d52 <quorem+0x100>
 8007d3c:	613c      	str	r4, [r7, #16]
 8007d3e:	4630      	mov	r0, r6
 8007d40:	b003      	add	sp, #12
 8007d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	3b04      	subs	r3, #4
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	d1ce      	bne.n	8007cec <quorem+0x9a>
 8007d4e:	3c01      	subs	r4, #1
 8007d50:	e7c9      	b.n	8007ce6 <quorem+0x94>
 8007d52:	6812      	ldr	r2, [r2, #0]
 8007d54:	3b04      	subs	r3, #4
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d1f0      	bne.n	8007d3c <quorem+0xea>
 8007d5a:	3c01      	subs	r4, #1
 8007d5c:	e7eb      	b.n	8007d36 <quorem+0xe4>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e7ee      	b.n	8007d40 <quorem+0xee>
 8007d62:	0000      	movs	r0, r0
 8007d64:	0000      	movs	r0, r0
	...

08007d68 <_dtoa_r>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	ed2d 8b04 	vpush	{d8-d9}
 8007d70:	69c5      	ldr	r5, [r0, #28]
 8007d72:	b093      	sub	sp, #76	; 0x4c
 8007d74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d78:	ec57 6b10 	vmov	r6, r7, d0
 8007d7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d80:	9107      	str	r1, [sp, #28]
 8007d82:	4604      	mov	r4, r0
 8007d84:	920a      	str	r2, [sp, #40]	; 0x28
 8007d86:	930d      	str	r3, [sp, #52]	; 0x34
 8007d88:	b975      	cbnz	r5, 8007da8 <_dtoa_r+0x40>
 8007d8a:	2010      	movs	r0, #16
 8007d8c:	f000 fe2a 	bl	80089e4 <malloc>
 8007d90:	4602      	mov	r2, r0
 8007d92:	61e0      	str	r0, [r4, #28]
 8007d94:	b920      	cbnz	r0, 8007da0 <_dtoa_r+0x38>
 8007d96:	4bae      	ldr	r3, [pc, #696]	; (8008050 <_dtoa_r+0x2e8>)
 8007d98:	21ef      	movs	r1, #239	; 0xef
 8007d9a:	48ae      	ldr	r0, [pc, #696]	; (8008054 <_dtoa_r+0x2ec>)
 8007d9c:	f001 fce6 	bl	800976c <__assert_func>
 8007da0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007da4:	6005      	str	r5, [r0, #0]
 8007da6:	60c5      	str	r5, [r0, #12]
 8007da8:	69e3      	ldr	r3, [r4, #28]
 8007daa:	6819      	ldr	r1, [r3, #0]
 8007dac:	b151      	cbz	r1, 8007dc4 <_dtoa_r+0x5c>
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	604a      	str	r2, [r1, #4]
 8007db2:	2301      	movs	r3, #1
 8007db4:	4093      	lsls	r3, r2
 8007db6:	608b      	str	r3, [r1, #8]
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 ff07 	bl	8008bcc <_Bfree>
 8007dbe:	69e3      	ldr	r3, [r4, #28]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	1e3b      	subs	r3, r7, #0
 8007dc6:	bfbb      	ittet	lt
 8007dc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dcc:	9303      	strlt	r3, [sp, #12]
 8007dce:	2300      	movge	r3, #0
 8007dd0:	2201      	movlt	r2, #1
 8007dd2:	bfac      	ite	ge
 8007dd4:	f8c8 3000 	strge.w	r3, [r8]
 8007dd8:	f8c8 2000 	strlt.w	r2, [r8]
 8007ddc:	4b9e      	ldr	r3, [pc, #632]	; (8008058 <_dtoa_r+0x2f0>)
 8007dde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007de2:	ea33 0308 	bics.w	r3, r3, r8
 8007de6:	d11b      	bne.n	8007e20 <_dtoa_r+0xb8>
 8007de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dea:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007df4:	4333      	orrs	r3, r6
 8007df6:	f000 8593 	beq.w	8008920 <_dtoa_r+0xbb8>
 8007dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dfc:	b963      	cbnz	r3, 8007e18 <_dtoa_r+0xb0>
 8007dfe:	4b97      	ldr	r3, [pc, #604]	; (800805c <_dtoa_r+0x2f4>)
 8007e00:	e027      	b.n	8007e52 <_dtoa_r+0xea>
 8007e02:	4b97      	ldr	r3, [pc, #604]	; (8008060 <_dtoa_r+0x2f8>)
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	9800      	ldr	r0, [sp, #0]
 8007e0e:	b013      	add	sp, #76	; 0x4c
 8007e10:	ecbd 8b04 	vpop	{d8-d9}
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	4b90      	ldr	r3, [pc, #576]	; (800805c <_dtoa_r+0x2f4>)
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	3303      	adds	r3, #3
 8007e1e:	e7f3      	b.n	8007e08 <_dtoa_r+0xa0>
 8007e20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e24:	2200      	movs	r2, #0
 8007e26:	ec51 0b17 	vmov	r0, r1, d7
 8007e2a:	eeb0 8a47 	vmov.f32	s16, s14
 8007e2e:	eef0 8a67 	vmov.f32	s17, s15
 8007e32:	2300      	movs	r3, #0
 8007e34:	f7f8 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e38:	4681      	mov	r9, r0
 8007e3a:	b160      	cbz	r0, 8007e56 <_dtoa_r+0xee>
 8007e3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e3e:	2301      	movs	r3, #1
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8568 	beq.w	800891a <_dtoa_r+0xbb2>
 8007e4a:	4b86      	ldr	r3, [pc, #536]	; (8008064 <_dtoa_r+0x2fc>)
 8007e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	e7da      	b.n	8007e0c <_dtoa_r+0xa4>
 8007e56:	aa10      	add	r2, sp, #64	; 0x40
 8007e58:	a911      	add	r1, sp, #68	; 0x44
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e60:	eef0 0a68 	vmov.f32	s1, s17
 8007e64:	f001 f994 	bl	8009190 <__d2b>
 8007e68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	d07f      	beq.n	8007f72 <_dtoa_r+0x20a>
 8007e72:	ee18 3a90 	vmov	r3, s17
 8007e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007e7e:	ec51 0b18 	vmov	r0, r1, d8
 8007e82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007e8e:	4619      	mov	r1, r3
 8007e90:	2200      	movs	r2, #0
 8007e92:	4b75      	ldr	r3, [pc, #468]	; (8008068 <_dtoa_r+0x300>)
 8007e94:	f7f8 f9f8 	bl	8000288 <__aeabi_dsub>
 8007e98:	a367      	add	r3, pc, #412	; (adr r3, 8008038 <_dtoa_r+0x2d0>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f7f8 fbab 	bl	80005f8 <__aeabi_dmul>
 8007ea2:	a367      	add	r3, pc, #412	; (adr r3, 8008040 <_dtoa_r+0x2d8>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 f9f0 	bl	800028c <__adddf3>
 8007eac:	4606      	mov	r6, r0
 8007eae:	4628      	mov	r0, r5
 8007eb0:	460f      	mov	r7, r1
 8007eb2:	f7f8 fb37 	bl	8000524 <__aeabi_i2d>
 8007eb6:	a364      	add	r3, pc, #400	; (adr r3, 8008048 <_dtoa_r+0x2e0>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f7f8 fb9c 	bl	80005f8 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	f7f8 f9e0 	bl	800028c <__adddf3>
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	f7f8 fe42 	bl	8000b58 <__aeabi_d2iz>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4683      	mov	fp, r0
 8007ed8:	2300      	movs	r3, #0
 8007eda:	4630      	mov	r0, r6
 8007edc:	4639      	mov	r1, r7
 8007ede:	f7f8 fdfd 	bl	8000adc <__aeabi_dcmplt>
 8007ee2:	b148      	cbz	r0, 8007ef8 <_dtoa_r+0x190>
 8007ee4:	4658      	mov	r0, fp
 8007ee6:	f7f8 fb1d 	bl	8000524 <__aeabi_i2d>
 8007eea:	4632      	mov	r2, r6
 8007eec:	463b      	mov	r3, r7
 8007eee:	f7f8 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ef2:	b908      	cbnz	r0, 8007ef8 <_dtoa_r+0x190>
 8007ef4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ef8:	f1bb 0f16 	cmp.w	fp, #22
 8007efc:	d857      	bhi.n	8007fae <_dtoa_r+0x246>
 8007efe:	4b5b      	ldr	r3, [pc, #364]	; (800806c <_dtoa_r+0x304>)
 8007f00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	ec51 0b18 	vmov	r0, r1, d8
 8007f0c:	f7f8 fde6 	bl	8000adc <__aeabi_dcmplt>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d04e      	beq.n	8007fb2 <_dtoa_r+0x24a>
 8007f14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f18:	2300      	movs	r3, #0
 8007f1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f1e:	1b5b      	subs	r3, r3, r5
 8007f20:	1e5a      	subs	r2, r3, #1
 8007f22:	bf45      	ittet	mi
 8007f24:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f28:	9305      	strmi	r3, [sp, #20]
 8007f2a:	2300      	movpl	r3, #0
 8007f2c:	2300      	movmi	r3, #0
 8007f2e:	9206      	str	r2, [sp, #24]
 8007f30:	bf54      	ite	pl
 8007f32:	9305      	strpl	r3, [sp, #20]
 8007f34:	9306      	strmi	r3, [sp, #24]
 8007f36:	f1bb 0f00 	cmp.w	fp, #0
 8007f3a:	db3c      	blt.n	8007fb6 <_dtoa_r+0x24e>
 8007f3c:	9b06      	ldr	r3, [sp, #24]
 8007f3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007f42:	445b      	add	r3, fp
 8007f44:	9306      	str	r3, [sp, #24]
 8007f46:	2300      	movs	r3, #0
 8007f48:	9308      	str	r3, [sp, #32]
 8007f4a:	9b07      	ldr	r3, [sp, #28]
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d868      	bhi.n	8008022 <_dtoa_r+0x2ba>
 8007f50:	2b05      	cmp	r3, #5
 8007f52:	bfc4      	itt	gt
 8007f54:	3b04      	subgt	r3, #4
 8007f56:	9307      	strgt	r3, [sp, #28]
 8007f58:	9b07      	ldr	r3, [sp, #28]
 8007f5a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f5e:	bfcc      	ite	gt
 8007f60:	2500      	movgt	r5, #0
 8007f62:	2501      	movle	r5, #1
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	f200 8085 	bhi.w	8008074 <_dtoa_r+0x30c>
 8007f6a:	e8df f003 	tbb	[pc, r3]
 8007f6e:	3b2e      	.short	0x3b2e
 8007f70:	5839      	.short	0x5839
 8007f72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f76:	441d      	add	r5, r3
 8007f78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	bfc1      	itttt	gt
 8007f80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f84:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007f8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007f90:	bfd6      	itet	le
 8007f92:	f1c3 0320 	rsble	r3, r3, #32
 8007f96:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f9a:	fa06 f003 	lslle.w	r0, r6, r3
 8007f9e:	f7f8 fab1 	bl	8000504 <__aeabi_ui2d>
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007fa8:	3d01      	subs	r5, #1
 8007faa:	920e      	str	r2, [sp, #56]	; 0x38
 8007fac:	e76f      	b.n	8007e8e <_dtoa_r+0x126>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7b3      	b.n	8007f1a <_dtoa_r+0x1b2>
 8007fb2:	900c      	str	r0, [sp, #48]	; 0x30
 8007fb4:	e7b2      	b.n	8007f1c <_dtoa_r+0x1b4>
 8007fb6:	9b05      	ldr	r3, [sp, #20]
 8007fb8:	eba3 030b 	sub.w	r3, r3, fp
 8007fbc:	9305      	str	r3, [sp, #20]
 8007fbe:	f1cb 0300 	rsb	r3, fp, #0
 8007fc2:	9308      	str	r3, [sp, #32]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fc8:	e7bf      	b.n	8007f4a <_dtoa_r+0x1e2>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dc52      	bgt.n	800807a <_dtoa_r+0x312>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	9304      	str	r3, [sp, #16]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8007fde:	e00b      	b.n	8007ff8 <_dtoa_r+0x290>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f3      	b.n	8007fcc <_dtoa_r+0x264>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	445b      	add	r3, fp
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	bfb8      	it	lt
 8007ff6:	2301      	movlt	r3, #1
 8007ff8:	69e0      	ldr	r0, [r4, #28]
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	f102 0614 	add.w	r6, r2, #20
 8008002:	429e      	cmp	r6, r3
 8008004:	d93d      	bls.n	8008082 <_dtoa_r+0x31a>
 8008006:	6041      	str	r1, [r0, #4]
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fd9f 	bl	8008b4c <_Balloc>
 800800e:	9000      	str	r0, [sp, #0]
 8008010:	2800      	cmp	r0, #0
 8008012:	d139      	bne.n	8008088 <_dtoa_r+0x320>
 8008014:	4b16      	ldr	r3, [pc, #88]	; (8008070 <_dtoa_r+0x308>)
 8008016:	4602      	mov	r2, r0
 8008018:	f240 11af 	movw	r1, #431	; 0x1af
 800801c:	e6bd      	b.n	8007d9a <_dtoa_r+0x32>
 800801e:	2301      	movs	r3, #1
 8008020:	e7e1      	b.n	8007fe6 <_dtoa_r+0x27e>
 8008022:	2501      	movs	r5, #1
 8008024:	2300      	movs	r3, #0
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	9509      	str	r5, [sp, #36]	; 0x24
 800802a:	f04f 33ff 	mov.w	r3, #4294967295
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	2200      	movs	r2, #0
 8008034:	2312      	movs	r3, #18
 8008036:	e7d1      	b.n	8007fdc <_dtoa_r+0x274>
 8008038:	636f4361 	.word	0x636f4361
 800803c:	3fd287a7 	.word	0x3fd287a7
 8008040:	8b60c8b3 	.word	0x8b60c8b3
 8008044:	3fc68a28 	.word	0x3fc68a28
 8008048:	509f79fb 	.word	0x509f79fb
 800804c:	3fd34413 	.word	0x3fd34413
 8008050:	08009991 	.word	0x08009991
 8008054:	080099a8 	.word	0x080099a8
 8008058:	7ff00000 	.word	0x7ff00000
 800805c:	0800998d 	.word	0x0800998d
 8008060:	08009984 	.word	0x08009984
 8008064:	08009961 	.word	0x08009961
 8008068:	3ff80000 	.word	0x3ff80000
 800806c:	08009a98 	.word	0x08009a98
 8008070:	08009a00 	.word	0x08009a00
 8008074:	2301      	movs	r3, #1
 8008076:	9309      	str	r3, [sp, #36]	; 0x24
 8008078:	e7d7      	b.n	800802a <_dtoa_r+0x2c2>
 800807a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	e7ba      	b.n	8007ff8 <_dtoa_r+0x290>
 8008082:	3101      	adds	r1, #1
 8008084:	0052      	lsls	r2, r2, #1
 8008086:	e7ba      	b.n	8007ffe <_dtoa_r+0x296>
 8008088:	69e3      	ldr	r3, [r4, #28]
 800808a:	9a00      	ldr	r2, [sp, #0]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	9b04      	ldr	r3, [sp, #16]
 8008090:	2b0e      	cmp	r3, #14
 8008092:	f200 80a8 	bhi.w	80081e6 <_dtoa_r+0x47e>
 8008096:	2d00      	cmp	r5, #0
 8008098:	f000 80a5 	beq.w	80081e6 <_dtoa_r+0x47e>
 800809c:	f1bb 0f00 	cmp.w	fp, #0
 80080a0:	dd38      	ble.n	8008114 <_dtoa_r+0x3ac>
 80080a2:	4bc0      	ldr	r3, [pc, #768]	; (80083a4 <_dtoa_r+0x63c>)
 80080a4:	f00b 020f 	and.w	r2, fp, #15
 80080a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80080b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80080b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80080b8:	d019      	beq.n	80080ee <_dtoa_r+0x386>
 80080ba:	4bbb      	ldr	r3, [pc, #748]	; (80083a8 <_dtoa_r+0x640>)
 80080bc:	ec51 0b18 	vmov	r0, r1, d8
 80080c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080c4:	f7f8 fbc2 	bl	800084c <__aeabi_ddiv>
 80080c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080cc:	f008 080f 	and.w	r8, r8, #15
 80080d0:	2503      	movs	r5, #3
 80080d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80083a8 <_dtoa_r+0x640>
 80080d6:	f1b8 0f00 	cmp.w	r8, #0
 80080da:	d10a      	bne.n	80080f2 <_dtoa_r+0x38a>
 80080dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e0:	4632      	mov	r2, r6
 80080e2:	463b      	mov	r3, r7
 80080e4:	f7f8 fbb2 	bl	800084c <__aeabi_ddiv>
 80080e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ec:	e02b      	b.n	8008146 <_dtoa_r+0x3de>
 80080ee:	2502      	movs	r5, #2
 80080f0:	e7ef      	b.n	80080d2 <_dtoa_r+0x36a>
 80080f2:	f018 0f01 	tst.w	r8, #1
 80080f6:	d008      	beq.n	800810a <_dtoa_r+0x3a2>
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008100:	f7f8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8008104:	3501      	adds	r5, #1
 8008106:	4606      	mov	r6, r0
 8008108:	460f      	mov	r7, r1
 800810a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800810e:	f109 0908 	add.w	r9, r9, #8
 8008112:	e7e0      	b.n	80080d6 <_dtoa_r+0x36e>
 8008114:	f000 809f 	beq.w	8008256 <_dtoa_r+0x4ee>
 8008118:	f1cb 0600 	rsb	r6, fp, #0
 800811c:	4ba1      	ldr	r3, [pc, #644]	; (80083a4 <_dtoa_r+0x63c>)
 800811e:	4fa2      	ldr	r7, [pc, #648]	; (80083a8 <_dtoa_r+0x640>)
 8008120:	f006 020f 	and.w	r2, r6, #15
 8008124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	ec51 0b18 	vmov	r0, r1, d8
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008138:	1136      	asrs	r6, r6, #4
 800813a:	2300      	movs	r3, #0
 800813c:	2502      	movs	r5, #2
 800813e:	2e00      	cmp	r6, #0
 8008140:	d17e      	bne.n	8008240 <_dtoa_r+0x4d8>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1d0      	bne.n	80080e8 <_dtoa_r+0x380>
 8008146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008148:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8084 	beq.w	800825a <_dtoa_r+0x4f2>
 8008152:	4b96      	ldr	r3, [pc, #600]	; (80083ac <_dtoa_r+0x644>)
 8008154:	2200      	movs	r2, #0
 8008156:	4640      	mov	r0, r8
 8008158:	4649      	mov	r1, r9
 800815a:	f7f8 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800815e:	2800      	cmp	r0, #0
 8008160:	d07b      	beq.n	800825a <_dtoa_r+0x4f2>
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d078      	beq.n	800825a <_dtoa_r+0x4f2>
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dd39      	ble.n	80081e2 <_dtoa_r+0x47a>
 800816e:	4b90      	ldr	r3, [pc, #576]	; (80083b0 <_dtoa_r+0x648>)
 8008170:	2200      	movs	r2, #0
 8008172:	4640      	mov	r0, r8
 8008174:	4649      	mov	r1, r9
 8008176:	f7f8 fa3f 	bl	80005f8 <__aeabi_dmul>
 800817a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800817e:	9e01      	ldr	r6, [sp, #4]
 8008180:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008184:	3501      	adds	r5, #1
 8008186:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800818a:	4628      	mov	r0, r5
 800818c:	f7f8 f9ca 	bl	8000524 <__aeabi_i2d>
 8008190:	4642      	mov	r2, r8
 8008192:	464b      	mov	r3, r9
 8008194:	f7f8 fa30 	bl	80005f8 <__aeabi_dmul>
 8008198:	4b86      	ldr	r3, [pc, #536]	; (80083b4 <_dtoa_r+0x64c>)
 800819a:	2200      	movs	r2, #0
 800819c:	f7f8 f876 	bl	800028c <__adddf3>
 80081a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80081a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	d158      	bne.n	8008260 <_dtoa_r+0x4f8>
 80081ae:	4b82      	ldr	r3, [pc, #520]	; (80083b8 <_dtoa_r+0x650>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	4640      	mov	r0, r8
 80081b4:	4649      	mov	r1, r9
 80081b6:	f7f8 f867 	bl	8000288 <__aeabi_dsub>
 80081ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081be:	4680      	mov	r8, r0
 80081c0:	4689      	mov	r9, r1
 80081c2:	f7f8 fca9 	bl	8000b18 <__aeabi_dcmpgt>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f040 8296 	bne.w	80086f8 <_dtoa_r+0x990>
 80081cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80081d0:	4640      	mov	r0, r8
 80081d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081d6:	4649      	mov	r1, r9
 80081d8:	f7f8 fc80 	bl	8000adc <__aeabi_dcmplt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f040 8289 	bne.w	80086f4 <_dtoa_r+0x98c>
 80081e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80081e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f2c0 814e 	blt.w	800848a <_dtoa_r+0x722>
 80081ee:	f1bb 0f0e 	cmp.w	fp, #14
 80081f2:	f300 814a 	bgt.w	800848a <_dtoa_r+0x722>
 80081f6:	4b6b      	ldr	r3, [pc, #428]	; (80083a4 <_dtoa_r+0x63c>)
 80081f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80081fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	f280 80dc 	bge.w	80083c0 <_dtoa_r+0x658>
 8008208:	9b04      	ldr	r3, [sp, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f300 80d8 	bgt.w	80083c0 <_dtoa_r+0x658>
 8008210:	f040 826f 	bne.w	80086f2 <_dtoa_r+0x98a>
 8008214:	4b68      	ldr	r3, [pc, #416]	; (80083b8 <_dtoa_r+0x650>)
 8008216:	2200      	movs	r2, #0
 8008218:	4640      	mov	r0, r8
 800821a:	4649      	mov	r1, r9
 800821c:	f7f8 f9ec 	bl	80005f8 <__aeabi_dmul>
 8008220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008224:	f7f8 fc6e 	bl	8000b04 <__aeabi_dcmpge>
 8008228:	9e04      	ldr	r6, [sp, #16]
 800822a:	4637      	mov	r7, r6
 800822c:	2800      	cmp	r0, #0
 800822e:	f040 8245 	bne.w	80086bc <_dtoa_r+0x954>
 8008232:	9d00      	ldr	r5, [sp, #0]
 8008234:	2331      	movs	r3, #49	; 0x31
 8008236:	f805 3b01 	strb.w	r3, [r5], #1
 800823a:	f10b 0b01 	add.w	fp, fp, #1
 800823e:	e241      	b.n	80086c4 <_dtoa_r+0x95c>
 8008240:	07f2      	lsls	r2, r6, #31
 8008242:	d505      	bpl.n	8008250 <_dtoa_r+0x4e8>
 8008244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008248:	f7f8 f9d6 	bl	80005f8 <__aeabi_dmul>
 800824c:	3501      	adds	r5, #1
 800824e:	2301      	movs	r3, #1
 8008250:	1076      	asrs	r6, r6, #1
 8008252:	3708      	adds	r7, #8
 8008254:	e773      	b.n	800813e <_dtoa_r+0x3d6>
 8008256:	2502      	movs	r5, #2
 8008258:	e775      	b.n	8008146 <_dtoa_r+0x3de>
 800825a:	9e04      	ldr	r6, [sp, #16]
 800825c:	465f      	mov	r7, fp
 800825e:	e792      	b.n	8008186 <_dtoa_r+0x41e>
 8008260:	9900      	ldr	r1, [sp, #0]
 8008262:	4b50      	ldr	r3, [pc, #320]	; (80083a4 <_dtoa_r+0x63c>)
 8008264:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008268:	4431      	add	r1, r6
 800826a:	9102      	str	r1, [sp, #8]
 800826c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800826e:	eeb0 9a47 	vmov.f32	s18, s14
 8008272:	eef0 9a67 	vmov.f32	s19, s15
 8008276:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800827a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800827e:	2900      	cmp	r1, #0
 8008280:	d044      	beq.n	800830c <_dtoa_r+0x5a4>
 8008282:	494e      	ldr	r1, [pc, #312]	; (80083bc <_dtoa_r+0x654>)
 8008284:	2000      	movs	r0, #0
 8008286:	f7f8 fae1 	bl	800084c <__aeabi_ddiv>
 800828a:	ec53 2b19 	vmov	r2, r3, d9
 800828e:	f7f7 fffb 	bl	8000288 <__aeabi_dsub>
 8008292:	9d00      	ldr	r5, [sp, #0]
 8008294:	ec41 0b19 	vmov	d9, r0, r1
 8008298:	4649      	mov	r1, r9
 800829a:	4640      	mov	r0, r8
 800829c:	f7f8 fc5c 	bl	8000b58 <__aeabi_d2iz>
 80082a0:	4606      	mov	r6, r0
 80082a2:	f7f8 f93f 	bl	8000524 <__aeabi_i2d>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f7 ffeb 	bl	8000288 <__aeabi_dsub>
 80082b2:	3630      	adds	r6, #48	; 0x30
 80082b4:	f805 6b01 	strb.w	r6, [r5], #1
 80082b8:	ec53 2b19 	vmov	r2, r3, d9
 80082bc:	4680      	mov	r8, r0
 80082be:	4689      	mov	r9, r1
 80082c0:	f7f8 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d164      	bne.n	8008392 <_dtoa_r+0x62a>
 80082c8:	4642      	mov	r2, r8
 80082ca:	464b      	mov	r3, r9
 80082cc:	4937      	ldr	r1, [pc, #220]	; (80083ac <_dtoa_r+0x644>)
 80082ce:	2000      	movs	r0, #0
 80082d0:	f7f7 ffda 	bl	8000288 <__aeabi_dsub>
 80082d4:	ec53 2b19 	vmov	r2, r3, d9
 80082d8:	f7f8 fc00 	bl	8000adc <__aeabi_dcmplt>
 80082dc:	2800      	cmp	r0, #0
 80082de:	f040 80b6 	bne.w	800844e <_dtoa_r+0x6e6>
 80082e2:	9b02      	ldr	r3, [sp, #8]
 80082e4:	429d      	cmp	r5, r3
 80082e6:	f43f af7c 	beq.w	80081e2 <_dtoa_r+0x47a>
 80082ea:	4b31      	ldr	r3, [pc, #196]	; (80083b0 <_dtoa_r+0x648>)
 80082ec:	ec51 0b19 	vmov	r0, r1, d9
 80082f0:	2200      	movs	r2, #0
 80082f2:	f7f8 f981 	bl	80005f8 <__aeabi_dmul>
 80082f6:	4b2e      	ldr	r3, [pc, #184]	; (80083b0 <_dtoa_r+0x648>)
 80082f8:	ec41 0b19 	vmov	d9, r0, r1
 80082fc:	2200      	movs	r2, #0
 80082fe:	4640      	mov	r0, r8
 8008300:	4649      	mov	r1, r9
 8008302:	f7f8 f979 	bl	80005f8 <__aeabi_dmul>
 8008306:	4680      	mov	r8, r0
 8008308:	4689      	mov	r9, r1
 800830a:	e7c5      	b.n	8008298 <_dtoa_r+0x530>
 800830c:	ec51 0b17 	vmov	r0, r1, d7
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	9b02      	ldr	r3, [sp, #8]
 8008316:	9d00      	ldr	r5, [sp, #0]
 8008318:	930f      	str	r3, [sp, #60]	; 0x3c
 800831a:	ec41 0b19 	vmov	d9, r0, r1
 800831e:	4649      	mov	r1, r9
 8008320:	4640      	mov	r0, r8
 8008322:	f7f8 fc19 	bl	8000b58 <__aeabi_d2iz>
 8008326:	4606      	mov	r6, r0
 8008328:	f7f8 f8fc 	bl	8000524 <__aeabi_i2d>
 800832c:	3630      	adds	r6, #48	; 0x30
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffa7 	bl	8000288 <__aeabi_dsub>
 800833a:	f805 6b01 	strb.w	r6, [r5], #1
 800833e:	9b02      	ldr	r3, [sp, #8]
 8008340:	429d      	cmp	r5, r3
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	f04f 0200 	mov.w	r2, #0
 800834a:	d124      	bne.n	8008396 <_dtoa_r+0x62e>
 800834c:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <_dtoa_r+0x654>)
 800834e:	ec51 0b19 	vmov	r0, r1, d9
 8008352:	f7f7 ff9b 	bl	800028c <__adddf3>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4640      	mov	r0, r8
 800835c:	4649      	mov	r1, r9
 800835e:	f7f8 fbdb 	bl	8000b18 <__aeabi_dcmpgt>
 8008362:	2800      	cmp	r0, #0
 8008364:	d173      	bne.n	800844e <_dtoa_r+0x6e6>
 8008366:	ec53 2b19 	vmov	r2, r3, d9
 800836a:	4914      	ldr	r1, [pc, #80]	; (80083bc <_dtoa_r+0x654>)
 800836c:	2000      	movs	r0, #0
 800836e:	f7f7 ff8b 	bl	8000288 <__aeabi_dsub>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4640      	mov	r0, r8
 8008378:	4649      	mov	r1, r9
 800837a:	f7f8 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	f43f af2f 	beq.w	80081e2 <_dtoa_r+0x47a>
 8008384:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008386:	1e6b      	subs	r3, r5, #1
 8008388:	930f      	str	r3, [sp, #60]	; 0x3c
 800838a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800838e:	2b30      	cmp	r3, #48	; 0x30
 8008390:	d0f8      	beq.n	8008384 <_dtoa_r+0x61c>
 8008392:	46bb      	mov	fp, r7
 8008394:	e04a      	b.n	800842c <_dtoa_r+0x6c4>
 8008396:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <_dtoa_r+0x648>)
 8008398:	f7f8 f92e 	bl	80005f8 <__aeabi_dmul>
 800839c:	4680      	mov	r8, r0
 800839e:	4689      	mov	r9, r1
 80083a0:	e7bd      	b.n	800831e <_dtoa_r+0x5b6>
 80083a2:	bf00      	nop
 80083a4:	08009a98 	.word	0x08009a98
 80083a8:	08009a70 	.word	0x08009a70
 80083ac:	3ff00000 	.word	0x3ff00000
 80083b0:	40240000 	.word	0x40240000
 80083b4:	401c0000 	.word	0x401c0000
 80083b8:	40140000 	.word	0x40140000
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083c4:	9d00      	ldr	r5, [sp, #0]
 80083c6:	4642      	mov	r2, r8
 80083c8:	464b      	mov	r3, r9
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	f7f8 fa3d 	bl	800084c <__aeabi_ddiv>
 80083d2:	f7f8 fbc1 	bl	8000b58 <__aeabi_d2iz>
 80083d6:	9001      	str	r0, [sp, #4]
 80083d8:	f7f8 f8a4 	bl	8000524 <__aeabi_i2d>
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	f7f8 f90a 	bl	80005f8 <__aeabi_dmul>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4630      	mov	r0, r6
 80083ea:	4639      	mov	r1, r7
 80083ec:	f7f7 ff4c 	bl	8000288 <__aeabi_dsub>
 80083f0:	9e01      	ldr	r6, [sp, #4]
 80083f2:	9f04      	ldr	r7, [sp, #16]
 80083f4:	3630      	adds	r6, #48	; 0x30
 80083f6:	f805 6b01 	strb.w	r6, [r5], #1
 80083fa:	9e00      	ldr	r6, [sp, #0]
 80083fc:	1bae      	subs	r6, r5, r6
 80083fe:	42b7      	cmp	r7, r6
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	d134      	bne.n	8008470 <_dtoa_r+0x708>
 8008406:	f7f7 ff41 	bl	800028c <__adddf3>
 800840a:	4642      	mov	r2, r8
 800840c:	464b      	mov	r3, r9
 800840e:	4606      	mov	r6, r0
 8008410:	460f      	mov	r7, r1
 8008412:	f7f8 fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8008416:	b9c8      	cbnz	r0, 800844c <_dtoa_r+0x6e4>
 8008418:	4642      	mov	r2, r8
 800841a:	464b      	mov	r3, r9
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f8 fb52 	bl	8000ac8 <__aeabi_dcmpeq>
 8008424:	b110      	cbz	r0, 800842c <_dtoa_r+0x6c4>
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	07db      	lsls	r3, r3, #31
 800842a:	d40f      	bmi.n	800844c <_dtoa_r+0x6e4>
 800842c:	4651      	mov	r1, sl
 800842e:	4620      	mov	r0, r4
 8008430:	f000 fbcc 	bl	8008bcc <_Bfree>
 8008434:	2300      	movs	r3, #0
 8008436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008438:	702b      	strb	r3, [r5, #0]
 800843a:	f10b 0301 	add.w	r3, fp, #1
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008442:	2b00      	cmp	r3, #0
 8008444:	f43f ace2 	beq.w	8007e0c <_dtoa_r+0xa4>
 8008448:	601d      	str	r5, [r3, #0]
 800844a:	e4df      	b.n	8007e0c <_dtoa_r+0xa4>
 800844c:	465f      	mov	r7, fp
 800844e:	462b      	mov	r3, r5
 8008450:	461d      	mov	r5, r3
 8008452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008456:	2a39      	cmp	r2, #57	; 0x39
 8008458:	d106      	bne.n	8008468 <_dtoa_r+0x700>
 800845a:	9a00      	ldr	r2, [sp, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d1f7      	bne.n	8008450 <_dtoa_r+0x6e8>
 8008460:	9900      	ldr	r1, [sp, #0]
 8008462:	2230      	movs	r2, #48	; 0x30
 8008464:	3701      	adds	r7, #1
 8008466:	700a      	strb	r2, [r1, #0]
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	3201      	adds	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e790      	b.n	8008392 <_dtoa_r+0x62a>
 8008470:	4ba3      	ldr	r3, [pc, #652]	; (8008700 <_dtoa_r+0x998>)
 8008472:	2200      	movs	r2, #0
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f7f8 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008484:	2800      	cmp	r0, #0
 8008486:	d09e      	beq.n	80083c6 <_dtoa_r+0x65e>
 8008488:	e7d0      	b.n	800842c <_dtoa_r+0x6c4>
 800848a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848c:	2a00      	cmp	r2, #0
 800848e:	f000 80ca 	beq.w	8008626 <_dtoa_r+0x8be>
 8008492:	9a07      	ldr	r2, [sp, #28]
 8008494:	2a01      	cmp	r2, #1
 8008496:	f300 80ad 	bgt.w	80085f4 <_dtoa_r+0x88c>
 800849a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849c:	2a00      	cmp	r2, #0
 800849e:	f000 80a5 	beq.w	80085ec <_dtoa_r+0x884>
 80084a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084a6:	9e08      	ldr	r6, [sp, #32]
 80084a8:	9d05      	ldr	r5, [sp, #20]
 80084aa:	9a05      	ldr	r2, [sp, #20]
 80084ac:	441a      	add	r2, r3
 80084ae:	9205      	str	r2, [sp, #20]
 80084b0:	9a06      	ldr	r2, [sp, #24]
 80084b2:	2101      	movs	r1, #1
 80084b4:	441a      	add	r2, r3
 80084b6:	4620      	mov	r0, r4
 80084b8:	9206      	str	r2, [sp, #24]
 80084ba:	f000 fc3d 	bl	8008d38 <__i2b>
 80084be:	4607      	mov	r7, r0
 80084c0:	b165      	cbz	r5, 80084dc <_dtoa_r+0x774>
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd09      	ble.n	80084dc <_dtoa_r+0x774>
 80084c8:	42ab      	cmp	r3, r5
 80084ca:	9a05      	ldr	r2, [sp, #20]
 80084cc:	bfa8      	it	ge
 80084ce:	462b      	movge	r3, r5
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	9205      	str	r2, [sp, #20]
 80084d4:	9a06      	ldr	r2, [sp, #24]
 80084d6:	1aed      	subs	r5, r5, r3
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	9306      	str	r3, [sp, #24]
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	b1f3      	cbz	r3, 800851e <_dtoa_r+0x7b6>
 80084e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80a3 	beq.w	800862e <_dtoa_r+0x8c6>
 80084e8:	2e00      	cmp	r6, #0
 80084ea:	dd10      	ble.n	800850e <_dtoa_r+0x7a6>
 80084ec:	4639      	mov	r1, r7
 80084ee:	4632      	mov	r2, r6
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fce1 	bl	8008eb8 <__pow5mult>
 80084f6:	4652      	mov	r2, sl
 80084f8:	4601      	mov	r1, r0
 80084fa:	4607      	mov	r7, r0
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fc31 	bl	8008d64 <__multiply>
 8008502:	4651      	mov	r1, sl
 8008504:	4680      	mov	r8, r0
 8008506:	4620      	mov	r0, r4
 8008508:	f000 fb60 	bl	8008bcc <_Bfree>
 800850c:	46c2      	mov	sl, r8
 800850e:	9b08      	ldr	r3, [sp, #32]
 8008510:	1b9a      	subs	r2, r3, r6
 8008512:	d004      	beq.n	800851e <_dtoa_r+0x7b6>
 8008514:	4651      	mov	r1, sl
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fcce 	bl	8008eb8 <__pow5mult>
 800851c:	4682      	mov	sl, r0
 800851e:	2101      	movs	r1, #1
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fc09 	bl	8008d38 <__i2b>
 8008526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008528:	2b00      	cmp	r3, #0
 800852a:	4606      	mov	r6, r0
 800852c:	f340 8081 	ble.w	8008632 <_dtoa_r+0x8ca>
 8008530:	461a      	mov	r2, r3
 8008532:	4601      	mov	r1, r0
 8008534:	4620      	mov	r0, r4
 8008536:	f000 fcbf 	bl	8008eb8 <__pow5mult>
 800853a:	9b07      	ldr	r3, [sp, #28]
 800853c:	2b01      	cmp	r3, #1
 800853e:	4606      	mov	r6, r0
 8008540:	dd7a      	ble.n	8008638 <_dtoa_r+0x8d0>
 8008542:	f04f 0800 	mov.w	r8, #0
 8008546:	6933      	ldr	r3, [r6, #16]
 8008548:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800854c:	6918      	ldr	r0, [r3, #16]
 800854e:	f000 fba5 	bl	8008c9c <__hi0bits>
 8008552:	f1c0 0020 	rsb	r0, r0, #32
 8008556:	9b06      	ldr	r3, [sp, #24]
 8008558:	4418      	add	r0, r3
 800855a:	f010 001f 	ands.w	r0, r0, #31
 800855e:	f000 8094 	beq.w	800868a <_dtoa_r+0x922>
 8008562:	f1c0 0320 	rsb	r3, r0, #32
 8008566:	2b04      	cmp	r3, #4
 8008568:	f340 8085 	ble.w	8008676 <_dtoa_r+0x90e>
 800856c:	9b05      	ldr	r3, [sp, #20]
 800856e:	f1c0 001c 	rsb	r0, r0, #28
 8008572:	4403      	add	r3, r0
 8008574:	9305      	str	r3, [sp, #20]
 8008576:	9b06      	ldr	r3, [sp, #24]
 8008578:	4403      	add	r3, r0
 800857a:	4405      	add	r5, r0
 800857c:	9306      	str	r3, [sp, #24]
 800857e:	9b05      	ldr	r3, [sp, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	dd05      	ble.n	8008590 <_dtoa_r+0x828>
 8008584:	4651      	mov	r1, sl
 8008586:	461a      	mov	r2, r3
 8008588:	4620      	mov	r0, r4
 800858a:	f000 fcef 	bl	8008f6c <__lshift>
 800858e:	4682      	mov	sl, r0
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	2b00      	cmp	r3, #0
 8008594:	dd05      	ble.n	80085a2 <_dtoa_r+0x83a>
 8008596:	4631      	mov	r1, r6
 8008598:	461a      	mov	r2, r3
 800859a:	4620      	mov	r0, r4
 800859c:	f000 fce6 	bl	8008f6c <__lshift>
 80085a0:	4606      	mov	r6, r0
 80085a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d072      	beq.n	800868e <_dtoa_r+0x926>
 80085a8:	4631      	mov	r1, r6
 80085aa:	4650      	mov	r0, sl
 80085ac:	f000 fd4a 	bl	8009044 <__mcmp>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	da6c      	bge.n	800868e <_dtoa_r+0x926>
 80085b4:	2300      	movs	r3, #0
 80085b6:	4651      	mov	r1, sl
 80085b8:	220a      	movs	r2, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 fb28 	bl	8008c10 <__multadd>
 80085c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085c6:	4682      	mov	sl, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 81b0 	beq.w	800892e <_dtoa_r+0xbc6>
 80085ce:	2300      	movs	r3, #0
 80085d0:	4639      	mov	r1, r7
 80085d2:	220a      	movs	r2, #10
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fb1b 	bl	8008c10 <__multadd>
 80085da:	9b01      	ldr	r3, [sp, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	4607      	mov	r7, r0
 80085e0:	f300 8096 	bgt.w	8008710 <_dtoa_r+0x9a8>
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	dc59      	bgt.n	800869e <_dtoa_r+0x936>
 80085ea:	e091      	b.n	8008710 <_dtoa_r+0x9a8>
 80085ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085f2:	e758      	b.n	80084a6 <_dtoa_r+0x73e>
 80085f4:	9b04      	ldr	r3, [sp, #16]
 80085f6:	1e5e      	subs	r6, r3, #1
 80085f8:	9b08      	ldr	r3, [sp, #32]
 80085fa:	42b3      	cmp	r3, r6
 80085fc:	bfbf      	itttt	lt
 80085fe:	9b08      	ldrlt	r3, [sp, #32]
 8008600:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008602:	9608      	strlt	r6, [sp, #32]
 8008604:	1af3      	sublt	r3, r6, r3
 8008606:	bfb4      	ite	lt
 8008608:	18d2      	addlt	r2, r2, r3
 800860a:	1b9e      	subge	r6, r3, r6
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	bfbc      	itt	lt
 8008610:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008612:	2600      	movlt	r6, #0
 8008614:	2b00      	cmp	r3, #0
 8008616:	bfb7      	itett	lt
 8008618:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800861c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008620:	1a9d      	sublt	r5, r3, r2
 8008622:	2300      	movlt	r3, #0
 8008624:	e741      	b.n	80084aa <_dtoa_r+0x742>
 8008626:	9e08      	ldr	r6, [sp, #32]
 8008628:	9d05      	ldr	r5, [sp, #20]
 800862a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800862c:	e748      	b.n	80084c0 <_dtoa_r+0x758>
 800862e:	9a08      	ldr	r2, [sp, #32]
 8008630:	e770      	b.n	8008514 <_dtoa_r+0x7ac>
 8008632:	9b07      	ldr	r3, [sp, #28]
 8008634:	2b01      	cmp	r3, #1
 8008636:	dc19      	bgt.n	800866c <_dtoa_r+0x904>
 8008638:	9b02      	ldr	r3, [sp, #8]
 800863a:	b9bb      	cbnz	r3, 800866c <_dtoa_r+0x904>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008642:	b99b      	cbnz	r3, 800866c <_dtoa_r+0x904>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800864a:	0d1b      	lsrs	r3, r3, #20
 800864c:	051b      	lsls	r3, r3, #20
 800864e:	b183      	cbz	r3, 8008672 <_dtoa_r+0x90a>
 8008650:	9b05      	ldr	r3, [sp, #20]
 8008652:	3301      	adds	r3, #1
 8008654:	9305      	str	r3, [sp, #20]
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	3301      	adds	r3, #1
 800865a:	9306      	str	r3, [sp, #24]
 800865c:	f04f 0801 	mov.w	r8, #1
 8008660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008662:	2b00      	cmp	r3, #0
 8008664:	f47f af6f 	bne.w	8008546 <_dtoa_r+0x7de>
 8008668:	2001      	movs	r0, #1
 800866a:	e774      	b.n	8008556 <_dtoa_r+0x7ee>
 800866c:	f04f 0800 	mov.w	r8, #0
 8008670:	e7f6      	b.n	8008660 <_dtoa_r+0x8f8>
 8008672:	4698      	mov	r8, r3
 8008674:	e7f4      	b.n	8008660 <_dtoa_r+0x8f8>
 8008676:	d082      	beq.n	800857e <_dtoa_r+0x816>
 8008678:	9a05      	ldr	r2, [sp, #20]
 800867a:	331c      	adds	r3, #28
 800867c:	441a      	add	r2, r3
 800867e:	9205      	str	r2, [sp, #20]
 8008680:	9a06      	ldr	r2, [sp, #24]
 8008682:	441a      	add	r2, r3
 8008684:	441d      	add	r5, r3
 8008686:	9206      	str	r2, [sp, #24]
 8008688:	e779      	b.n	800857e <_dtoa_r+0x816>
 800868a:	4603      	mov	r3, r0
 800868c:	e7f4      	b.n	8008678 <_dtoa_r+0x910>
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	dc37      	bgt.n	8008704 <_dtoa_r+0x99c>
 8008694:	9b07      	ldr	r3, [sp, #28]
 8008696:	2b02      	cmp	r3, #2
 8008698:	dd34      	ble.n	8008704 <_dtoa_r+0x99c>
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	b963      	cbnz	r3, 80086bc <_dtoa_r+0x954>
 80086a2:	4631      	mov	r1, r6
 80086a4:	2205      	movs	r2, #5
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 fab2 	bl	8008c10 <__multadd>
 80086ac:	4601      	mov	r1, r0
 80086ae:	4606      	mov	r6, r0
 80086b0:	4650      	mov	r0, sl
 80086b2:	f000 fcc7 	bl	8009044 <__mcmp>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f73f adbb 	bgt.w	8008232 <_dtoa_r+0x4ca>
 80086bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086be:	9d00      	ldr	r5, [sp, #0]
 80086c0:	ea6f 0b03 	mvn.w	fp, r3
 80086c4:	f04f 0800 	mov.w	r8, #0
 80086c8:	4631      	mov	r1, r6
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 fa7e 	bl	8008bcc <_Bfree>
 80086d0:	2f00      	cmp	r7, #0
 80086d2:	f43f aeab 	beq.w	800842c <_dtoa_r+0x6c4>
 80086d6:	f1b8 0f00 	cmp.w	r8, #0
 80086da:	d005      	beq.n	80086e8 <_dtoa_r+0x980>
 80086dc:	45b8      	cmp	r8, r7
 80086de:	d003      	beq.n	80086e8 <_dtoa_r+0x980>
 80086e0:	4641      	mov	r1, r8
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fa72 	bl	8008bcc <_Bfree>
 80086e8:	4639      	mov	r1, r7
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fa6e 	bl	8008bcc <_Bfree>
 80086f0:	e69c      	b.n	800842c <_dtoa_r+0x6c4>
 80086f2:	2600      	movs	r6, #0
 80086f4:	4637      	mov	r7, r6
 80086f6:	e7e1      	b.n	80086bc <_dtoa_r+0x954>
 80086f8:	46bb      	mov	fp, r7
 80086fa:	4637      	mov	r7, r6
 80086fc:	e599      	b.n	8008232 <_dtoa_r+0x4ca>
 80086fe:	bf00      	nop
 8008700:	40240000 	.word	0x40240000
 8008704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 80c8 	beq.w	800889c <_dtoa_r+0xb34>
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	2d00      	cmp	r5, #0
 8008712:	dd05      	ble.n	8008720 <_dtoa_r+0x9b8>
 8008714:	4639      	mov	r1, r7
 8008716:	462a      	mov	r2, r5
 8008718:	4620      	mov	r0, r4
 800871a:	f000 fc27 	bl	8008f6c <__lshift>
 800871e:	4607      	mov	r7, r0
 8008720:	f1b8 0f00 	cmp.w	r8, #0
 8008724:	d05b      	beq.n	80087de <_dtoa_r+0xa76>
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fa0f 	bl	8008b4c <_Balloc>
 800872e:	4605      	mov	r5, r0
 8008730:	b928      	cbnz	r0, 800873e <_dtoa_r+0x9d6>
 8008732:	4b83      	ldr	r3, [pc, #524]	; (8008940 <_dtoa_r+0xbd8>)
 8008734:	4602      	mov	r2, r0
 8008736:	f240 21ef 	movw	r1, #751	; 0x2ef
 800873a:	f7ff bb2e 	b.w	8007d9a <_dtoa_r+0x32>
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	3202      	adds	r2, #2
 8008742:	0092      	lsls	r2, r2, #2
 8008744:	f107 010c 	add.w	r1, r7, #12
 8008748:	300c      	adds	r0, #12
 800874a:	f001 f801 	bl	8009750 <memcpy>
 800874e:	2201      	movs	r2, #1
 8008750:	4629      	mov	r1, r5
 8008752:	4620      	mov	r0, r4
 8008754:	f000 fc0a 	bl	8008f6c <__lshift>
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008762:	4413      	add	r3, r2
 8008764:	9308      	str	r3, [sp, #32]
 8008766:	9b02      	ldr	r3, [sp, #8]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	46b8      	mov	r8, r7
 800876e:	9306      	str	r3, [sp, #24]
 8008770:	4607      	mov	r7, r0
 8008772:	9b04      	ldr	r3, [sp, #16]
 8008774:	4631      	mov	r1, r6
 8008776:	3b01      	subs	r3, #1
 8008778:	4650      	mov	r0, sl
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	f7ff fa69 	bl	8007c52 <quorem>
 8008780:	4641      	mov	r1, r8
 8008782:	9002      	str	r0, [sp, #8]
 8008784:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008788:	4650      	mov	r0, sl
 800878a:	f000 fc5b 	bl	8009044 <__mcmp>
 800878e:	463a      	mov	r2, r7
 8008790:	9005      	str	r0, [sp, #20]
 8008792:	4631      	mov	r1, r6
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fc71 	bl	800907c <__mdiff>
 800879a:	68c2      	ldr	r2, [r0, #12]
 800879c:	4605      	mov	r5, r0
 800879e:	bb02      	cbnz	r2, 80087e2 <_dtoa_r+0xa7a>
 80087a0:	4601      	mov	r1, r0
 80087a2:	4650      	mov	r0, sl
 80087a4:	f000 fc4e 	bl	8009044 <__mcmp>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4629      	mov	r1, r5
 80087ac:	4620      	mov	r0, r4
 80087ae:	9209      	str	r2, [sp, #36]	; 0x24
 80087b0:	f000 fa0c 	bl	8008bcc <_Bfree>
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087b8:	9d04      	ldr	r5, [sp, #16]
 80087ba:	ea43 0102 	orr.w	r1, r3, r2
 80087be:	9b06      	ldr	r3, [sp, #24]
 80087c0:	4319      	orrs	r1, r3
 80087c2:	d110      	bne.n	80087e6 <_dtoa_r+0xa7e>
 80087c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087c8:	d029      	beq.n	800881e <_dtoa_r+0xab6>
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd02      	ble.n	80087d6 <_dtoa_r+0xa6e>
 80087d0:	9b02      	ldr	r3, [sp, #8]
 80087d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	f883 9000 	strb.w	r9, [r3]
 80087dc:	e774      	b.n	80086c8 <_dtoa_r+0x960>
 80087de:	4638      	mov	r0, r7
 80087e0:	e7ba      	b.n	8008758 <_dtoa_r+0x9f0>
 80087e2:	2201      	movs	r2, #1
 80087e4:	e7e1      	b.n	80087aa <_dtoa_r+0xa42>
 80087e6:	9b05      	ldr	r3, [sp, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db04      	blt.n	80087f6 <_dtoa_r+0xa8e>
 80087ec:	9907      	ldr	r1, [sp, #28]
 80087ee:	430b      	orrs	r3, r1
 80087f0:	9906      	ldr	r1, [sp, #24]
 80087f2:	430b      	orrs	r3, r1
 80087f4:	d120      	bne.n	8008838 <_dtoa_r+0xad0>
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	dded      	ble.n	80087d6 <_dtoa_r+0xa6e>
 80087fa:	4651      	mov	r1, sl
 80087fc:	2201      	movs	r2, #1
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 fbb4 	bl	8008f6c <__lshift>
 8008804:	4631      	mov	r1, r6
 8008806:	4682      	mov	sl, r0
 8008808:	f000 fc1c 	bl	8009044 <__mcmp>
 800880c:	2800      	cmp	r0, #0
 800880e:	dc03      	bgt.n	8008818 <_dtoa_r+0xab0>
 8008810:	d1e1      	bne.n	80087d6 <_dtoa_r+0xa6e>
 8008812:	f019 0f01 	tst.w	r9, #1
 8008816:	d0de      	beq.n	80087d6 <_dtoa_r+0xa6e>
 8008818:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800881c:	d1d8      	bne.n	80087d0 <_dtoa_r+0xa68>
 800881e:	9a01      	ldr	r2, [sp, #4]
 8008820:	2339      	movs	r3, #57	; 0x39
 8008822:	7013      	strb	r3, [r2, #0]
 8008824:	462b      	mov	r3, r5
 8008826:	461d      	mov	r5, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800882e:	2a39      	cmp	r2, #57	; 0x39
 8008830:	d06c      	beq.n	800890c <_dtoa_r+0xba4>
 8008832:	3201      	adds	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e747      	b.n	80086c8 <_dtoa_r+0x960>
 8008838:	2a00      	cmp	r2, #0
 800883a:	dd07      	ble.n	800884c <_dtoa_r+0xae4>
 800883c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008840:	d0ed      	beq.n	800881e <_dtoa_r+0xab6>
 8008842:	9a01      	ldr	r2, [sp, #4]
 8008844:	f109 0301 	add.w	r3, r9, #1
 8008848:	7013      	strb	r3, [r2, #0]
 800884a:	e73d      	b.n	80086c8 <_dtoa_r+0x960>
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	9a08      	ldr	r2, [sp, #32]
 8008850:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008854:	4293      	cmp	r3, r2
 8008856:	d043      	beq.n	80088e0 <_dtoa_r+0xb78>
 8008858:	4651      	mov	r1, sl
 800885a:	2300      	movs	r3, #0
 800885c:	220a      	movs	r2, #10
 800885e:	4620      	mov	r0, r4
 8008860:	f000 f9d6 	bl	8008c10 <__multadd>
 8008864:	45b8      	cmp	r8, r7
 8008866:	4682      	mov	sl, r0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	f04f 020a 	mov.w	r2, #10
 8008870:	4641      	mov	r1, r8
 8008872:	4620      	mov	r0, r4
 8008874:	d107      	bne.n	8008886 <_dtoa_r+0xb1e>
 8008876:	f000 f9cb 	bl	8008c10 <__multadd>
 800887a:	4680      	mov	r8, r0
 800887c:	4607      	mov	r7, r0
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	3301      	adds	r3, #1
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	e775      	b.n	8008772 <_dtoa_r+0xa0a>
 8008886:	f000 f9c3 	bl	8008c10 <__multadd>
 800888a:	4639      	mov	r1, r7
 800888c:	4680      	mov	r8, r0
 800888e:	2300      	movs	r3, #0
 8008890:	220a      	movs	r2, #10
 8008892:	4620      	mov	r0, r4
 8008894:	f000 f9bc 	bl	8008c10 <__multadd>
 8008898:	4607      	mov	r7, r0
 800889a:	e7f0      	b.n	800887e <_dtoa_r+0xb16>
 800889c:	9b04      	ldr	r3, [sp, #16]
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	9d00      	ldr	r5, [sp, #0]
 80088a2:	4631      	mov	r1, r6
 80088a4:	4650      	mov	r0, sl
 80088a6:	f7ff f9d4 	bl	8007c52 <quorem>
 80088aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	f805 9b01 	strb.w	r9, [r5], #1
 80088b4:	1aea      	subs	r2, r5, r3
 80088b6:	9b01      	ldr	r3, [sp, #4]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	dd07      	ble.n	80088cc <_dtoa_r+0xb64>
 80088bc:	4651      	mov	r1, sl
 80088be:	2300      	movs	r3, #0
 80088c0:	220a      	movs	r2, #10
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f9a4 	bl	8008c10 <__multadd>
 80088c8:	4682      	mov	sl, r0
 80088ca:	e7ea      	b.n	80088a2 <_dtoa_r+0xb3a>
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bfc8      	it	gt
 80088d2:	461d      	movgt	r5, r3
 80088d4:	9b00      	ldr	r3, [sp, #0]
 80088d6:	bfd8      	it	le
 80088d8:	2501      	movle	r5, #1
 80088da:	441d      	add	r5, r3
 80088dc:	f04f 0800 	mov.w	r8, #0
 80088e0:	4651      	mov	r1, sl
 80088e2:	2201      	movs	r2, #1
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fb41 	bl	8008f6c <__lshift>
 80088ea:	4631      	mov	r1, r6
 80088ec:	4682      	mov	sl, r0
 80088ee:	f000 fba9 	bl	8009044 <__mcmp>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	dc96      	bgt.n	8008824 <_dtoa_r+0xabc>
 80088f6:	d102      	bne.n	80088fe <_dtoa_r+0xb96>
 80088f8:	f019 0f01 	tst.w	r9, #1
 80088fc:	d192      	bne.n	8008824 <_dtoa_r+0xabc>
 80088fe:	462b      	mov	r3, r5
 8008900:	461d      	mov	r5, r3
 8008902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008906:	2a30      	cmp	r2, #48	; 0x30
 8008908:	d0fa      	beq.n	8008900 <_dtoa_r+0xb98>
 800890a:	e6dd      	b.n	80086c8 <_dtoa_r+0x960>
 800890c:	9a00      	ldr	r2, [sp, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d189      	bne.n	8008826 <_dtoa_r+0xabe>
 8008912:	f10b 0b01 	add.w	fp, fp, #1
 8008916:	2331      	movs	r3, #49	; 0x31
 8008918:	e796      	b.n	8008848 <_dtoa_r+0xae0>
 800891a:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <_dtoa_r+0xbdc>)
 800891c:	f7ff ba99 	b.w	8007e52 <_dtoa_r+0xea>
 8008920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008922:	2b00      	cmp	r3, #0
 8008924:	f47f aa6d 	bne.w	8007e02 <_dtoa_r+0x9a>
 8008928:	4b07      	ldr	r3, [pc, #28]	; (8008948 <_dtoa_r+0xbe0>)
 800892a:	f7ff ba92 	b.w	8007e52 <_dtoa_r+0xea>
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	dcb5      	bgt.n	80088a0 <_dtoa_r+0xb38>
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	2b02      	cmp	r3, #2
 8008938:	f73f aeb1 	bgt.w	800869e <_dtoa_r+0x936>
 800893c:	e7b0      	b.n	80088a0 <_dtoa_r+0xb38>
 800893e:	bf00      	nop
 8008940:	08009a00 	.word	0x08009a00
 8008944:	08009960 	.word	0x08009960
 8008948:	08009984 	.word	0x08009984

0800894c <_free_r>:
 800894c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800894e:	2900      	cmp	r1, #0
 8008950:	d044      	beq.n	80089dc <_free_r+0x90>
 8008952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008956:	9001      	str	r0, [sp, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f1a1 0404 	sub.w	r4, r1, #4
 800895e:	bfb8      	it	lt
 8008960:	18e4      	addlt	r4, r4, r3
 8008962:	f000 f8e7 	bl	8008b34 <__malloc_lock>
 8008966:	4a1e      	ldr	r2, [pc, #120]	; (80089e0 <_free_r+0x94>)
 8008968:	9801      	ldr	r0, [sp, #4]
 800896a:	6813      	ldr	r3, [r2, #0]
 800896c:	b933      	cbnz	r3, 800897c <_free_r+0x30>
 800896e:	6063      	str	r3, [r4, #4]
 8008970:	6014      	str	r4, [r2, #0]
 8008972:	b003      	add	sp, #12
 8008974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008978:	f000 b8e2 	b.w	8008b40 <__malloc_unlock>
 800897c:	42a3      	cmp	r3, r4
 800897e:	d908      	bls.n	8008992 <_free_r+0x46>
 8008980:	6825      	ldr	r5, [r4, #0]
 8008982:	1961      	adds	r1, r4, r5
 8008984:	428b      	cmp	r3, r1
 8008986:	bf01      	itttt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	1949      	addeq	r1, r1, r5
 800898e:	6021      	streq	r1, [r4, #0]
 8008990:	e7ed      	b.n	800896e <_free_r+0x22>
 8008992:	461a      	mov	r2, r3
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	b10b      	cbz	r3, 800899c <_free_r+0x50>
 8008998:	42a3      	cmp	r3, r4
 800899a:	d9fa      	bls.n	8008992 <_free_r+0x46>
 800899c:	6811      	ldr	r1, [r2, #0]
 800899e:	1855      	adds	r5, r2, r1
 80089a0:	42a5      	cmp	r5, r4
 80089a2:	d10b      	bne.n	80089bc <_free_r+0x70>
 80089a4:	6824      	ldr	r4, [r4, #0]
 80089a6:	4421      	add	r1, r4
 80089a8:	1854      	adds	r4, r2, r1
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	6011      	str	r1, [r2, #0]
 80089ae:	d1e0      	bne.n	8008972 <_free_r+0x26>
 80089b0:	681c      	ldr	r4, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	6053      	str	r3, [r2, #4]
 80089b6:	440c      	add	r4, r1
 80089b8:	6014      	str	r4, [r2, #0]
 80089ba:	e7da      	b.n	8008972 <_free_r+0x26>
 80089bc:	d902      	bls.n	80089c4 <_free_r+0x78>
 80089be:	230c      	movs	r3, #12
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	e7d6      	b.n	8008972 <_free_r+0x26>
 80089c4:	6825      	ldr	r5, [r4, #0]
 80089c6:	1961      	adds	r1, r4, r5
 80089c8:	428b      	cmp	r3, r1
 80089ca:	bf04      	itt	eq
 80089cc:	6819      	ldreq	r1, [r3, #0]
 80089ce:	685b      	ldreq	r3, [r3, #4]
 80089d0:	6063      	str	r3, [r4, #4]
 80089d2:	bf04      	itt	eq
 80089d4:	1949      	addeq	r1, r1, r5
 80089d6:	6021      	streq	r1, [r4, #0]
 80089d8:	6054      	str	r4, [r2, #4]
 80089da:	e7ca      	b.n	8008972 <_free_r+0x26>
 80089dc:	b003      	add	sp, #12
 80089de:	bd30      	pop	{r4, r5, pc}
 80089e0:	200005e4 	.word	0x200005e4

080089e4 <malloc>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <malloc+0xc>)
 80089e6:	4601      	mov	r1, r0
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	f000 b823 	b.w	8008a34 <_malloc_r>
 80089ee:	bf00      	nop
 80089f0:	20000064 	.word	0x20000064

080089f4 <sbrk_aligned>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4e0e      	ldr	r6, [pc, #56]	; (8008a30 <sbrk_aligned+0x3c>)
 80089f8:	460c      	mov	r4, r1
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	4605      	mov	r5, r0
 80089fe:	b911      	cbnz	r1, 8008a06 <sbrk_aligned+0x12>
 8008a00:	f000 fe96 	bl	8009730 <_sbrk_r>
 8008a04:	6030      	str	r0, [r6, #0]
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 fe91 	bl	8009730 <_sbrk_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d00a      	beq.n	8008a28 <sbrk_aligned+0x34>
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d007      	beq.n	8008a2c <sbrk_aligned+0x38>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 fe86 	bl	8009730 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d101      	bne.n	8008a2c <sbrk_aligned+0x38>
 8008a28:	f04f 34ff 	mov.w	r4, #4294967295
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	200005e8 	.word	0x200005e8

08008a34 <_malloc_r>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	1ccd      	adds	r5, r1, #3
 8008a3a:	f025 0503 	bic.w	r5, r5, #3
 8008a3e:	3508      	adds	r5, #8
 8008a40:	2d0c      	cmp	r5, #12
 8008a42:	bf38      	it	cc
 8008a44:	250c      	movcc	r5, #12
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	4607      	mov	r7, r0
 8008a4a:	db01      	blt.n	8008a50 <_malloc_r+0x1c>
 8008a4c:	42a9      	cmp	r1, r5
 8008a4e:	d905      	bls.n	8008a5c <_malloc_r+0x28>
 8008a50:	230c      	movs	r3, #12
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	2600      	movs	r6, #0
 8008a56:	4630      	mov	r0, r6
 8008a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b30 <_malloc_r+0xfc>
 8008a60:	f000 f868 	bl	8008b34 <__malloc_lock>
 8008a64:	f8d8 3000 	ldr.w	r3, [r8]
 8008a68:	461c      	mov	r4, r3
 8008a6a:	bb5c      	cbnz	r4, 8008ac4 <_malloc_r+0x90>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f7ff ffc0 	bl	80089f4 <sbrk_aligned>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	4604      	mov	r4, r0
 8008a78:	d155      	bne.n	8008b26 <_malloc_r+0xf2>
 8008a7a:	f8d8 4000 	ldr.w	r4, [r8]
 8008a7e:	4626      	mov	r6, r4
 8008a80:	2e00      	cmp	r6, #0
 8008a82:	d145      	bne.n	8008b10 <_malloc_r+0xdc>
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	d048      	beq.n	8008b1a <_malloc_r+0xe6>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	eb04 0903 	add.w	r9, r4, r3
 8008a92:	f000 fe4d 	bl	8009730 <_sbrk_r>
 8008a96:	4581      	cmp	r9, r0
 8008a98:	d13f      	bne.n	8008b1a <_malloc_r+0xe6>
 8008a9a:	6821      	ldr	r1, [r4, #0]
 8008a9c:	1a6d      	subs	r5, r5, r1
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7ff ffa7 	bl	80089f4 <sbrk_aligned>
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d037      	beq.n	8008b1a <_malloc_r+0xe6>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	442b      	add	r3, r5
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d038      	beq.n	8008b2a <_malloc_r+0xf6>
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	42a2      	cmp	r2, r4
 8008abc:	d12b      	bne.n	8008b16 <_malloc_r+0xe2>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	605a      	str	r2, [r3, #4]
 8008ac2:	e00f      	b.n	8008ae4 <_malloc_r+0xb0>
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	1b52      	subs	r2, r2, r5
 8008ac8:	d41f      	bmi.n	8008b0a <_malloc_r+0xd6>
 8008aca:	2a0b      	cmp	r2, #11
 8008acc:	d917      	bls.n	8008afe <_malloc_r+0xca>
 8008ace:	1961      	adds	r1, r4, r5
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	6025      	str	r5, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	6059      	strne	r1, [r3, #4]
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	bf08      	it	eq
 8008adc:	f8c8 1000 	streq.w	r1, [r8]
 8008ae0:	5162      	str	r2, [r4, r5]
 8008ae2:	604b      	str	r3, [r1, #4]
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f104 060b 	add.w	r6, r4, #11
 8008aea:	f000 f829 	bl	8008b40 <__malloc_unlock>
 8008aee:	f026 0607 	bic.w	r6, r6, #7
 8008af2:	1d23      	adds	r3, r4, #4
 8008af4:	1af2      	subs	r2, r6, r3
 8008af6:	d0ae      	beq.n	8008a56 <_malloc_r+0x22>
 8008af8:	1b9b      	subs	r3, r3, r6
 8008afa:	50a3      	str	r3, [r4, r2]
 8008afc:	e7ab      	b.n	8008a56 <_malloc_r+0x22>
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	6862      	ldr	r2, [r4, #4]
 8008b02:	d1dd      	bne.n	8008ac0 <_malloc_r+0x8c>
 8008b04:	f8c8 2000 	str.w	r2, [r8]
 8008b08:	e7ec      	b.n	8008ae4 <_malloc_r+0xb0>
 8008b0a:	4623      	mov	r3, r4
 8008b0c:	6864      	ldr	r4, [r4, #4]
 8008b0e:	e7ac      	b.n	8008a6a <_malloc_r+0x36>
 8008b10:	4634      	mov	r4, r6
 8008b12:	6876      	ldr	r6, [r6, #4]
 8008b14:	e7b4      	b.n	8008a80 <_malloc_r+0x4c>
 8008b16:	4613      	mov	r3, r2
 8008b18:	e7cc      	b.n	8008ab4 <_malloc_r+0x80>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f000 f80e 	bl	8008b40 <__malloc_unlock>
 8008b24:	e797      	b.n	8008a56 <_malloc_r+0x22>
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	e7dc      	b.n	8008ae4 <_malloc_r+0xb0>
 8008b2a:	605b      	str	r3, [r3, #4]
 8008b2c:	deff      	udf	#255	; 0xff
 8008b2e:	bf00      	nop
 8008b30:	200005e4 	.word	0x200005e4

08008b34 <__malloc_lock>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__malloc_lock+0x8>)
 8008b36:	f7ff b88a 	b.w	8007c4e <__retarget_lock_acquire_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	200005e0 	.word	0x200005e0

08008b40 <__malloc_unlock>:
 8008b40:	4801      	ldr	r0, [pc, #4]	; (8008b48 <__malloc_unlock+0x8>)
 8008b42:	f7ff b885 	b.w	8007c50 <__retarget_lock_release_recursive>
 8008b46:	bf00      	nop
 8008b48:	200005e0 	.word	0x200005e0

08008b4c <_Balloc>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	69c6      	ldr	r6, [r0, #28]
 8008b50:	4604      	mov	r4, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	b976      	cbnz	r6, 8008b74 <_Balloc+0x28>
 8008b56:	2010      	movs	r0, #16
 8008b58:	f7ff ff44 	bl	80089e4 <malloc>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	61e0      	str	r0, [r4, #28]
 8008b60:	b920      	cbnz	r0, 8008b6c <_Balloc+0x20>
 8008b62:	4b18      	ldr	r3, [pc, #96]	; (8008bc4 <_Balloc+0x78>)
 8008b64:	4818      	ldr	r0, [pc, #96]	; (8008bc8 <_Balloc+0x7c>)
 8008b66:	216b      	movs	r1, #107	; 0x6b
 8008b68:	f000 fe00 	bl	800976c <__assert_func>
 8008b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b70:	6006      	str	r6, [r0, #0]
 8008b72:	60c6      	str	r6, [r0, #12]
 8008b74:	69e6      	ldr	r6, [r4, #28]
 8008b76:	68f3      	ldr	r3, [r6, #12]
 8008b78:	b183      	cbz	r3, 8008b9c <_Balloc+0x50>
 8008b7a:	69e3      	ldr	r3, [r4, #28]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b82:	b9b8      	cbnz	r0, 8008bb4 <_Balloc+0x68>
 8008b84:	2101      	movs	r1, #1
 8008b86:	fa01 f605 	lsl.w	r6, r1, r5
 8008b8a:	1d72      	adds	r2, r6, #5
 8008b8c:	0092      	lsls	r2, r2, #2
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fe0a 	bl	80097a8 <_calloc_r>
 8008b94:	b160      	cbz	r0, 8008bb0 <_Balloc+0x64>
 8008b96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b9a:	e00e      	b.n	8008bba <_Balloc+0x6e>
 8008b9c:	2221      	movs	r2, #33	; 0x21
 8008b9e:	2104      	movs	r1, #4
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fe01 	bl	80097a8 <_calloc_r>
 8008ba6:	69e3      	ldr	r3, [r4, #28]
 8008ba8:	60f0      	str	r0, [r6, #12]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e4      	bne.n	8008b7a <_Balloc+0x2e>
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	6802      	ldr	r2, [r0, #0]
 8008bb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc0:	e7f7      	b.n	8008bb2 <_Balloc+0x66>
 8008bc2:	bf00      	nop
 8008bc4:	08009991 	.word	0x08009991
 8008bc8:	08009a11 	.word	0x08009a11

08008bcc <_Bfree>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	69c6      	ldr	r6, [r0, #28]
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	b976      	cbnz	r6, 8008bf4 <_Bfree+0x28>
 8008bd6:	2010      	movs	r0, #16
 8008bd8:	f7ff ff04 	bl	80089e4 <malloc>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	61e8      	str	r0, [r5, #28]
 8008be0:	b920      	cbnz	r0, 8008bec <_Bfree+0x20>
 8008be2:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <_Bfree+0x3c>)
 8008be4:	4809      	ldr	r0, [pc, #36]	; (8008c0c <_Bfree+0x40>)
 8008be6:	218f      	movs	r1, #143	; 0x8f
 8008be8:	f000 fdc0 	bl	800976c <__assert_func>
 8008bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf0:	6006      	str	r6, [r0, #0]
 8008bf2:	60c6      	str	r6, [r0, #12]
 8008bf4:	b13c      	cbz	r4, 8008c06 <_Bfree+0x3a>
 8008bf6:	69eb      	ldr	r3, [r5, #28]
 8008bf8:	6862      	ldr	r2, [r4, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c00:	6021      	str	r1, [r4, #0]
 8008c02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	08009991 	.word	0x08009991
 8008c0c:	08009a11 	.word	0x08009a11

08008c10 <__multadd>:
 8008c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c14:	690d      	ldr	r5, [r1, #16]
 8008c16:	4607      	mov	r7, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	461e      	mov	r6, r3
 8008c1c:	f101 0c14 	add.w	ip, r1, #20
 8008c20:	2000      	movs	r0, #0
 8008c22:	f8dc 3000 	ldr.w	r3, [ip]
 8008c26:	b299      	uxth	r1, r3
 8008c28:	fb02 6101 	mla	r1, r2, r1, r6
 8008c2c:	0c1e      	lsrs	r6, r3, #16
 8008c2e:	0c0b      	lsrs	r3, r1, #16
 8008c30:	fb02 3306 	mla	r3, r2, r6, r3
 8008c34:	b289      	uxth	r1, r1
 8008c36:	3001      	adds	r0, #1
 8008c38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c3c:	4285      	cmp	r5, r0
 8008c3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c46:	dcec      	bgt.n	8008c22 <__multadd+0x12>
 8008c48:	b30e      	cbz	r6, 8008c8e <__multadd+0x7e>
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	42ab      	cmp	r3, r5
 8008c4e:	dc19      	bgt.n	8008c84 <__multadd+0x74>
 8008c50:	6861      	ldr	r1, [r4, #4]
 8008c52:	4638      	mov	r0, r7
 8008c54:	3101      	adds	r1, #1
 8008c56:	f7ff ff79 	bl	8008b4c <_Balloc>
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	b928      	cbnz	r0, 8008c6a <__multadd+0x5a>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <__multadd+0x84>)
 8008c62:	480d      	ldr	r0, [pc, #52]	; (8008c98 <__multadd+0x88>)
 8008c64:	21ba      	movs	r1, #186	; 0xba
 8008c66:	f000 fd81 	bl	800976c <__assert_func>
 8008c6a:	6922      	ldr	r2, [r4, #16]
 8008c6c:	3202      	adds	r2, #2
 8008c6e:	f104 010c 	add.w	r1, r4, #12
 8008c72:	0092      	lsls	r2, r2, #2
 8008c74:	300c      	adds	r0, #12
 8008c76:	f000 fd6b 	bl	8009750 <memcpy>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ffa5 	bl	8008bcc <_Bfree>
 8008c82:	4644      	mov	r4, r8
 8008c84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c88:	3501      	adds	r5, #1
 8008c8a:	615e      	str	r6, [r3, #20]
 8008c8c:	6125      	str	r5, [r4, #16]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c94:	08009a00 	.word	0x08009a00
 8008c98:	08009a11 	.word	0x08009a11

08008c9c <__hi0bits>:
 8008c9c:	0c03      	lsrs	r3, r0, #16
 8008c9e:	041b      	lsls	r3, r3, #16
 8008ca0:	b9d3      	cbnz	r3, 8008cd8 <__hi0bits+0x3c>
 8008ca2:	0400      	lsls	r0, r0, #16
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008caa:	bf04      	itt	eq
 8008cac:	0200      	lsleq	r0, r0, #8
 8008cae:	3308      	addeq	r3, #8
 8008cb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008cb4:	bf04      	itt	eq
 8008cb6:	0100      	lsleq	r0, r0, #4
 8008cb8:	3304      	addeq	r3, #4
 8008cba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008cbe:	bf04      	itt	eq
 8008cc0:	0080      	lsleq	r0, r0, #2
 8008cc2:	3302      	addeq	r3, #2
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	db05      	blt.n	8008cd4 <__hi0bits+0x38>
 8008cc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ccc:	f103 0301 	add.w	r3, r3, #1
 8008cd0:	bf08      	it	eq
 8008cd2:	2320      	moveq	r3, #32
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	4770      	bx	lr
 8008cd8:	2300      	movs	r3, #0
 8008cda:	e7e4      	b.n	8008ca6 <__hi0bits+0xa>

08008cdc <__lo0bits>:
 8008cdc:	6803      	ldr	r3, [r0, #0]
 8008cde:	f013 0207 	ands.w	r2, r3, #7
 8008ce2:	d00c      	beq.n	8008cfe <__lo0bits+0x22>
 8008ce4:	07d9      	lsls	r1, r3, #31
 8008ce6:	d422      	bmi.n	8008d2e <__lo0bits+0x52>
 8008ce8:	079a      	lsls	r2, r3, #30
 8008cea:	bf49      	itett	mi
 8008cec:	085b      	lsrmi	r3, r3, #1
 8008cee:	089b      	lsrpl	r3, r3, #2
 8008cf0:	6003      	strmi	r3, [r0, #0]
 8008cf2:	2201      	movmi	r2, #1
 8008cf4:	bf5c      	itt	pl
 8008cf6:	6003      	strpl	r3, [r0, #0]
 8008cf8:	2202      	movpl	r2, #2
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4770      	bx	lr
 8008cfe:	b299      	uxth	r1, r3
 8008d00:	b909      	cbnz	r1, 8008d06 <__lo0bits+0x2a>
 8008d02:	0c1b      	lsrs	r3, r3, #16
 8008d04:	2210      	movs	r2, #16
 8008d06:	b2d9      	uxtb	r1, r3
 8008d08:	b909      	cbnz	r1, 8008d0e <__lo0bits+0x32>
 8008d0a:	3208      	adds	r2, #8
 8008d0c:	0a1b      	lsrs	r3, r3, #8
 8008d0e:	0719      	lsls	r1, r3, #28
 8008d10:	bf04      	itt	eq
 8008d12:	091b      	lsreq	r3, r3, #4
 8008d14:	3204      	addeq	r2, #4
 8008d16:	0799      	lsls	r1, r3, #30
 8008d18:	bf04      	itt	eq
 8008d1a:	089b      	lsreq	r3, r3, #2
 8008d1c:	3202      	addeq	r2, #2
 8008d1e:	07d9      	lsls	r1, r3, #31
 8008d20:	d403      	bmi.n	8008d2a <__lo0bits+0x4e>
 8008d22:	085b      	lsrs	r3, r3, #1
 8008d24:	f102 0201 	add.w	r2, r2, #1
 8008d28:	d003      	beq.n	8008d32 <__lo0bits+0x56>
 8008d2a:	6003      	str	r3, [r0, #0]
 8008d2c:	e7e5      	b.n	8008cfa <__lo0bits+0x1e>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	e7e3      	b.n	8008cfa <__lo0bits+0x1e>
 8008d32:	2220      	movs	r2, #32
 8008d34:	e7e1      	b.n	8008cfa <__lo0bits+0x1e>
	...

08008d38 <__i2b>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	f7ff ff05 	bl	8008b4c <_Balloc>
 8008d42:	4602      	mov	r2, r0
 8008d44:	b928      	cbnz	r0, 8008d52 <__i2b+0x1a>
 8008d46:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <__i2b+0x24>)
 8008d48:	4805      	ldr	r0, [pc, #20]	; (8008d60 <__i2b+0x28>)
 8008d4a:	f240 1145 	movw	r1, #325	; 0x145
 8008d4e:	f000 fd0d 	bl	800976c <__assert_func>
 8008d52:	2301      	movs	r3, #1
 8008d54:	6144      	str	r4, [r0, #20]
 8008d56:	6103      	str	r3, [r0, #16]
 8008d58:	bd10      	pop	{r4, pc}
 8008d5a:	bf00      	nop
 8008d5c:	08009a00 	.word	0x08009a00
 8008d60:	08009a11 	.word	0x08009a11

08008d64 <__multiply>:
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	4691      	mov	r9, r2
 8008d6a:	690a      	ldr	r2, [r1, #16]
 8008d6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	bfb8      	it	lt
 8008d74:	460b      	movlt	r3, r1
 8008d76:	460c      	mov	r4, r1
 8008d78:	bfbc      	itt	lt
 8008d7a:	464c      	movlt	r4, r9
 8008d7c:	4699      	movlt	r9, r3
 8008d7e:	6927      	ldr	r7, [r4, #16]
 8008d80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d84:	68a3      	ldr	r3, [r4, #8]
 8008d86:	6861      	ldr	r1, [r4, #4]
 8008d88:	eb07 060a 	add.w	r6, r7, sl
 8008d8c:	42b3      	cmp	r3, r6
 8008d8e:	b085      	sub	sp, #20
 8008d90:	bfb8      	it	lt
 8008d92:	3101      	addlt	r1, #1
 8008d94:	f7ff feda 	bl	8008b4c <_Balloc>
 8008d98:	b930      	cbnz	r0, 8008da8 <__multiply+0x44>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	4b44      	ldr	r3, [pc, #272]	; (8008eb0 <__multiply+0x14c>)
 8008d9e:	4845      	ldr	r0, [pc, #276]	; (8008eb4 <__multiply+0x150>)
 8008da0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008da4:	f000 fce2 	bl	800976c <__assert_func>
 8008da8:	f100 0514 	add.w	r5, r0, #20
 8008dac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008db0:	462b      	mov	r3, r5
 8008db2:	2200      	movs	r2, #0
 8008db4:	4543      	cmp	r3, r8
 8008db6:	d321      	bcc.n	8008dfc <__multiply+0x98>
 8008db8:	f104 0314 	add.w	r3, r4, #20
 8008dbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008dc0:	f109 0314 	add.w	r3, r9, #20
 8008dc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	1b3a      	subs	r2, r7, r4
 8008dcc:	3a15      	subs	r2, #21
 8008dce:	f022 0203 	bic.w	r2, r2, #3
 8008dd2:	3204      	adds	r2, #4
 8008dd4:	f104 0115 	add.w	r1, r4, #21
 8008dd8:	428f      	cmp	r7, r1
 8008dda:	bf38      	it	cc
 8008ddc:	2204      	movcc	r2, #4
 8008dde:	9201      	str	r2, [sp, #4]
 8008de0:	9a02      	ldr	r2, [sp, #8]
 8008de2:	9303      	str	r3, [sp, #12]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d80c      	bhi.n	8008e02 <__multiply+0x9e>
 8008de8:	2e00      	cmp	r6, #0
 8008dea:	dd03      	ble.n	8008df4 <__multiply+0x90>
 8008dec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d05b      	beq.n	8008eac <__multiply+0x148>
 8008df4:	6106      	str	r6, [r0, #16]
 8008df6:	b005      	add	sp, #20
 8008df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfc:	f843 2b04 	str.w	r2, [r3], #4
 8008e00:	e7d8      	b.n	8008db4 <__multiply+0x50>
 8008e02:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e06:	f1ba 0f00 	cmp.w	sl, #0
 8008e0a:	d024      	beq.n	8008e56 <__multiply+0xf2>
 8008e0c:	f104 0e14 	add.w	lr, r4, #20
 8008e10:	46a9      	mov	r9, r5
 8008e12:	f04f 0c00 	mov.w	ip, #0
 8008e16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e1a:	f8d9 1000 	ldr.w	r1, [r9]
 8008e1e:	fa1f fb82 	uxth.w	fp, r2
 8008e22:	b289      	uxth	r1, r1
 8008e24:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e2c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e30:	4461      	add	r1, ip
 8008e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e36:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e3e:	b289      	uxth	r1, r1
 8008e40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e44:	4577      	cmp	r7, lr
 8008e46:	f849 1b04 	str.w	r1, [r9], #4
 8008e4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e4e:	d8e2      	bhi.n	8008e16 <__multiply+0xb2>
 8008e50:	9a01      	ldr	r2, [sp, #4]
 8008e52:	f845 c002 	str.w	ip, [r5, r2]
 8008e56:	9a03      	ldr	r2, [sp, #12]
 8008e58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	f1b9 0f00 	cmp.w	r9, #0
 8008e62:	d021      	beq.n	8008ea8 <__multiply+0x144>
 8008e64:	6829      	ldr	r1, [r5, #0]
 8008e66:	f104 0c14 	add.w	ip, r4, #20
 8008e6a:	46ae      	mov	lr, r5
 8008e6c:	f04f 0a00 	mov.w	sl, #0
 8008e70:	f8bc b000 	ldrh.w	fp, [ip]
 8008e74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e78:	fb09 220b 	mla	r2, r9, fp, r2
 8008e7c:	4452      	add	r2, sl
 8008e7e:	b289      	uxth	r1, r1
 8008e80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e84:	f84e 1b04 	str.w	r1, [lr], #4
 8008e88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e90:	f8be 1000 	ldrh.w	r1, [lr]
 8008e94:	fb09 110a 	mla	r1, r9, sl, r1
 8008e98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008e9c:	4567      	cmp	r7, ip
 8008e9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ea2:	d8e5      	bhi.n	8008e70 <__multiply+0x10c>
 8008ea4:	9a01      	ldr	r2, [sp, #4]
 8008ea6:	50a9      	str	r1, [r5, r2]
 8008ea8:	3504      	adds	r5, #4
 8008eaa:	e799      	b.n	8008de0 <__multiply+0x7c>
 8008eac:	3e01      	subs	r6, #1
 8008eae:	e79b      	b.n	8008de8 <__multiply+0x84>
 8008eb0:	08009a00 	.word	0x08009a00
 8008eb4:	08009a11 	.word	0x08009a11

08008eb8 <__pow5mult>:
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	4615      	mov	r5, r2
 8008ebe:	f012 0203 	ands.w	r2, r2, #3
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	460f      	mov	r7, r1
 8008ec6:	d007      	beq.n	8008ed8 <__pow5mult+0x20>
 8008ec8:	4c25      	ldr	r4, [pc, #148]	; (8008f60 <__pow5mult+0xa8>)
 8008eca:	3a01      	subs	r2, #1
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ed2:	f7ff fe9d 	bl	8008c10 <__multadd>
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	10ad      	asrs	r5, r5, #2
 8008eda:	d03d      	beq.n	8008f58 <__pow5mult+0xa0>
 8008edc:	69f4      	ldr	r4, [r6, #28]
 8008ede:	b97c      	cbnz	r4, 8008f00 <__pow5mult+0x48>
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	f7ff fd7f 	bl	80089e4 <malloc>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	61f0      	str	r0, [r6, #28]
 8008eea:	b928      	cbnz	r0, 8008ef8 <__pow5mult+0x40>
 8008eec:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <__pow5mult+0xac>)
 8008eee:	481e      	ldr	r0, [pc, #120]	; (8008f68 <__pow5mult+0xb0>)
 8008ef0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008ef4:	f000 fc3a 	bl	800976c <__assert_func>
 8008ef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008efc:	6004      	str	r4, [r0, #0]
 8008efe:	60c4      	str	r4, [r0, #12]
 8008f00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008f04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f08:	b94c      	cbnz	r4, 8008f1e <__pow5mult+0x66>
 8008f0a:	f240 2171 	movw	r1, #625	; 0x271
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7ff ff12 	bl	8008d38 <__i2b>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	07eb      	lsls	r3, r5, #31
 8008f24:	d50a      	bpl.n	8008f3c <__pow5mult+0x84>
 8008f26:	4639      	mov	r1, r7
 8008f28:	4622      	mov	r2, r4
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7ff ff1a 	bl	8008d64 <__multiply>
 8008f30:	4639      	mov	r1, r7
 8008f32:	4680      	mov	r8, r0
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7ff fe49 	bl	8008bcc <_Bfree>
 8008f3a:	4647      	mov	r7, r8
 8008f3c:	106d      	asrs	r5, r5, #1
 8008f3e:	d00b      	beq.n	8008f58 <__pow5mult+0xa0>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	b938      	cbnz	r0, 8008f54 <__pow5mult+0x9c>
 8008f44:	4622      	mov	r2, r4
 8008f46:	4621      	mov	r1, r4
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7ff ff0b 	bl	8008d64 <__multiply>
 8008f4e:	6020      	str	r0, [r4, #0]
 8008f50:	f8c0 9000 	str.w	r9, [r0]
 8008f54:	4604      	mov	r4, r0
 8008f56:	e7e4      	b.n	8008f22 <__pow5mult+0x6a>
 8008f58:	4638      	mov	r0, r7
 8008f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	bf00      	nop
 8008f60:	08009b60 	.word	0x08009b60
 8008f64:	08009991 	.word	0x08009991
 8008f68:	08009a11 	.word	0x08009a11

08008f6c <__lshift>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	460c      	mov	r4, r1
 8008f72:	6849      	ldr	r1, [r1, #4]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	4691      	mov	r9, r2
 8008f80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f84:	f108 0601 	add.w	r6, r8, #1
 8008f88:	42b3      	cmp	r3, r6
 8008f8a:	db0b      	blt.n	8008fa4 <__lshift+0x38>
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff fddd 	bl	8008b4c <_Balloc>
 8008f92:	4605      	mov	r5, r0
 8008f94:	b948      	cbnz	r0, 8008faa <__lshift+0x3e>
 8008f96:	4602      	mov	r2, r0
 8008f98:	4b28      	ldr	r3, [pc, #160]	; (800903c <__lshift+0xd0>)
 8008f9a:	4829      	ldr	r0, [pc, #164]	; (8009040 <__lshift+0xd4>)
 8008f9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008fa0:	f000 fbe4 	bl	800976c <__assert_func>
 8008fa4:	3101      	adds	r1, #1
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	e7ee      	b.n	8008f88 <__lshift+0x1c>
 8008faa:	2300      	movs	r3, #0
 8008fac:	f100 0114 	add.w	r1, r0, #20
 8008fb0:	f100 0210 	add.w	r2, r0, #16
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	4553      	cmp	r3, sl
 8008fb8:	db33      	blt.n	8009022 <__lshift+0xb6>
 8008fba:	6920      	ldr	r0, [r4, #16]
 8008fbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fc0:	f104 0314 	add.w	r3, r4, #20
 8008fc4:	f019 091f 	ands.w	r9, r9, #31
 8008fc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fd0:	d02b      	beq.n	800902a <__lshift+0xbe>
 8008fd2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fd6:	468a      	mov	sl, r1
 8008fd8:	2200      	movs	r2, #0
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	fa00 f009 	lsl.w	r0, r0, r9
 8008fe0:	4310      	orrs	r0, r2
 8008fe2:	f84a 0b04 	str.w	r0, [sl], #4
 8008fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fea:	459c      	cmp	ip, r3
 8008fec:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ff0:	d8f3      	bhi.n	8008fda <__lshift+0x6e>
 8008ff2:	ebac 0304 	sub.w	r3, ip, r4
 8008ff6:	3b15      	subs	r3, #21
 8008ff8:	f023 0303 	bic.w	r3, r3, #3
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	f104 0015 	add.w	r0, r4, #21
 8009002:	4584      	cmp	ip, r0
 8009004:	bf38      	it	cc
 8009006:	2304      	movcc	r3, #4
 8009008:	50ca      	str	r2, [r1, r3]
 800900a:	b10a      	cbz	r2, 8009010 <__lshift+0xa4>
 800900c:	f108 0602 	add.w	r6, r8, #2
 8009010:	3e01      	subs	r6, #1
 8009012:	4638      	mov	r0, r7
 8009014:	612e      	str	r6, [r5, #16]
 8009016:	4621      	mov	r1, r4
 8009018:	f7ff fdd8 	bl	8008bcc <_Bfree>
 800901c:	4628      	mov	r0, r5
 800901e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009022:	f842 0f04 	str.w	r0, [r2, #4]!
 8009026:	3301      	adds	r3, #1
 8009028:	e7c5      	b.n	8008fb6 <__lshift+0x4a>
 800902a:	3904      	subs	r1, #4
 800902c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009030:	f841 2f04 	str.w	r2, [r1, #4]!
 8009034:	459c      	cmp	ip, r3
 8009036:	d8f9      	bhi.n	800902c <__lshift+0xc0>
 8009038:	e7ea      	b.n	8009010 <__lshift+0xa4>
 800903a:	bf00      	nop
 800903c:	08009a00 	.word	0x08009a00
 8009040:	08009a11 	.word	0x08009a11

08009044 <__mcmp>:
 8009044:	b530      	push	{r4, r5, lr}
 8009046:	6902      	ldr	r2, [r0, #16]
 8009048:	690c      	ldr	r4, [r1, #16]
 800904a:	1b12      	subs	r2, r2, r4
 800904c:	d10e      	bne.n	800906c <__mcmp+0x28>
 800904e:	f100 0314 	add.w	r3, r0, #20
 8009052:	3114      	adds	r1, #20
 8009054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800905c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009064:	42a5      	cmp	r5, r4
 8009066:	d003      	beq.n	8009070 <__mcmp+0x2c>
 8009068:	d305      	bcc.n	8009076 <__mcmp+0x32>
 800906a:	2201      	movs	r2, #1
 800906c:	4610      	mov	r0, r2
 800906e:	bd30      	pop	{r4, r5, pc}
 8009070:	4283      	cmp	r3, r0
 8009072:	d3f3      	bcc.n	800905c <__mcmp+0x18>
 8009074:	e7fa      	b.n	800906c <__mcmp+0x28>
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	e7f7      	b.n	800906c <__mcmp+0x28>

0800907c <__mdiff>:
 800907c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	4606      	mov	r6, r0
 8009084:	4611      	mov	r1, r2
 8009086:	4620      	mov	r0, r4
 8009088:	4690      	mov	r8, r2
 800908a:	f7ff ffdb 	bl	8009044 <__mcmp>
 800908e:	1e05      	subs	r5, r0, #0
 8009090:	d110      	bne.n	80090b4 <__mdiff+0x38>
 8009092:	4629      	mov	r1, r5
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fd59 	bl	8008b4c <_Balloc>
 800909a:	b930      	cbnz	r0, 80090aa <__mdiff+0x2e>
 800909c:	4b3a      	ldr	r3, [pc, #232]	; (8009188 <__mdiff+0x10c>)
 800909e:	4602      	mov	r2, r0
 80090a0:	f240 2137 	movw	r1, #567	; 0x237
 80090a4:	4839      	ldr	r0, [pc, #228]	; (800918c <__mdiff+0x110>)
 80090a6:	f000 fb61 	bl	800976c <__assert_func>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	bfa4      	itt	ge
 80090b6:	4643      	movge	r3, r8
 80090b8:	46a0      	movge	r8, r4
 80090ba:	4630      	mov	r0, r6
 80090bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090c0:	bfa6      	itte	ge
 80090c2:	461c      	movge	r4, r3
 80090c4:	2500      	movge	r5, #0
 80090c6:	2501      	movlt	r5, #1
 80090c8:	f7ff fd40 	bl	8008b4c <_Balloc>
 80090cc:	b920      	cbnz	r0, 80090d8 <__mdiff+0x5c>
 80090ce:	4b2e      	ldr	r3, [pc, #184]	; (8009188 <__mdiff+0x10c>)
 80090d0:	4602      	mov	r2, r0
 80090d2:	f240 2145 	movw	r1, #581	; 0x245
 80090d6:	e7e5      	b.n	80090a4 <__mdiff+0x28>
 80090d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090dc:	6926      	ldr	r6, [r4, #16]
 80090de:	60c5      	str	r5, [r0, #12]
 80090e0:	f104 0914 	add.w	r9, r4, #20
 80090e4:	f108 0514 	add.w	r5, r8, #20
 80090e8:	f100 0e14 	add.w	lr, r0, #20
 80090ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80090f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090f4:	f108 0210 	add.w	r2, r8, #16
 80090f8:	46f2      	mov	sl, lr
 80090fa:	2100      	movs	r1, #0
 80090fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009100:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009104:	fa11 f88b 	uxtah	r8, r1, fp
 8009108:	b299      	uxth	r1, r3
 800910a:	0c1b      	lsrs	r3, r3, #16
 800910c:	eba8 0801 	sub.w	r8, r8, r1
 8009110:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009114:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009118:	fa1f f888 	uxth.w	r8, r8
 800911c:	1419      	asrs	r1, r3, #16
 800911e:	454e      	cmp	r6, r9
 8009120:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009124:	f84a 3b04 	str.w	r3, [sl], #4
 8009128:	d8e8      	bhi.n	80090fc <__mdiff+0x80>
 800912a:	1b33      	subs	r3, r6, r4
 800912c:	3b15      	subs	r3, #21
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	3304      	adds	r3, #4
 8009134:	3415      	adds	r4, #21
 8009136:	42a6      	cmp	r6, r4
 8009138:	bf38      	it	cc
 800913a:	2304      	movcc	r3, #4
 800913c:	441d      	add	r5, r3
 800913e:	4473      	add	r3, lr
 8009140:	469e      	mov	lr, r3
 8009142:	462e      	mov	r6, r5
 8009144:	4566      	cmp	r6, ip
 8009146:	d30e      	bcc.n	8009166 <__mdiff+0xea>
 8009148:	f10c 0203 	add.w	r2, ip, #3
 800914c:	1b52      	subs	r2, r2, r5
 800914e:	f022 0203 	bic.w	r2, r2, #3
 8009152:	3d03      	subs	r5, #3
 8009154:	45ac      	cmp	ip, r5
 8009156:	bf38      	it	cc
 8009158:	2200      	movcc	r2, #0
 800915a:	4413      	add	r3, r2
 800915c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009160:	b17a      	cbz	r2, 8009182 <__mdiff+0x106>
 8009162:	6107      	str	r7, [r0, #16]
 8009164:	e7a4      	b.n	80090b0 <__mdiff+0x34>
 8009166:	f856 8b04 	ldr.w	r8, [r6], #4
 800916a:	fa11 f288 	uxtah	r2, r1, r8
 800916e:	1414      	asrs	r4, r2, #16
 8009170:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009174:	b292      	uxth	r2, r2
 8009176:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800917a:	f84e 2b04 	str.w	r2, [lr], #4
 800917e:	1421      	asrs	r1, r4, #16
 8009180:	e7e0      	b.n	8009144 <__mdiff+0xc8>
 8009182:	3f01      	subs	r7, #1
 8009184:	e7ea      	b.n	800915c <__mdiff+0xe0>
 8009186:	bf00      	nop
 8009188:	08009a00 	.word	0x08009a00
 800918c:	08009a11 	.word	0x08009a11

08009190 <__d2b>:
 8009190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009194:	460f      	mov	r7, r1
 8009196:	2101      	movs	r1, #1
 8009198:	ec59 8b10 	vmov	r8, r9, d0
 800919c:	4616      	mov	r6, r2
 800919e:	f7ff fcd5 	bl	8008b4c <_Balloc>
 80091a2:	4604      	mov	r4, r0
 80091a4:	b930      	cbnz	r0, 80091b4 <__d2b+0x24>
 80091a6:	4602      	mov	r2, r0
 80091a8:	4b24      	ldr	r3, [pc, #144]	; (800923c <__d2b+0xac>)
 80091aa:	4825      	ldr	r0, [pc, #148]	; (8009240 <__d2b+0xb0>)
 80091ac:	f240 310f 	movw	r1, #783	; 0x30f
 80091b0:	f000 fadc 	bl	800976c <__assert_func>
 80091b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091bc:	bb2d      	cbnz	r5, 800920a <__d2b+0x7a>
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	f1b8 0300 	subs.w	r3, r8, #0
 80091c4:	d026      	beq.n	8009214 <__d2b+0x84>
 80091c6:	4668      	mov	r0, sp
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	f7ff fd87 	bl	8008cdc <__lo0bits>
 80091ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091d2:	b1e8      	cbz	r0, 8009210 <__d2b+0x80>
 80091d4:	f1c0 0320 	rsb	r3, r0, #32
 80091d8:	fa02 f303 	lsl.w	r3, r2, r3
 80091dc:	430b      	orrs	r3, r1
 80091de:	40c2      	lsrs	r2, r0
 80091e0:	6163      	str	r3, [r4, #20]
 80091e2:	9201      	str	r2, [sp, #4]
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	61a3      	str	r3, [r4, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf14      	ite	ne
 80091ec:	2202      	movne	r2, #2
 80091ee:	2201      	moveq	r2, #1
 80091f0:	6122      	str	r2, [r4, #16]
 80091f2:	b1bd      	cbz	r5, 8009224 <__d2b+0x94>
 80091f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091f8:	4405      	add	r5, r0
 80091fa:	603d      	str	r5, [r7, #0]
 80091fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009200:	6030      	str	r0, [r6, #0]
 8009202:	4620      	mov	r0, r4
 8009204:	b003      	add	sp, #12
 8009206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800920a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800920e:	e7d6      	b.n	80091be <__d2b+0x2e>
 8009210:	6161      	str	r1, [r4, #20]
 8009212:	e7e7      	b.n	80091e4 <__d2b+0x54>
 8009214:	a801      	add	r0, sp, #4
 8009216:	f7ff fd61 	bl	8008cdc <__lo0bits>
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	6163      	str	r3, [r4, #20]
 800921e:	3020      	adds	r0, #32
 8009220:	2201      	movs	r2, #1
 8009222:	e7e5      	b.n	80091f0 <__d2b+0x60>
 8009224:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800922c:	6038      	str	r0, [r7, #0]
 800922e:	6918      	ldr	r0, [r3, #16]
 8009230:	f7ff fd34 	bl	8008c9c <__hi0bits>
 8009234:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009238:	e7e2      	b.n	8009200 <__d2b+0x70>
 800923a:	bf00      	nop
 800923c:	08009a00 	.word	0x08009a00
 8009240:	08009a11 	.word	0x08009a11

08009244 <__sfputc_r>:
 8009244:	6893      	ldr	r3, [r2, #8]
 8009246:	3b01      	subs	r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	b410      	push	{r4}
 800924c:	6093      	str	r3, [r2, #8]
 800924e:	da08      	bge.n	8009262 <__sfputc_r+0x1e>
 8009250:	6994      	ldr	r4, [r2, #24]
 8009252:	42a3      	cmp	r3, r4
 8009254:	db01      	blt.n	800925a <__sfputc_r+0x16>
 8009256:	290a      	cmp	r1, #10
 8009258:	d103      	bne.n	8009262 <__sfputc_r+0x1e>
 800925a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800925e:	f7fe bbe4 	b.w	8007a2a <__swbuf_r>
 8009262:	6813      	ldr	r3, [r2, #0]
 8009264:	1c58      	adds	r0, r3, #1
 8009266:	6010      	str	r0, [r2, #0]
 8009268:	7019      	strb	r1, [r3, #0]
 800926a:	4608      	mov	r0, r1
 800926c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009270:	4770      	bx	lr

08009272 <__sfputs_r>:
 8009272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009274:	4606      	mov	r6, r0
 8009276:	460f      	mov	r7, r1
 8009278:	4614      	mov	r4, r2
 800927a:	18d5      	adds	r5, r2, r3
 800927c:	42ac      	cmp	r4, r5
 800927e:	d101      	bne.n	8009284 <__sfputs_r+0x12>
 8009280:	2000      	movs	r0, #0
 8009282:	e007      	b.n	8009294 <__sfputs_r+0x22>
 8009284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009288:	463a      	mov	r2, r7
 800928a:	4630      	mov	r0, r6
 800928c:	f7ff ffda 	bl	8009244 <__sfputc_r>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d1f3      	bne.n	800927c <__sfputs_r+0xa>
 8009294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009298 <_vfiprintf_r>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	460d      	mov	r5, r1
 800929e:	b09d      	sub	sp, #116	; 0x74
 80092a0:	4614      	mov	r4, r2
 80092a2:	4698      	mov	r8, r3
 80092a4:	4606      	mov	r6, r0
 80092a6:	b118      	cbz	r0, 80092b0 <_vfiprintf_r+0x18>
 80092a8:	6a03      	ldr	r3, [r0, #32]
 80092aa:	b90b      	cbnz	r3, 80092b0 <_vfiprintf_r+0x18>
 80092ac:	f7fe fa20 	bl	80076f0 <__sinit>
 80092b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b2:	07d9      	lsls	r1, r3, #31
 80092b4:	d405      	bmi.n	80092c2 <_vfiprintf_r+0x2a>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	059a      	lsls	r2, r3, #22
 80092ba:	d402      	bmi.n	80092c2 <_vfiprintf_r+0x2a>
 80092bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092be:	f7fe fcc6 	bl	8007c4e <__retarget_lock_acquire_recursive>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	071b      	lsls	r3, r3, #28
 80092c6:	d501      	bpl.n	80092cc <_vfiprintf_r+0x34>
 80092c8:	692b      	ldr	r3, [r5, #16]
 80092ca:	b99b      	cbnz	r3, 80092f4 <_vfiprintf_r+0x5c>
 80092cc:	4629      	mov	r1, r5
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7fe fbe8 	bl	8007aa4 <__swsetup_r>
 80092d4:	b170      	cbz	r0, 80092f4 <_vfiprintf_r+0x5c>
 80092d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d8:	07dc      	lsls	r4, r3, #31
 80092da:	d504      	bpl.n	80092e6 <_vfiprintf_r+0x4e>
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	b01d      	add	sp, #116	; 0x74
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	0598      	lsls	r0, r3, #22
 80092ea:	d4f7      	bmi.n	80092dc <_vfiprintf_r+0x44>
 80092ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ee:	f7fe fcaf 	bl	8007c50 <__retarget_lock_release_recursive>
 80092f2:	e7f3      	b.n	80092dc <_vfiprintf_r+0x44>
 80092f4:	2300      	movs	r3, #0
 80092f6:	9309      	str	r3, [sp, #36]	; 0x24
 80092f8:	2320      	movs	r3, #32
 80092fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009302:	2330      	movs	r3, #48	; 0x30
 8009304:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80094b8 <_vfiprintf_r+0x220>
 8009308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800930c:	f04f 0901 	mov.w	r9, #1
 8009310:	4623      	mov	r3, r4
 8009312:	469a      	mov	sl, r3
 8009314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009318:	b10a      	cbz	r2, 800931e <_vfiprintf_r+0x86>
 800931a:	2a25      	cmp	r2, #37	; 0x25
 800931c:	d1f9      	bne.n	8009312 <_vfiprintf_r+0x7a>
 800931e:	ebba 0b04 	subs.w	fp, sl, r4
 8009322:	d00b      	beq.n	800933c <_vfiprintf_r+0xa4>
 8009324:	465b      	mov	r3, fp
 8009326:	4622      	mov	r2, r4
 8009328:	4629      	mov	r1, r5
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ffa1 	bl	8009272 <__sfputs_r>
 8009330:	3001      	adds	r0, #1
 8009332:	f000 80a9 	beq.w	8009488 <_vfiprintf_r+0x1f0>
 8009336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009338:	445a      	add	r2, fp
 800933a:	9209      	str	r2, [sp, #36]	; 0x24
 800933c:	f89a 3000 	ldrb.w	r3, [sl]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 80a1 	beq.w	8009488 <_vfiprintf_r+0x1f0>
 8009346:	2300      	movs	r3, #0
 8009348:	f04f 32ff 	mov.w	r2, #4294967295
 800934c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009350:	f10a 0a01 	add.w	sl, sl, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800935c:	931a      	str	r3, [sp, #104]	; 0x68
 800935e:	4654      	mov	r4, sl
 8009360:	2205      	movs	r2, #5
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	4854      	ldr	r0, [pc, #336]	; (80094b8 <_vfiprintf_r+0x220>)
 8009368:	f7f6 ff32 	bl	80001d0 <memchr>
 800936c:	9a04      	ldr	r2, [sp, #16]
 800936e:	b9d8      	cbnz	r0, 80093a8 <_vfiprintf_r+0x110>
 8009370:	06d1      	lsls	r1, r2, #27
 8009372:	bf44      	itt	mi
 8009374:	2320      	movmi	r3, #32
 8009376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800937a:	0713      	lsls	r3, r2, #28
 800937c:	bf44      	itt	mi
 800937e:	232b      	movmi	r3, #43	; 0x2b
 8009380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009384:	f89a 3000 	ldrb.w	r3, [sl]
 8009388:	2b2a      	cmp	r3, #42	; 0x2a
 800938a:	d015      	beq.n	80093b8 <_vfiprintf_r+0x120>
 800938c:	9a07      	ldr	r2, [sp, #28]
 800938e:	4654      	mov	r4, sl
 8009390:	2000      	movs	r0, #0
 8009392:	f04f 0c0a 	mov.w	ip, #10
 8009396:	4621      	mov	r1, r4
 8009398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800939c:	3b30      	subs	r3, #48	; 0x30
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d94d      	bls.n	800943e <_vfiprintf_r+0x1a6>
 80093a2:	b1b0      	cbz	r0, 80093d2 <_vfiprintf_r+0x13a>
 80093a4:	9207      	str	r2, [sp, #28]
 80093a6:	e014      	b.n	80093d2 <_vfiprintf_r+0x13a>
 80093a8:	eba0 0308 	sub.w	r3, r0, r8
 80093ac:	fa09 f303 	lsl.w	r3, r9, r3
 80093b0:	4313      	orrs	r3, r2
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	46a2      	mov	sl, r4
 80093b6:	e7d2      	b.n	800935e <_vfiprintf_r+0xc6>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	1d19      	adds	r1, r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	9103      	str	r1, [sp, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bfbb      	ittet	lt
 80093c4:	425b      	neglt	r3, r3
 80093c6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ca:	9307      	strge	r3, [sp, #28]
 80093cc:	9307      	strlt	r3, [sp, #28]
 80093ce:	bfb8      	it	lt
 80093d0:	9204      	strlt	r2, [sp, #16]
 80093d2:	7823      	ldrb	r3, [r4, #0]
 80093d4:	2b2e      	cmp	r3, #46	; 0x2e
 80093d6:	d10c      	bne.n	80093f2 <_vfiprintf_r+0x15a>
 80093d8:	7863      	ldrb	r3, [r4, #1]
 80093da:	2b2a      	cmp	r3, #42	; 0x2a
 80093dc:	d134      	bne.n	8009448 <_vfiprintf_r+0x1b0>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	1d1a      	adds	r2, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9203      	str	r2, [sp, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80093ee:	3402      	adds	r4, #2
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094c8 <_vfiprintf_r+0x230>
 80093f6:	7821      	ldrb	r1, [r4, #0]
 80093f8:	2203      	movs	r2, #3
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7f6 fee8 	bl	80001d0 <memchr>
 8009400:	b138      	cbz	r0, 8009412 <_vfiprintf_r+0x17a>
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	eba0 000a 	sub.w	r0, r0, sl
 8009408:	2240      	movs	r2, #64	; 0x40
 800940a:	4082      	lsls	r2, r0
 800940c:	4313      	orrs	r3, r2
 800940e:	3401      	adds	r4, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009416:	4829      	ldr	r0, [pc, #164]	; (80094bc <_vfiprintf_r+0x224>)
 8009418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800941c:	2206      	movs	r2, #6
 800941e:	f7f6 fed7 	bl	80001d0 <memchr>
 8009422:	2800      	cmp	r0, #0
 8009424:	d03f      	beq.n	80094a6 <_vfiprintf_r+0x20e>
 8009426:	4b26      	ldr	r3, [pc, #152]	; (80094c0 <_vfiprintf_r+0x228>)
 8009428:	bb1b      	cbnz	r3, 8009472 <_vfiprintf_r+0x1da>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	3307      	adds	r3, #7
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	3308      	adds	r3, #8
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	443b      	add	r3, r7
 800943a:	9309      	str	r3, [sp, #36]	; 0x24
 800943c:	e768      	b.n	8009310 <_vfiprintf_r+0x78>
 800943e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009442:	460c      	mov	r4, r1
 8009444:	2001      	movs	r0, #1
 8009446:	e7a6      	b.n	8009396 <_vfiprintf_r+0xfe>
 8009448:	2300      	movs	r3, #0
 800944a:	3401      	adds	r4, #1
 800944c:	9305      	str	r3, [sp, #20]
 800944e:	4619      	mov	r1, r3
 8009450:	f04f 0c0a 	mov.w	ip, #10
 8009454:	4620      	mov	r0, r4
 8009456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800945a:	3a30      	subs	r2, #48	; 0x30
 800945c:	2a09      	cmp	r2, #9
 800945e:	d903      	bls.n	8009468 <_vfiprintf_r+0x1d0>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0c6      	beq.n	80093f2 <_vfiprintf_r+0x15a>
 8009464:	9105      	str	r1, [sp, #20]
 8009466:	e7c4      	b.n	80093f2 <_vfiprintf_r+0x15a>
 8009468:	fb0c 2101 	mla	r1, ip, r1, r2
 800946c:	4604      	mov	r4, r0
 800946e:	2301      	movs	r3, #1
 8009470:	e7f0      	b.n	8009454 <_vfiprintf_r+0x1bc>
 8009472:	ab03      	add	r3, sp, #12
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	462a      	mov	r2, r5
 8009478:	4b12      	ldr	r3, [pc, #72]	; (80094c4 <_vfiprintf_r+0x22c>)
 800947a:	a904      	add	r1, sp, #16
 800947c:	4630      	mov	r0, r6
 800947e:	f7fd fce5 	bl	8006e4c <_printf_float>
 8009482:	4607      	mov	r7, r0
 8009484:	1c78      	adds	r0, r7, #1
 8009486:	d1d6      	bne.n	8009436 <_vfiprintf_r+0x19e>
 8009488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	d405      	bmi.n	800949a <_vfiprintf_r+0x202>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	059a      	lsls	r2, r3, #22
 8009492:	d402      	bmi.n	800949a <_vfiprintf_r+0x202>
 8009494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009496:	f7fe fbdb 	bl	8007c50 <__retarget_lock_release_recursive>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	065b      	lsls	r3, r3, #25
 800949e:	f53f af1d 	bmi.w	80092dc <_vfiprintf_r+0x44>
 80094a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a4:	e71c      	b.n	80092e0 <_vfiprintf_r+0x48>
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <_vfiprintf_r+0x22c>)
 80094ae:	a904      	add	r1, sp, #16
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7fd ff6f 	bl	8007394 <_printf_i>
 80094b6:	e7e4      	b.n	8009482 <_vfiprintf_r+0x1ea>
 80094b8:	08009b6c 	.word	0x08009b6c
 80094bc:	08009b76 	.word	0x08009b76
 80094c0:	08006e4d 	.word	0x08006e4d
 80094c4:	08009273 	.word	0x08009273
 80094c8:	08009b72 	.word	0x08009b72

080094cc <__sflush_r>:
 80094cc:	898a      	ldrh	r2, [r1, #12]
 80094ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	4605      	mov	r5, r0
 80094d4:	0710      	lsls	r0, r2, #28
 80094d6:	460c      	mov	r4, r1
 80094d8:	d458      	bmi.n	800958c <__sflush_r+0xc0>
 80094da:	684b      	ldr	r3, [r1, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dc05      	bgt.n	80094ec <__sflush_r+0x20>
 80094e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dc02      	bgt.n	80094ec <__sflush_r+0x20>
 80094e6:	2000      	movs	r0, #0
 80094e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	d0f9      	beq.n	80094e6 <__sflush_r+0x1a>
 80094f2:	2300      	movs	r3, #0
 80094f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094f8:	682f      	ldr	r7, [r5, #0]
 80094fa:	6a21      	ldr	r1, [r4, #32]
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	d032      	beq.n	8009566 <__sflush_r+0x9a>
 8009500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	075a      	lsls	r2, r3, #29
 8009506:	d505      	bpl.n	8009514 <__sflush_r+0x48>
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	1ac0      	subs	r0, r0, r3
 800950c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800950e:	b10b      	cbz	r3, 8009514 <__sflush_r+0x48>
 8009510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009512:	1ac0      	subs	r0, r0, r3
 8009514:	2300      	movs	r3, #0
 8009516:	4602      	mov	r2, r0
 8009518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800951a:	6a21      	ldr	r1, [r4, #32]
 800951c:	4628      	mov	r0, r5
 800951e:	47b0      	blx	r6
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	d106      	bne.n	8009534 <__sflush_r+0x68>
 8009526:	6829      	ldr	r1, [r5, #0]
 8009528:	291d      	cmp	r1, #29
 800952a:	d82b      	bhi.n	8009584 <__sflush_r+0xb8>
 800952c:	4a29      	ldr	r2, [pc, #164]	; (80095d4 <__sflush_r+0x108>)
 800952e:	410a      	asrs	r2, r1
 8009530:	07d6      	lsls	r6, r2, #31
 8009532:	d427      	bmi.n	8009584 <__sflush_r+0xb8>
 8009534:	2200      	movs	r2, #0
 8009536:	6062      	str	r2, [r4, #4]
 8009538:	04d9      	lsls	r1, r3, #19
 800953a:	6922      	ldr	r2, [r4, #16]
 800953c:	6022      	str	r2, [r4, #0]
 800953e:	d504      	bpl.n	800954a <__sflush_r+0x7e>
 8009540:	1c42      	adds	r2, r0, #1
 8009542:	d101      	bne.n	8009548 <__sflush_r+0x7c>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b903      	cbnz	r3, 800954a <__sflush_r+0x7e>
 8009548:	6560      	str	r0, [r4, #84]	; 0x54
 800954a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800954c:	602f      	str	r7, [r5, #0]
 800954e:	2900      	cmp	r1, #0
 8009550:	d0c9      	beq.n	80094e6 <__sflush_r+0x1a>
 8009552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009556:	4299      	cmp	r1, r3
 8009558:	d002      	beq.n	8009560 <__sflush_r+0x94>
 800955a:	4628      	mov	r0, r5
 800955c:	f7ff f9f6 	bl	800894c <_free_r>
 8009560:	2000      	movs	r0, #0
 8009562:	6360      	str	r0, [r4, #52]	; 0x34
 8009564:	e7c0      	b.n	80094e8 <__sflush_r+0x1c>
 8009566:	2301      	movs	r3, #1
 8009568:	4628      	mov	r0, r5
 800956a:	47b0      	blx	r6
 800956c:	1c41      	adds	r1, r0, #1
 800956e:	d1c8      	bne.n	8009502 <__sflush_r+0x36>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0c5      	beq.n	8009502 <__sflush_r+0x36>
 8009576:	2b1d      	cmp	r3, #29
 8009578:	d001      	beq.n	800957e <__sflush_r+0xb2>
 800957a:	2b16      	cmp	r3, #22
 800957c:	d101      	bne.n	8009582 <__sflush_r+0xb6>
 800957e:	602f      	str	r7, [r5, #0]
 8009580:	e7b1      	b.n	80094e6 <__sflush_r+0x1a>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	e7ad      	b.n	80094e8 <__sflush_r+0x1c>
 800958c:	690f      	ldr	r7, [r1, #16]
 800958e:	2f00      	cmp	r7, #0
 8009590:	d0a9      	beq.n	80094e6 <__sflush_r+0x1a>
 8009592:	0793      	lsls	r3, r2, #30
 8009594:	680e      	ldr	r6, [r1, #0]
 8009596:	bf08      	it	eq
 8009598:	694b      	ldreq	r3, [r1, #20]
 800959a:	600f      	str	r7, [r1, #0]
 800959c:	bf18      	it	ne
 800959e:	2300      	movne	r3, #0
 80095a0:	eba6 0807 	sub.w	r8, r6, r7
 80095a4:	608b      	str	r3, [r1, #8]
 80095a6:	f1b8 0f00 	cmp.w	r8, #0
 80095aa:	dd9c      	ble.n	80094e6 <__sflush_r+0x1a>
 80095ac:	6a21      	ldr	r1, [r4, #32]
 80095ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095b0:	4643      	mov	r3, r8
 80095b2:	463a      	mov	r2, r7
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b0      	blx	r6
 80095b8:	2800      	cmp	r0, #0
 80095ba:	dc06      	bgt.n	80095ca <__sflush_r+0xfe>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c2:	81a3      	strh	r3, [r4, #12]
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	e78e      	b.n	80094e8 <__sflush_r+0x1c>
 80095ca:	4407      	add	r7, r0
 80095cc:	eba8 0800 	sub.w	r8, r8, r0
 80095d0:	e7e9      	b.n	80095a6 <__sflush_r+0xda>
 80095d2:	bf00      	nop
 80095d4:	dfbffffe 	.word	0xdfbffffe

080095d8 <_fflush_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	690b      	ldr	r3, [r1, #16]
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	b913      	cbnz	r3, 80095e8 <_fflush_r+0x10>
 80095e2:	2500      	movs	r5, #0
 80095e4:	4628      	mov	r0, r5
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	b118      	cbz	r0, 80095f2 <_fflush_r+0x1a>
 80095ea:	6a03      	ldr	r3, [r0, #32]
 80095ec:	b90b      	cbnz	r3, 80095f2 <_fflush_r+0x1a>
 80095ee:	f7fe f87f 	bl	80076f0 <__sinit>
 80095f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0f3      	beq.n	80095e2 <_fflush_r+0xa>
 80095fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095fc:	07d0      	lsls	r0, r2, #31
 80095fe:	d404      	bmi.n	800960a <_fflush_r+0x32>
 8009600:	0599      	lsls	r1, r3, #22
 8009602:	d402      	bmi.n	800960a <_fflush_r+0x32>
 8009604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009606:	f7fe fb22 	bl	8007c4e <__retarget_lock_acquire_recursive>
 800960a:	4628      	mov	r0, r5
 800960c:	4621      	mov	r1, r4
 800960e:	f7ff ff5d 	bl	80094cc <__sflush_r>
 8009612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009614:	07da      	lsls	r2, r3, #31
 8009616:	4605      	mov	r5, r0
 8009618:	d4e4      	bmi.n	80095e4 <_fflush_r+0xc>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	059b      	lsls	r3, r3, #22
 800961e:	d4e1      	bmi.n	80095e4 <_fflush_r+0xc>
 8009620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009622:	f7fe fb15 	bl	8007c50 <__retarget_lock_release_recursive>
 8009626:	e7dd      	b.n	80095e4 <_fflush_r+0xc>

08009628 <__swhatbuf_r>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	460c      	mov	r4, r1
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	2900      	cmp	r1, #0
 8009632:	b096      	sub	sp, #88	; 0x58
 8009634:	4615      	mov	r5, r2
 8009636:	461e      	mov	r6, r3
 8009638:	da0d      	bge.n	8009656 <__swhatbuf_r+0x2e>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009640:	f04f 0100 	mov.w	r1, #0
 8009644:	bf0c      	ite	eq
 8009646:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800964a:	2340      	movne	r3, #64	; 0x40
 800964c:	2000      	movs	r0, #0
 800964e:	6031      	str	r1, [r6, #0]
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	b016      	add	sp, #88	; 0x58
 8009654:	bd70      	pop	{r4, r5, r6, pc}
 8009656:	466a      	mov	r2, sp
 8009658:	f000 f848 	bl	80096ec <_fstat_r>
 800965c:	2800      	cmp	r0, #0
 800965e:	dbec      	blt.n	800963a <__swhatbuf_r+0x12>
 8009660:	9901      	ldr	r1, [sp, #4]
 8009662:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009666:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800966a:	4259      	negs	r1, r3
 800966c:	4159      	adcs	r1, r3
 800966e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009672:	e7eb      	b.n	800964c <__swhatbuf_r+0x24>

08009674 <__smakebuf_r>:
 8009674:	898b      	ldrh	r3, [r1, #12]
 8009676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009678:	079d      	lsls	r5, r3, #30
 800967a:	4606      	mov	r6, r0
 800967c:	460c      	mov	r4, r1
 800967e:	d507      	bpl.n	8009690 <__smakebuf_r+0x1c>
 8009680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	2301      	movs	r3, #1
 800968a:	6163      	str	r3, [r4, #20]
 800968c:	b002      	add	sp, #8
 800968e:	bd70      	pop	{r4, r5, r6, pc}
 8009690:	ab01      	add	r3, sp, #4
 8009692:	466a      	mov	r2, sp
 8009694:	f7ff ffc8 	bl	8009628 <__swhatbuf_r>
 8009698:	9900      	ldr	r1, [sp, #0]
 800969a:	4605      	mov	r5, r0
 800969c:	4630      	mov	r0, r6
 800969e:	f7ff f9c9 	bl	8008a34 <_malloc_r>
 80096a2:	b948      	cbnz	r0, 80096b8 <__smakebuf_r+0x44>
 80096a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a8:	059a      	lsls	r2, r3, #22
 80096aa:	d4ef      	bmi.n	800968c <__smakebuf_r+0x18>
 80096ac:	f023 0303 	bic.w	r3, r3, #3
 80096b0:	f043 0302 	orr.w	r3, r3, #2
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	e7e3      	b.n	8009680 <__smakebuf_r+0xc>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	6020      	str	r0, [r4, #0]
 80096bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	9b00      	ldr	r3, [sp, #0]
 80096c4:	6163      	str	r3, [r4, #20]
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	6120      	str	r0, [r4, #16]
 80096ca:	b15b      	cbz	r3, 80096e4 <__smakebuf_r+0x70>
 80096cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d0:	4630      	mov	r0, r6
 80096d2:	f000 f81d 	bl	8009710 <_isatty_r>
 80096d6:	b128      	cbz	r0, 80096e4 <__smakebuf_r+0x70>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	431d      	orrs	r5, r3
 80096e8:	81a5      	strh	r5, [r4, #12]
 80096ea:	e7cf      	b.n	800968c <__smakebuf_r+0x18>

080096ec <_fstat_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d07      	ldr	r5, [pc, #28]	; (800970c <_fstat_r+0x20>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	4611      	mov	r1, r2
 80096f8:	602b      	str	r3, [r5, #0]
 80096fa:	f7f8 fcce 	bl	800209a <_fstat>
 80096fe:	1c43      	adds	r3, r0, #1
 8009700:	d102      	bne.n	8009708 <_fstat_r+0x1c>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	b103      	cbz	r3, 8009708 <_fstat_r+0x1c>
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	bd38      	pop	{r3, r4, r5, pc}
 800970a:	bf00      	nop
 800970c:	200005dc 	.word	0x200005dc

08009710 <_isatty_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	; (800972c <_isatty_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f8 fccd 	bl	80020ba <_isatty>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_isatty_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_isatty_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	200005dc 	.word	0x200005dc

08009730 <_sbrk_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d06      	ldr	r5, [pc, #24]	; (800974c <_sbrk_r+0x1c>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	f7f8 fcd6 	bl	80020ec <_sbrk>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_sbrk_r+0x1a>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_sbrk_r+0x1a>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	200005dc 	.word	0x200005dc

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <__assert_func>:
 800976c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800976e:	4614      	mov	r4, r2
 8009770:	461a      	mov	r2, r3
 8009772:	4b09      	ldr	r3, [pc, #36]	; (8009798 <__assert_func+0x2c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4605      	mov	r5, r0
 8009778:	68d8      	ldr	r0, [r3, #12]
 800977a:	b14c      	cbz	r4, 8009790 <__assert_func+0x24>
 800977c:	4b07      	ldr	r3, [pc, #28]	; (800979c <__assert_func+0x30>)
 800977e:	9100      	str	r1, [sp, #0]
 8009780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009784:	4906      	ldr	r1, [pc, #24]	; (80097a0 <__assert_func+0x34>)
 8009786:	462b      	mov	r3, r5
 8009788:	f000 f844 	bl	8009814 <fiprintf>
 800978c:	f000 f854 	bl	8009838 <abort>
 8009790:	4b04      	ldr	r3, [pc, #16]	; (80097a4 <__assert_func+0x38>)
 8009792:	461c      	mov	r4, r3
 8009794:	e7f3      	b.n	800977e <__assert_func+0x12>
 8009796:	bf00      	nop
 8009798:	20000064 	.word	0x20000064
 800979c:	08009b87 	.word	0x08009b87
 80097a0:	08009b94 	.word	0x08009b94
 80097a4:	08009bc2 	.word	0x08009bc2

080097a8 <_calloc_r>:
 80097a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097aa:	fba1 2402 	umull	r2, r4, r1, r2
 80097ae:	b94c      	cbnz	r4, 80097c4 <_calloc_r+0x1c>
 80097b0:	4611      	mov	r1, r2
 80097b2:	9201      	str	r2, [sp, #4]
 80097b4:	f7ff f93e 	bl	8008a34 <_malloc_r>
 80097b8:	9a01      	ldr	r2, [sp, #4]
 80097ba:	4605      	mov	r5, r0
 80097bc:	b930      	cbnz	r0, 80097cc <_calloc_r+0x24>
 80097be:	4628      	mov	r0, r5
 80097c0:	b003      	add	sp, #12
 80097c2:	bd30      	pop	{r4, r5, pc}
 80097c4:	220c      	movs	r2, #12
 80097c6:	6002      	str	r2, [r0, #0]
 80097c8:	2500      	movs	r5, #0
 80097ca:	e7f8      	b.n	80097be <_calloc_r+0x16>
 80097cc:	4621      	mov	r1, r4
 80097ce:	f7fe f9c1 	bl	8007b54 <memset>
 80097d2:	e7f4      	b.n	80097be <_calloc_r+0x16>

080097d4 <__ascii_mbtowc>:
 80097d4:	b082      	sub	sp, #8
 80097d6:	b901      	cbnz	r1, 80097da <__ascii_mbtowc+0x6>
 80097d8:	a901      	add	r1, sp, #4
 80097da:	b142      	cbz	r2, 80097ee <__ascii_mbtowc+0x1a>
 80097dc:	b14b      	cbz	r3, 80097f2 <__ascii_mbtowc+0x1e>
 80097de:	7813      	ldrb	r3, [r2, #0]
 80097e0:	600b      	str	r3, [r1, #0]
 80097e2:	7812      	ldrb	r2, [r2, #0]
 80097e4:	1e10      	subs	r0, r2, #0
 80097e6:	bf18      	it	ne
 80097e8:	2001      	movne	r0, #1
 80097ea:	b002      	add	sp, #8
 80097ec:	4770      	bx	lr
 80097ee:	4610      	mov	r0, r2
 80097f0:	e7fb      	b.n	80097ea <__ascii_mbtowc+0x16>
 80097f2:	f06f 0001 	mvn.w	r0, #1
 80097f6:	e7f8      	b.n	80097ea <__ascii_mbtowc+0x16>

080097f8 <__ascii_wctomb>:
 80097f8:	b149      	cbz	r1, 800980e <__ascii_wctomb+0x16>
 80097fa:	2aff      	cmp	r2, #255	; 0xff
 80097fc:	bf85      	ittet	hi
 80097fe:	238a      	movhi	r3, #138	; 0x8a
 8009800:	6003      	strhi	r3, [r0, #0]
 8009802:	700a      	strbls	r2, [r1, #0]
 8009804:	f04f 30ff 	movhi.w	r0, #4294967295
 8009808:	bf98      	it	ls
 800980a:	2001      	movls	r0, #1
 800980c:	4770      	bx	lr
 800980e:	4608      	mov	r0, r1
 8009810:	4770      	bx	lr
	...

08009814 <fiprintf>:
 8009814:	b40e      	push	{r1, r2, r3}
 8009816:	b503      	push	{r0, r1, lr}
 8009818:	4601      	mov	r1, r0
 800981a:	ab03      	add	r3, sp, #12
 800981c:	4805      	ldr	r0, [pc, #20]	; (8009834 <fiprintf+0x20>)
 800981e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009822:	6800      	ldr	r0, [r0, #0]
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	f7ff fd37 	bl	8009298 <_vfiprintf_r>
 800982a:	b002      	add	sp, #8
 800982c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009830:	b003      	add	sp, #12
 8009832:	4770      	bx	lr
 8009834:	20000064 	.word	0x20000064

08009838 <abort>:
 8009838:	b508      	push	{r3, lr}
 800983a:	2006      	movs	r0, #6
 800983c:	f000 f82c 	bl	8009898 <raise>
 8009840:	2001      	movs	r0, #1
 8009842:	f7f8 fbdb 	bl	8001ffc <_exit>

08009846 <_raise_r>:
 8009846:	291f      	cmp	r1, #31
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4604      	mov	r4, r0
 800984c:	460d      	mov	r5, r1
 800984e:	d904      	bls.n	800985a <_raise_r+0x14>
 8009850:	2316      	movs	r3, #22
 8009852:	6003      	str	r3, [r0, #0]
 8009854:	f04f 30ff 	mov.w	r0, #4294967295
 8009858:	bd38      	pop	{r3, r4, r5, pc}
 800985a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800985c:	b112      	cbz	r2, 8009864 <_raise_r+0x1e>
 800985e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009862:	b94b      	cbnz	r3, 8009878 <_raise_r+0x32>
 8009864:	4620      	mov	r0, r4
 8009866:	f000 f831 	bl	80098cc <_getpid_r>
 800986a:	462a      	mov	r2, r5
 800986c:	4601      	mov	r1, r0
 800986e:	4620      	mov	r0, r4
 8009870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009874:	f000 b818 	b.w	80098a8 <_kill_r>
 8009878:	2b01      	cmp	r3, #1
 800987a:	d00a      	beq.n	8009892 <_raise_r+0x4c>
 800987c:	1c59      	adds	r1, r3, #1
 800987e:	d103      	bne.n	8009888 <_raise_r+0x42>
 8009880:	2316      	movs	r3, #22
 8009882:	6003      	str	r3, [r0, #0]
 8009884:	2001      	movs	r0, #1
 8009886:	e7e7      	b.n	8009858 <_raise_r+0x12>
 8009888:	2400      	movs	r4, #0
 800988a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800988e:	4628      	mov	r0, r5
 8009890:	4798      	blx	r3
 8009892:	2000      	movs	r0, #0
 8009894:	e7e0      	b.n	8009858 <_raise_r+0x12>
	...

08009898 <raise>:
 8009898:	4b02      	ldr	r3, [pc, #8]	; (80098a4 <raise+0xc>)
 800989a:	4601      	mov	r1, r0
 800989c:	6818      	ldr	r0, [r3, #0]
 800989e:	f7ff bfd2 	b.w	8009846 <_raise_r>
 80098a2:	bf00      	nop
 80098a4:	20000064 	.word	0x20000064

080098a8 <_kill_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d07      	ldr	r5, [pc, #28]	; (80098c8 <_kill_r+0x20>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	602b      	str	r3, [r5, #0]
 80098b6:	f7f8 fb91 	bl	8001fdc <_kill>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	d102      	bne.n	80098c4 <_kill_r+0x1c>
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	b103      	cbz	r3, 80098c4 <_kill_r+0x1c>
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	200005dc 	.word	0x200005dc

080098cc <_getpid_r>:
 80098cc:	f7f8 bb7e 	b.w	8001fcc <_getpid>

080098d0 <_init>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr

080098dc <_fini>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	bf00      	nop
 80098e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e2:	bc08      	pop	{r3}
 80098e4:	469e      	mov	lr, r3
 80098e6:	4770      	bx	lr
